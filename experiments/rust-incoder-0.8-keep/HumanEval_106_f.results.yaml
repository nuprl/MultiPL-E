name: HumanEval_106_f
language: rust
results:
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1, f(n-1)]\n    }\
    \ else {\n        vec![1 + f(n-1), f(n-1)]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc65k8782.rs:10:17\n   |\n\
    10 |         vec![1, f(n-1)]\n   |                 ^^^^^^ expected `isize`, found\
    \ struct `Vec`\n   |\n   = note: expected type `isize`\n            found struct\
    \ `Vec<isize>`\n\nerror[E0277]: cannot add `Vec<isize>` to `{integer}`\n  -->\
    \ /tmp/tmpc65k8782.rs:12:16\n   |\n12 |         vec![1 + f(n-1), f(n-1)]\n   |\
    \                ^ no implementation for `{integer} + Vec<isize>`\n   |\n   =\
    \ help: the trait `Add<Vec<isize>>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc65k8782.rs:12:26\n   |\n12 |         vec![1 + f(n-1),\
    \ f(n-1)]\n   |                          ^^^^^^ expected `isize`, found struct\
    \ `Vec`\n   |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, 1]\n    } else\
    \ {\n        vec![n - 1, n * f(n-1)]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `Vec<isize>`\n  --> /tmp/tmpnsucu5pd.rs:12:23\n\
    \   |\n12 |         vec![n - 1, n * f(n-1)]\n   |                       ^ no implementation\
    \ for `isize * Vec<isize>`\n   |\n   = help: the trait `Mul<Vec<isize>>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n\
    \             <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n  \
    \           <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n      \
    \       <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n        \
    \   and 49 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1.0, n, f(n-1)]\n\
    \    } else {\n        vec![1.0, f(n-1), n]\n    }\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpea8i95xt.rs:10:14\n   |\n\
    10 |         vec![1.0, n, f(n-1)]\n   |              ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpea8i95xt.rs:12:14\n\
    \   |\n12 |         vec![1.0, f(n-1), n]\n   |              ^^^ expected `isize`,\
    \ found floating-point number\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 3, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpbt9foplb.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut vec = Vec::new();\n    for _ in 0..n {\n\
    \        vec.push(i::factorial(i));\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `i`\n\
    \  --> /tmp/tmp6b5puj0u.rs:11:18\n   |\n11 |         vec.push(i::factorial(i));\n\
    \   |                  ^ use of undeclared crate or module `i`\n\nerror[E0425]:\
    \ cannot find value `i` in this scope\n  --> /tmp/tmp6b5puj0u.rs:11:31\n   |\n\
    11 |         vec.push(i::factorial(i));\n   |                               ^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut result = Vec::new();\n\
    \        for _ in 0..n / 2 {\n            result.push((n * 2) as isize);\n   \
    \     }\n        result.push(n);\n        result\n    } else {\n        let mut\
    \ result = Vec::new();\n        for _ in 0..n / 2 {\n            result.push((n\
    \ + 1) * (n + 2) as isize);\n        }\n        result\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[42, 42]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmprs0h09i9.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    for i\
    \ in 1..n {\n        if i % 2 == 0 {\n            vec.push(i * i);\n        }\
    \ else {\n            vec.push(i + 1);\n        }\n    }\n    return vec;\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp0gc6ik42.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n <= 1 {\n        return vec![1isize];\n    }\n\
    \    let mut vec = vec![1isize; n];\n    for i in vec.iter_mut() {\n        *i\
    \ = *i * i;\n    }\n    return vec\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppo9v_e9a.rs:12:32\n   |\n\
    12 |     let mut vec = vec![1isize; n];\n   |                                ^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ vec = vec![1isize; n.try_into().unwrap()];\n   |                           \
    \      ++++++++++++++++++++\n\nerror[E0277]: cannot multiply `isize` by `&mut\
    \ isize`\n  --> /tmp/tmppo9v_e9a.rs:14:17\n   |\n14 |         *i = *i * i;\n \
    \  |                 ^ no implementation for `isize * &mut isize`\n   |\n   =\
    \ help: the trait `Mul<&mut isize>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        return vec![1usize; n];\n\
    \    }\n\n    let mut vec: Vec<isize> = Vec::new();\n    for i in 1..n {\n   \
    \     vec.push(i * f(i-1));\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgblbmmw0.rs:10:21\n   |\n\
    10 |         return vec![1usize; n];\n   |                     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: change the type of the numeric literal from\
    \ `usize` to `isize`\n   |\n10 |         return vec![1isize; n];\n   |       \
    \               ~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgblbmmw0.rs:10:29\n\
    \   |\n10 |         return vec![1usize; n];\n   |                            \
    \ ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n   |\n10 |         return\
    \ vec![1usize; n.try_into().unwrap()];\n   |                              ++++++++++++++++++++\n\
    \nerror[E0277]: cannot multiply `isize` by `Vec<isize>`\n  --> /tmp/tmpgblbmmw0.rs:15:20\n\
    \   |\n15 |         vec.push(i * f(i-1));\n   |                    ^ no implementation\
    \ for `isize * Vec<isize>`\n   |\n   = help: the trait `Mul<Vec<isize>>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n\
    \             <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n  \
    \           <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n      \
    \       <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n        \
    \   and 49 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n  \
    \  if n % 2 == 0 {\n        let mut result = 1;\n        for i in 2..(n - 1) {\n\
    \            result *= i;\n        }\n        return vec![result];\n    }\n  \
    \  let mut result = vec![0];\n    for i in 1..n {\n        result.push(i * result[result.len()\
    \ - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp0agsff28.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    let mut factorial\
    \ = 1;\n    for i in 1..n {\n        if i % 2 == 0 {\n            factorial *=\
    \ i;\n        }\n        else {\n            result[i] = factorial;\n        \
    \    factorial = 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0241ap_6.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp0241ap_6.rs:16:13\n   |\n16 |            \
    \ result[i] = factorial;\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize..n];\n    for i in\
    \ result.iter_mut() {\n        *i = if n % 2 == 0 { isize } else { 1isize * (i\
    \ + 1); }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0423]: expected value, found builtin type `isize`\n  --> /tmp/tmp1osvneth.rs:11:30\n\
    \   |\n11 |         *i = if n % 2 == 0 { isize } else { 1isize * (i + 1); }\n\
    \   |                              ^^^^^ not a value\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&mut std::ops::Range<isize>`\n  --> /tmp/tmp1osvneth.rs:11:57\n\
    \   |\n11 |         *i = if n % 2 == 0 { isize } else { 1isize * (i + 1); }\n\
    \   |                                                       - ^ - {integer}\n\
    \   |                                                       |\n   |          \
    \                                             &mut std::ops::Range<isize>\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1osvneth.rs:11:43\n   |\n11 |  \
    \       *i = if n % 2 == 0 { isize } else { 1isize * (i + 1); }\n   |        \
    \                                   ^^^^^^^^^^^^^^^^^^^^^ expected struct `std::ops::Range`,\
    \ found `()`\n   |\n   = note: expected struct `std::ops::Range<isize>`\n    \
    \       found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1osvneth.rs:13:5\n\
    \   |\n8  | fn f(n: isize) -> Vec<isize> {\n   |                   ----------\
    \ expected `Vec<isize>` because of return type\n...\n13 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found struct `std::ops::Range`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<std::ops::Range<isize>>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369, E0423.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        result[i] = if i % 2 == 0 {\n            i + 1\n        } else {\n\
    \            result[i] * i;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_9woq429.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_9woq429.rs:11:9\n\
    \   |\n11 |         result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_9woq429.rs:14:13\n\
    \   |\n14 |             result[i] * i;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: `if` and `else` have incompatible\
    \ types\n  --> /tmp/tmp_9woq429.rs:14:13\n   |\n11 |           result[i] = if\
    \ i % 2 == 0 {\n   |  _____________________-\n12 | |             i + 1\n   | |\
    \             ----- expected because of this\n13 | |         } else {\n14 | |\
    \             result[i] * i;\n   | |             ^^^^^^^^^^^^^-\n   | |      \
    \       |            |\n   | |             |            help: consider removing\
    \ this semicolon\n   | |             expected `isize`, found `()`\n15 | |    \
    \     }\n   | |_________- `if` and `else` have incompatible types\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1; n]\n    }\n\
    \    let mut result = vec![1; n];\n    for i in 2..n {\n        result[i] = result[i-1]\
    \ * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmungkek4.rs:10:24\n   |\n\
    10 |         return vec![1; n]\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n10 |         return vec![1; n.try_into().unwrap()]\n\
    \   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmungkek4.rs:12:30\n   |\n12 |     let mut result = vec![1;\
    \ n];\n   |                              ^ expected `usize`, found `isize`\n \
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |     let mut result = vec![1; n.try_into().unwrap()];\n\
    \   |                               ++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpmungkek4.rs:14:9\n\
    \   |\n14 |         result[i] = result[i-1] * i;\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpmungkek4.rs:14:21\n\
    \   |\n14 |         result[i] = result[i-1] * i;\n   |                     ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    vec![1isize..=n]\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_p_7bag0.rs:9:10\n  |\n9 |\
    \     vec![1isize..=n]\n  |          ^^^^^^^^^^ expected `isize`, found struct\
    \ `RangeInclusive`\n  |\n  = note: expected type `isize`\n           found struct\
    \ `RangeInclusive<isize>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 1..=n {\n        if i % 2 == 0 {\n            result[i] = factorial(i);\n  \
    \      } else {\n            result[i] = result[i-1] + 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmphbuydz68.rs:12:25\n\
    \   |\n12 |             result[i] = factorial(i);\n   |                      \
    \   ^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmphbuydz68.rs:9:35\n  |\n9 |     let mut result = vec![1isize; n];\n \
    \ |                                   ^ expected `usize`, found `isize`\n  |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n  |\n9 |     let mut result = vec![1isize; n.try_into().unwrap()];\n\
    \  |                                    ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphbuydz68.rs:12:13\n\
    \   |\n12 |             result[i] = factorial(i);\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphbuydz68.rs:14:13\n\
    \   |\n14 |             result[i] = result[i-1] + 1;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphbuydz68.rs:14:25\n\
    \   |\n14 |             result[i] = result[i-1] + 1;\n   |                   \
    \      ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 5 pr"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n <= 1 {\n        return vec![1, n]\n    }\n\
    \    let mut sum: isize = 1;\n    let mut res = vec![1, n];\n    for i in 2..n-1\
    \ {\n        sum *= i;\n        res.push_back(sum);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpum5uv3ff.rs:16:13\n   |\n16 |         res.push_back(sum);\n\
    \   |             ^^^^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factorial_list = vec![1];\n    for i in\
    \ 1..=n {\n        if i%2 == 0 {\n            factorial_list.push(factorial_list[i]*i);\n\
    \        } else {\n            factorial_list.push(factorial_list[i-1]+1);\n \
    \       }\n    }\n    return factorial_list;\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpjfaxn_7j.rs:12:33\n   |\n12 |             factorial_list.push(factorial_list[i]*i);\n\
    \   |                                 ^^^^^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpjfaxn_7j.rs:14:33\n   |\n14 |  \
    \           factorial_list.push(factorial_list[i-1]+1);\n   |                \
    \                 ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut nums = vec![];\n\n    for i in 1..n + 1\
    \ {\n        if i % 2 == 0 {\n            nums.push(nums.iter().cloned().fold(1,\
    \ |acc, x| acc * x));\n        } else {\n            nums.push(nums.iter().cloned().fold(1,\
    \ |acc, x| acc + x));\n        }\n    }\n\n    nums\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 3, 3, 9]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpikm23kcv.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut vec = vec![1; n];\n    for i in 2..=n {\n\
    \        vec[i] *= i;\n    }\n    vec\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpibk8m878.rs:9:27\n  |\n9 |\
    \     let mut vec = vec![1; n];\n  |                           ^ expected `usize`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n  |\n9 |     let mut vec = vec![1; n.try_into().unwrap()];\n\
    \  |                            ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpibk8m878.rs:11:9\n\
    \   |\n11 |         vec[i] *= i;\n   |         ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        vec![]\n    } else {\n    \
    \    let mut acc = vec![1isize];\n        let mut i = 0;\n        while i < n\
    \ {\n            acc[acc.len() - 1] = acc[acc.len() - 1] * i;\n            i +=\
    \ 1;\n        }\n        acc\n    }\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `acc` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmp08utx4uq.rs:15:17\n   |\n15 |             acc[acc.len()\
    \ - 1] = acc[acc.len() - 1] * i;\n   |             ----^^^^^^^^^-----\n   |  \
    \           |   |\n   |             |   immutable borrow occurs here\n   |   \
    \          mutable borrow occurs here\n   |             mutable borrow later used\
    \ here\n   |\nhelp: try adding a local storing this...\n  --> /tmp/tmp08utx4uq.rs:15:17\n\
    \   |\n15 |             acc[acc.len() - 1] = acc[acc.len() - 1] * i;\n   |   \
    \              ^^^^^^^^^\nhelp: ...and then using that local here\n  --> /tmp/tmp08utx4uq.rs:15:13\n\
    \   |\n15 |             acc[acc.len() - 1] = acc[acc.len() - 1] * i;\n   |   \
    \          ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 1..=n{\n\
    \        if i%2 == 0 {\n            result.push(i*i);\n        }else{\n      \
    \      result.push(i+1);\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n \
    \   assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp5jrk2pza.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n   \
    \ vec![1 if n % 2 == 0 { 1 } else { i * f(i + 1) } for i in 1..n]\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error: no rules expected the token `if`\n  --> /tmp/tmp1r8bgjlu.rs:12:12\n\
    \   |\n12 |     vec![1 if n % 2 == 0 { 1 } else { i * f(i + 1) } for i in 1..n]\n\
    \   |            ^^ no rules expected this token in macro call\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i%2 == 0 {\n            result.push(result.len());\n        } else\
    \ {\n            for j in 1..=i {\n                result.push(i*j);\n       \
    \     }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp37zqij20.rs:15:29\n   |\n\
    15 |                 result.push(i*j);\n   |                             ^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |                 result.push((i*j).try_into().unwrap());\n\
    \   |                             +   +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp37zqij20.rs:19:5\n   |\n8  | fn f(n: isize) -> Vec<isize>\
    \ {\n   |                   ---------- expected `Vec<isize>` because of return\
    \ type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factorial = Vec::new();\n    for i in 1..=n\
    \ {\n        if i%2==0 {\n            factorial.push(i*i);\n        } else {\n\
    \            factorial.push(factorial.last()+(i-1));\n        }\n    }\n    factorial\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `isize` to `Option<&isize>`\n  --> /tmp/tmpyzeuvcd1.rs:14:44\n\
    \   |\n14 |             factorial.push(factorial.last()+(i-1));\n   |        \
    \                    ----------------^----- isize\n   |                      \
    \      |\n   |                            Option<&isize>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        vec![]\n    } else {\n    \
    \    vec![n - 1, n * f(n - 1)]\n    }\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `Vec<isize>`\n  --> /tmp/tmp38xwtt92.rs:12:23\n\
    \   |\n12 |         vec![n - 1, n * f(n - 1)]\n   |                       ^ no\
    \ implementation for `isize * Vec<isize>`\n   |\n   = help: the trait `Mul<Vec<isize>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut res = Vec::new();\n\
    \        for i in 1..n {\n            res.push(i as isize * i);\n        }\n \
    \       res.reverse();\n        return res\n    } else {\n        let mut res\
    \ = Vec::new();\n        for i in 1..n {\n            res.push((i as isize * i)\
    \ as isize);\n        }\n        res.reverse();\n        return res\n    }\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[16, 9, 4, 1]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp9khv4co1.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp28_hs76i.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n < 1 {\n        return vec![];\n    }\n    let\
    \ mut fact = vec![1.0];\n    for i in 2..=n {\n        if i % 2 == 0 {\n     \
    \       fact.push(fact as f64 * i as f64);\n        } else {\n            fact.push((fact\
    \ as f64 * i as f64) + 1);\n        }\n    }\n    fact\n}\n\nfn main() {\n   \
    \ let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n \
    \   assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `{integer}` to `f64`\n  --> /tmp/tmp0089lyw5.rs:17:48\n\
    \   |\n17 |             fact.push((fact as f64 * i as f64) + 1);\n   |       \
    \                                         ^ no implementation for `f64 + {integer}`\n\
    \   |\n   = help: the trait `Add<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n17 |         \
    \    fact.push((fact as f64 * i as f64) + 1.0);\n   |                        \
    \                           ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0089lyw5.rs:20:5\n\
    \   |\n8  | fn f(n: isize) -> Vec<isize> {\n   |                   ----------\
    \ expected `Vec<isize>` because of return type\n...\n20 |     fact\n   |     ^^^^\
    \ expected `isize`, found `f64`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<f64>`\n\nerror[E0605]: non-primitive cast: `Vec<f64>`\
    \ as `f64`\n  --> /tmp/tmp0089lyw5.rs:15:23\n   |\n15 |             fact.push(fact\
    \ as f64 * i as f64);\n   |                       ^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror[E0605]: non-primitive cast: `Vec<f64>` as `f64`\n  -->\
    \ /tmp/tmp0089lyw5.rs:17:24\n   |\n17 |             fact.push((fact as f64 * i\
    \ as f64) + 1);\n   |                        ^^^^^^^^^^^ an `as` expression can\
    \ only be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0605.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(i*i);\n        } else {\n  \
    \          result.push(i+1);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpy732d12s.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![1isize];\n    for i in 2..=n {\n        let mut product\
    \ = 1isize;\n        for j in i..=n {\n            product *= j;\n        }\n\
    \        result.push(product);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 120, 60, 20, 5]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpaiz3rtwl.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![1; n + 1];\n    v[0] = 1;\n   \
    \ for i in 2..n + 1 {\n        v[i] = v[i - 1] * i;\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyre3iwgo.rs:9:25\n  |\n9 |\
    \     let mut v = vec![1; n + 1];\n  |                         ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut v = vec![1; (n\
    \ + 1).try_into().unwrap()];\n  |                         +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpyre3iwgo.rs:12:9\n\
    \   |\n12 |         v[i] = v[i - 1] * i;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpyre3iwgo.rs:12:16\n   |\n12 |  \
    \       v[i] = v[i - 1] * i;\n   |                ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n]\n    } else {\n\
    \        vec![1..n]\n            .iter()\n            .map(|x| x * x)\n      \
    \      .collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpiyyk7l79.rs:14:24\n   |\n14 |             .map(|x| x * x)\n   |\
    \                      - ^ - &std::ops::Range<isize>\n   |                   \
    \   |\n   |                      &std::ops::Range<isize>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    assert!(n >= 1);\n    let mut result = vec![1];\n\
    \    for i in 2..=n {\n        result += vec![i];\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<{integer}>`\n  --> /tmp/tmp7y0z74t8.rs:12:9\n   |\n12 |         result\
    \ += vec![i];\n   |         ------^^^^^^^^^^^\n   |         |\n   |         cannot\
    \ use `+=` on type `Vec<{integer}>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    assert!(n >= 1);\n    let mut vec = vec![];\n  \
    \  for i in 1..n {\n        if i % 2 == 0 {\n            vec.push(i * i);\n  \
    \      } else {\n            let mut j = 1;\n            loop {\n            \
    \    if j == i {\n                    break;\n                }\n            \
    \    vec.push(j);\n                j += 1;\n            }\n        }\n    }\n\
    \    vec\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 2, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpdn95ztuy.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n <= 1 {\n        return vec![1isize];\n    }\n\
    \    let mut res = vec![1isize];\n    let mut num = 1;\n    for i in 2..n {\n\
    \        res.insert(0, num);\n        num *= i;\n    }\n    return res;\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 2, 1, 1]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpo0m9d535.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factorial_vec: Vec<isize> = Vec::new();\n\
    \    for i in 1..n + 1 {\n        if i % 2 == 0 {\n            factorial_vec.push(factorial(i));\n\
    \        } else {\n            factorial_vec.push(sum_of_numbers(i));\n      \
    \  }\n    }\n    return factorial_vec;\n}\n\nfn main() {\n    let candidate =\
    \ f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpdcjvo3mx.rs:12:32\n\
    \   |\n12 |             factorial_vec.push(factorial(i));\n   |              \
    \                  ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `sum_of_numbers` in this scope\n  --> /tmp/tmpdcjvo3mx.rs:14:32\n \
    \  |\n14 |             factorial_vec.push(sum_of_numbers(i));\n   |          \
    \                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n]\n    } else {\n\
    \        let mut numbers = vec![];\n        for i in 1..=n {\n            numbers.push(i*i);\n\
    \        }\n        numbers\n    }\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 9, 16, 25]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpw144t2a8.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n  \
    \  let mut product = vec![1usize; n];\n    for &i in product.iter_mut() {\n  \
    \      *i = *i * (i + 1) as isize;\n    }\n    product\n}\n\nfn main() {\n   \
    \ let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n \
    \   assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4yil8noj.rs:12:36\n   |\n\
    12 |     let mut product = vec![1usize; n];\n   |                            \
    \        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut product = vec![1usize; n.try_into().unwrap()];\n   |                   \
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp4yil8noj.rs:13:9\n   |\n13 |     for &i in product.iter_mut() {\n  \
    \ |         ^^    ------------------ this expression has type `Option<&mut usize>`\n\
    \   |         |\n   |         types differ in mutability\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note: expected mutable\
    \ reference `&mut usize`\n                      found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4yil8noj.rs:16:5\n   |\n8  | fn f(n: isize)\
    \ -> Vec<isize> {\n   |                   ---------- expected `Vec<isize>` because\
    \ of return type\n...\n16 |     product\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<usize>`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut fact = Vec::new();\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            fact.push(i * i);\n        } else {\n  \
    \          fact.push(i + 1);\n        }\n    }\n    fact\n}\n\nfn main() {\n \
    \   let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpmp0rn2qn.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        vec![1, 1]\n    } else {\n\
    \        let mut vec = vec![1; n];\n        vec.iter().cloned().for_each(|x| *x\
    \ = factorial(*x));\n        vec\n    }\n}\n\nfn main() {\n    let candidate =\
    \ f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpykvmw9iz.rs:13:47\n\
    \   |\n13 |         vec.iter().cloned().for_each(|x| *x = factorial(*x));\n  \
    \ |                                               ^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpykvmw9iz.rs:12:31\n \
    \  |\n12 |         let mut vec = vec![1; n];\n   |                           \
    \    ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |      \
    \   let mut vec = vec![1; n.try_into().unwrap()];\n   |                      \
    \          ++++++++++++++++++++\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmpykvmw9iz.rs:13:42\n   |\n13 |         vec.iter().cloned().for_each(|x|\
    \ *x = factorial(*x));\n   |                                          ^^\n\nerror[E0614]:\
    \ type `{integer}` cannot be dereferenced\n  --> /tmp/tmpykvmw9iz.rs:13:57\n \
    \  |\n13 |         vec.iter().cloned().for_each(|x| *x = factorial(*x));\n   |\
    \                                                         ^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    (1..n).map(|i| {\n        match i % 2 {\n      \
    \      0 => i,\n            _ => i * i + 1,\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryxb78xc.rs:9:5\n   |\n8\
    \  |   fn f(n: isize) -> Vec<isize> {\n   |                     ---------- expected\
    \ `Vec<isize>` because of return type\n9  | /     (1..n).map(|i| {\n10 | |   \
    \      match i % 2 {\n11 | |             0 => i,\n12 | |             _ => i *\
    \ i + 1,\n13 | |         }\n14 | |     })\n   | |______^ expected struct `Vec`,\
    \ found struct `Map`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Map<std::ops::Range<isize>, [closure@/tmp/tmpryxb78xc.rs:9:16:\
    \ 14:6]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut facs = vec![0];\n    if n % 2 == 0 {\n \
    \       for i in 1..n {\n            facs = facs.iter().map(|&x| x * i).collect();\n\
    \        }\n    } else {\n        for i in 1..n / 2 {\n            facs = facs.iter().map(|&x|\
    \ x * i).collect();\n        }\n    }\n    facs\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpyaz5p01z.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        vec![]\n    } else {\n    \
    \    let mut sum = 1;\n        for i in 1..n {\n            sum *= i;\n      \
    \  }\n        vec![sum]\n    }\n}\n\nfn main() {\n    let candidate = f;\n   \
    \ assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[24]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpwq7n83ml.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![0; n + 1];\n    for i in 1..=n\
    \ {\n        result[i] = if i % 2 == 0 {\n            (*i)\n        } else {\n\
    \            result[i] + i;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmp5dmqqrok.rs:12:13\n\
    \   |\n12 |             (*i)\n   |             ^  ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n12 -             (*i)\n\
    12 +             *i\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmp5dmqqrok.rs:9:30\n\
    \  |\n9 |     let mut result = vec![0; n + 1];\n  |                          \
    \    ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let\
    \ mut result = vec![0; (n + 1).try_into().unwrap()];\n  |                    \
    \          +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp5dmqqrok.rs:11:9\n   |\n11 |   \
    \      result[i] = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0614]: type `isize` cannot be\
    \ dereferenced\n  --> /tmp/tmp5dmqqrok.rs:12:13\n   |\n12 |             (*i)\n\
    \   |             ^^^^\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp5dmqqrok.rs:14:13\n   |\n14 |             result[i]\
    \ + i;\n   |             ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors; 1 warning\
    \ emitted\n\nSome errors have detailed explanations: E0277, E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1isize + 1isize]\n\
    \    } else {\n        (1..n).map(|x| x * x).collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 9, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpsxs6esg6.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in 1..=n\
    \ {\n        if num % 2 == 0 {\n            result.push(*num);\n        } else\
    \ {\n            result.push(num * f(num + 1));\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmjy6gq2z.rs:12:25\n\
    \   |\n12 |             result.push(*num);\n   |                         ^^^^\n\
    \nerror[E0277]: cannot multiply `isize` by `Vec<isize>`\n  --> /tmp/tmpmjy6gq2z.rs:14:29\n\
    \   |\n14 |             result.push(num * f(num + 1));\n   |                 \
    \            ^ no implementation for `isize * Vec<isize>`\n   |\n   = help: the\
    \ trait `Mul<Vec<isize>>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![1, 1 + f(n - 1)]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplh_95qjd.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror[E0277]: cannot add `Vec<isize>` to\
    \ `{integer}`\n  --> /tmp/tmplh_95qjd.rs:12:19\n   |\n12 |         vec![1, 1 +\
    \ f(n - 1)]\n   |                   ^ no implementation for `{integer} + Vec<isize>`\n\
    \   |\n   = help: the trait `Add<Vec<isize>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            result.push(i * i);\n        } else {\n\
    \            result.push(1);\n            for i in 1..i {\n                result.push(i\
    \ * i);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 1, 1, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpph8rqied.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![\n            1,\n\
    \            *f(n - 1),\n        ]\n    } else {\n        vec![\n            1,\n\
    \            *f(n - 1),\n            *f(n - 2),\n        ]\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4k1t4477.rs:12:13\n   |\n\
    12 |             *f(n - 1),\n   |             ^^^^^^^^^ expected `isize`, found\
    \ slice `[isize]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4k1t4477.rs:17:13\n\
    \   |\n17 |             *f(n - 1),\n   |             ^^^^^^^^^ expected `isize`,\
    \ found slice `[isize]`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1];\n    for i in 2..n + 1\
    \ {\n        if i % 2 == 0 {\n            result.push(i * result[i - 1])\n   \
    \     } else {\n            result.push(i * result[i - 1])\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp09pl9ibq.rs:12:29\n   |\n12 |             result.push(i * result[i -\
    \ 1])\n   |                             ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp09pl9ibq.rs:14:29\n   |\n14 |  \
    \           result.push(i * result[i - 1])\n   |                             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 1..n {\n\
    \        if i % 2 == 0 {\n            res[i - 1] *= i;\n        } else {\n   \
    \         res[i - 1] += i;\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpif089zkl.rs:12:13\n\
    \   |\n12 |             res[i - 1] *= i;\n   |             ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpif089zkl.rs:14:13\n   |\n14 |             res[i -\
    \ 1] += i;\n   |             ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for\
    \ i in 1..=n {\n        if i & 1 == 0 {\n            result.push(i*i);\n     \
    \   } else {\n            result.push(i+1);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpk662o6lm.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::with_capacity(n);\n    for i\
    \ in 1..n {\n        if i % 2 == 0 {\n            res.push(i * i);\n        }\
    \ else {\n            res.push(i + 1);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgxrfg340.rs:9:38\n  |\n9 |\
    \     let mut res = Vec::with_capacity(n);\n  |                              \
    \        ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let\
    \ mut res = Vec::with_capacity(n.try_into().unwrap());\n  |                  \
    \                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut acc = vec![1isize + 1isize..n];\n    for\
    \ i in acc.iter() {\n        if i % 2 == 0 {\n            acc += (i + 1..i).collect();\n\
    \        } else {\n            acc += (i..i).collect();\n        }\n    }\n  \
    \  acc\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&std::ops::Range<isize>` by `{integer}`\n  -->\
    \ /tmp/tmpf5_56yyp.rs:11:14\n   |\n11 |         if i % 2 == 0 {\n   |        \
    \    - ^ - {integer}\n   |            |\n   |            &std::ops::Range<isize>\n\
    \nerror[E0369]: cannot add `{integer}` to `&std::ops::Range<isize>`\n  --> /tmp/tmpf5_56yyp.rs:12:23\n\
    \   |\n12 |             acc += (i + 1..i).collect();\n   |                   \
    \  - ^ - {integer}\n   |                     |\n   |                     &std::ops::Range<isize>\n\
    \nerror[E0599]: the method `collect` exists for struct `std::ops::Range<&std::ops::Range<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpf5_56yyp.rs:12:31\n \
    \  |\n12 |               acc += (i + 1..i).collect();\n   |                  \
    \               ^^^^^^^ method cannot be called on `std::ops::Range<&std::ops::Range<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `&std::ops::Range<isize>: Step`\n          \
    \ which is required by `std::ops::Range<&std::ops::Range<isize>>: Iterator`\n\
    \           `std::ops::Range<&std::ops::Range<isize>>: Iterator`\n           which\
    \ is required by `&mut std::ops::Range<&std::ops::Range<isize>>: Iterator`\nhelp:\
    \ one of the expressions' fields has a method of the same name\n   |\n12 |   \
    \          acc += (i + 1..i).start.collect();\n   |                          \
    \     ++++++\nhelp: one of the expressions' fields has a method of the same name\n\
    \   |\n12 |             acc += (i + 1..i).end.collect();\n   |               \
    \                ++++\n\nerror[E0599]: the method `collect` exists for struct\
    \ `std::ops::Range<&std::ops::Range<isize>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpf5_56yyp.rs:14:27\n   |\n14 |               acc += (i..i).collect();\n\
    \   |                             ^^^^^^^ method cannot be called on `std::ops::Range<&std::ops::Range<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `&std::ops::Range<isize>: Step`\n          \
    \ which is required by `std::ops::Range"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![1; n];\n    for i in 2..=n {\n\
    \        if i%2 == 0 {\n            let mult = i as f32;\n            res[i] =\
    \ mult * i;\n        }\n        else {\n            let add_to = (i - 1);\n  \
    \          res[i] = add_to * (i) + 1;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpuw9i2ev8.rs:16:26\n\
    \   |\n16 |             let add_to = (i - 1);\n   |                          ^\
    \     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n16 -             let add_to = (i - 1);\n16 +      \
    \       let add_to = i - 1;\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpuw9i2ev8.rs:9:27\n\
    \  |\n9 |     let mut res = vec![1; n];\n  |                           ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut res = vec![1;\
    \ n.try_into().unwrap()];\n  |                            ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpuw9i2ev8.rs:13:13\n\
    \   |\n13 |             res[i] = mult * i;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: cannot multiply `f32` by\
    \ `isize`\n  --> /tmp/tmpuw9i2ev8.rs:13:27\n   |\n13 |             res[i] = mult\
    \ * i;\n   |                           ^ no implementation for `f32 * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `f32`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: the\
    \ type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpuw9i2ev8.rs:17:13\n\
    \   |\n17 |             res[i] = add_to * (i) + 1;\n   |             ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = h"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    vec![\n        if n % 2 == 0 {\n            1\n\
    \        } else {\n            i::factorial(n + 1)\n        }\n    ]\n}\n\nfn\
    \ main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `i`\n\
    \  --> /tmp/tmpk4f8d8r2.rs:13:13\n   |\n13 |             i::factorial(n + 1)\n\
    \   |             ^ use of undeclared crate or module `i`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        return vec![1..=n];\n \
    \   }\n    for i in 1..=n {\n        let fact = i * (*i);\n        if i is even\
    \ {\n            vec![fact]\n        } else {\n            vec![fact, 1, *i, *(i+1)]\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `is`\n  --> /tmp/tmpn1z_429h.rs:14:14\n   |\n\
    14 |         if i is even {\n   |         --   ^^ expected `{`\n   |         |\n\
    \   |         this `if` expression has a condition, but no block\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn1z_429h.rs:10:21\n   |\n10 |         return\
    \ vec![1..=n];\n   |                     ^^^^^ expected `isize`, found struct\
    \ `RangeInclusive`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `RangeInclusive<isize>`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpn1z_429h.rs:13:24\n   |\n13 |         let fact = i * (*i);\n  \
    \ |                        ^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn1z_429h.rs:12:5\n\
    \   |\n8  |   fn f(n: isize) -> Vec<isize> {\n   |                     ----------\
    \ expected `Vec<isize>` because of return type\n...\n12 | /     for i in 1..=n\
    \ {\n13 | |         let fact = i * (*i);\n14 | |         if i is even {\n15 |\
    \ |             vec![fact]\n...  |\n18 | |         }\n19 | |     }\n   | |_____^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0:\n        vec![]\n    } else {\n     \
    \   let mut re = vec![1];\n        for _ in 0..n {\n            if n % 2 == 0\
    \ {\n                re.push(re.iter().map(|x| x*x).sum());\n            } else\
    \ {\n                re.push(re.iter().map(|x| x*x).product());\n            }\n\
    \        }\n        re\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpmj8h35h2.rs:22:1\n\
    \   |\n11 |     } else {\n   |            - this opening brace...\n...\n21 | \
    \    }\n   |     - ...matches this closing brace\n22 | }\n   | ^ unexpected closing\
    \ delimiter\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res: Vec<isize> = vec![1; n + 1];\n    for\
    \ i in res.iter_mut() {\n        if i % 2 == 0 {\n            *i = 1;\n      \
    \  } else {\n            *i = (*i * (*i - 1)) as isize;\n        }\n    }\n  \
    \  res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4hsk3pq8.rs:9:39\n  |\n9 |\
    \     let mut res: Vec<isize> = vec![1; n + 1];\n  |                         \
    \              ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |     let mut res: Vec<isize> = vec![1; (n + 1).try_into().unwrap()];\n  | \
    \                                      +     +++++++++++++++++++++\n\nerror[E0369]:\
    \ cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmp4hsk3pq8.rs:11:14\n  \
    \ |\n11 |         if i % 2 == 0 {\n   |            - ^ - {integer}\n   |     \
    \       |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n11 |         if *i % 2 == 0 {\n   |         \
    \   +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![];\n    for i in 1..n {\n   \
    \     if i % 2 == 0 {\n            (res.push(i) as usize, *res) += 1;\n      \
    \  } else {\n            (res.push(i + 1) as usize, *res) += 1;\n        }\n \
    \   }\n    (res as isize, res)\n}\n\nfn main() {\n    let candidate = f;\n   \
    \ assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmppwt77zvp.rs:12:13\n   |\n12 |             (res.push(i)\
    \ as usize, *res) += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: within `(usize, [isize])`,\
    \ the trait `Sized` is not implemented for `[isize]`\n   = note: required because\
    \ it appears within the type `(usize, [isize])`\n   = note: tuples must have a\
    \ statically known size to be initialized\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `(usize, [isize])`\n  --> /tmp/tmppwt77zvp.rs:12:13\n\
    \   |\n12 |             (res.push(i) as usize, *res) += 1;\n   |             ----------------------------^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `(usize, [isize])`\n\
    \nerror[E0067]: invalid left-hand side of assignment\n  --> /tmp/tmppwt77zvp.rs:12:42\n\
    \   |\n12 |             (res.push(i) as usize, *res) += 1;\n   |             ----------------------------\
    \ ^^\n   |             |\n   |             cannot assign to this expression\n\n\
    error[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmppwt77zvp.rs:14:13\n   |\n14 |             (res.push(i +\
    \ 1) as usize, *res) += 1;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: within `(usize,\
    \ [isize])`, the trait `Sized` is not implemented for `[isize]`\n   = note: required\
    \ because it appears within the type `(usize, [isize])`\n   = note: tuples must\
    \ have a statically known size to be initialized\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `(usize, [isize])`\n  --> /tmp/tmppwt77zvp.rs:14:13\n\
    \   |\n14 |             (res.push(i + 1) as usize, *res) += 1;\n   |         \
    \    --------------------------------^^^^^\n   |             |\n   |         \
    \    cannot use `+=` on type `(usize, [isize])`\n\nerror[E0067]: invalid left-hand\
    \ side of assignment\n  --> /tmp/tmppwt77zvp.rs:14:46\n   |\n14 |            \
    \ (res.push(i + 1) as usize, *res) += "
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut f = vec![1, 1];\n    for i in 2..=n {\n\
    \        f[i] = f[i - 1] * i;\n    }\n    f\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpf614mdt_.rs:11:9\n   |\n11 |         f[i] = f[i - 1] * i;\n   |    \
    \     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpf614mdt_.rs:11:16\n\
    \   |\n11 |         f[i] = f[i - 1] * i;\n   |                ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n < 2 {\n        return vec![n]\n    }\n    let\
    \ mut r = vec![n];\n    let mut cur = 1;\n    for i in r.len() {\n        r[i]\
    \ = cur;\n        cur = if n % 2 == 0 { cur * i } else { cur + 1 };\n    }\n \
    \   r\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmp63yom113.rs:14:14\n\
    \   |\n14 |     for i in r.len() {\n   |              ^^^^^^^ `usize` is not an\
    \ iterator\n   |\n   = help: the trait `Iterator` is not implemented for `usize`\n\
    \   = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i%2 == 0 {\n            result.push(i * i);\n        } else {\n  \
    \          result.push(result.last().unwrap() + i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpcq9h2zv_.rs:14:39\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![];\n    for num in 1..=n {\n\
    \        if num % 2 == 0 {\n            res.push(num * num);\n        } else {\n\
    \            res.push(num + 1);\n        }\n    }\n    return res;\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmph_07vbyq.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![1..n].into_iter().map(|n| n * f(n + 1)).sum()\n    }\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpexkzvtuc.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror[E0369]: cannot add `{integer}` to `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpexkzvtuc.rs:12:48\n   |\n12 |         vec![1..n].into_iter().map(|n|\
    \ n * f(n + 1)).sum()\n   |                                              - ^ -\
    \ {integer}\n   |                                              |\n   |       \
    \                                       std::ops::Range<isize>\n\nerror[E0369]:\
    \ cannot multiply `std::ops::Range<isize>` by `Vec<isize>`\n  --> /tmp/tmpexkzvtuc.rs:12:42\n\
    \   |\n12 |         vec![1..n].into_iter().map(|n| n * f(n + 1)).sum()\n   | \
    \                                       - ^ -------- Vec<isize>\n   |        \
    \                                |\n   |                                     \
    \   std::ops::Range<isize>\n\nerror[E0277]: the trait bound `Vec<isize>: Sum<_>`\
    \ is not satisfied\n    --> /tmp/tmpexkzvtuc.rs:12:54\n     |\n12   |        \
    \ vec![1..n].into_iter().map(|n| n * f(n + 1)).sum()\n     |                 \
    \                                     ^^^ the trait `Sum<_>` is not implemented\
    \ for `Vec<isize>`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n               <Duration\
    \ as Sum>\n               <Option<T> as Sum<Option<U>>>\n               <Result<T,\
    \ E> as Sum<Result<U, E>>>\n               <Simd<f32, LANES> as Sum<&'a Simd<f32,\
    \ LANES>>>\n               <Simd<f32, LANES> as Sum>\n               <Simd<f64,\
    \ LANES> as Sum<&'a Simd<f64, LANES>>>\n               <Simd<f64, LANES> as Sum>\n\
    \             and 72 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factorials = Vec::new();\n    for i in 1..=n{\n\
    \        if i%2==0{\n            factorials.push(i * factorials.last_mut().unwrap());\n\
    \        }\n        else{\n            factorials.push(1);\n        }\n    }\n\
    \    factorials\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `&mut _`\n  --> /tmp/tmp0p1r42e9.rs:12:31\n\
    \   |\n12 |             factorials.push(i * factorials.last_mut().unwrap());\n\
    \   |                               ^ no implementation for `isize * &mut _`\n\
    \   |\n   = help: the trait `Mul<&mut _>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n < 2 {\n        return vec![];\n    }\n\n  \
    \  let mut result = vec![];\n\n    for i in 1..=n {\n        if i % 2 == 0 {\n\
    \            result.push(i * i as isize);\n        } else {\n            result.push((i\
    \ * i as isize) + 1);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 10, 16, 26]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpnjwkda6y.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    (1..n).map(|i| if i % 2 == 0 { i * i } else { i\
    \ + 1 }).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpzbdj2d15.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factorial_numbers = vec![1; n + 1];\n\n\
    \    for i in 1..=n {\n        if i % 2 == 0 {\n            factorial_numbers[i]\
    \ = factorial_numbers[i] * i;\n        } else {\n            factorial_numbers[i]\
    \ = factorial_numbers[i] - 1;\n        }\n    }\n\n    factorial_numbers\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpurb9uak6.rs:9:41\n  |\n9 |\
    \     let mut factorial_numbers = vec![1; n + 1];\n  |                       \
    \                  ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |     let mut factorial_numbers = vec![1; (n + 1).try_into().unwrap()];\n  |\
    \                                         +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpurb9uak6.rs:13:13\n\
    \   |\n13 |             factorial_numbers[i] = factorial_numbers[i] * i;\n   |\
    \             ^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpurb9uak6.rs:13:36\n   |\n13 |             factorial_numbers[i]\
    \ = factorial_numbers[i] * i;\n   |                                    ^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpurb9uak6.rs:15:13\n\
    \   |\n15 |             factorial_numbers[i] = factorial_numbers[i] - 1;\n   |\
    \             ^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be "
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize];\n    let mut product\
    \ = 1isize;\n\n    for i in 1..=n {\n        if i % 2 == 0 {\n            result[i\
    \ - 1] = product;\n        }\n        product *= i;\n    }\n\n    result\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplgds8r9q.rs:14:13\n\
    \   |\n14 |             result[i - 1] = product;\n   |             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        vec![1, 1, 1]\n    } else {\n\
    \        let mut result = vec![0; n];\n        let mut j = 1;\n        let mut\
    \ i = 1;\n\n        while i <= n {\n            if i % 2 == 0 {\n            \
    \    result[i] += j;\n            } else {\n                result[i] += j;\n\
    \                i += 1;\n            }\n            i += 1;\n            j =\
    \ j * i;\n        }\n        result\n    }\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7dw3bjtf.rs:12:34\n   |\n\
    12 |         let mut result = vec![0; n];\n   |                              \
    \    ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |      \
    \   let mut result = vec![0; n.try_into().unwrap()];\n   |                   \
    \                ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7dw3bjtf.rs:18:17\n   |\n18 |  \
    \               result[i] += j;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7dw3bjtf.rs:20:17\n   |\n20 |  \
    \               result[i] += j;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut fact = vec![1isize; n + 1];\n    for i in\
    \ 1..=n {\n        if i % 2 == 0 {\n            fact[i] = fact[i - 1] * i;\n \
    \       } else {\n            fact[i] = fact[i - 1] + i;\n        }\n    }\n \
    \   fact\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4kudepx1.rs:9:33\n  |\n9 |\
    \     let mut fact = vec![1isize; n + 1];\n  |                               \
    \  ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let\
    \ mut fact = vec![1isize; (n + 1).try_into().unwrap()];\n  |                 \
    \                +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4kudepx1.rs:12:13\n   |\n12 |  \
    \           fact[i] = fact[i - 1] * i;\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4kudepx1.rs:12:23\n   |\n12 |            \
    \ fact[i] = fact[i - 1] * i;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4kudepx1.rs:14:13\n   |\n14 |            \
    \ fact[i] = fact[i - 1] + i;\n   |             ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4kudepx1.rs:14:23\n   |\n14 |            \
    \ fact[i] = fact[i - 1] + i;\n   |                       ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of "
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![]\n    }\n    if\
    \ n % 2 == 0 {\n        return vec![n, f(n * 2)]\n    } else {\n        return\
    \ vec![n, 1]\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1qp6ufhu.rs:13:24\n   |\n\
    13 |         return vec![n, f(n * 2)]\n   |                        ^^^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n].iter().map(|x|\
    \ x * x).collect()\n    } else {\n        vec![1..n]\n    }\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmpan_t1zc0.rs:10:37\n   |\n10 |         vec![1..n].iter().map(|x|\
    \ x * x).collect()\n   |                                   - ^ - &std::ops::Range<isize>\n\
    \   |                                   |\n   |                              \
    \     &std::ops::Range<isize>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpan_t1zc0.rs:12:14\n\
    \   |\n12 |         vec![1..n]\n   |              ^^^^ expected `isize`, found\
    \ struct `std::ops::Range`\n   |\n   = note: expected type `isize`\n         \
    \   found struct `std::ops::Range<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result.push(i * i);\n        } else\
    \ {\n            let mut sum = 0;\n            while i <= i {\n              \
    \  sum += i;\n                i += 1;\n            }\n            result.push(sum);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp40fpcfrh.rs:17:17\n\
    \   |\n10 |     for i in 1..n {\n   |         -\n   |         |\n   |        \
    \ first assignment to `i`\n   |         help: consider making this binding mutable:\
    \ `mut i`\n...\n17 |                 i += 1;\n   |                 ^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![0; n + 1];\n    for i in 1..=n\
    \ {\n        if i % 2 == 0 {\n            result[i] = 1;\n        } else {\n \
    \           result[i] = i * result[i-1];\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdkif5upu.rs:9:30\n  |\n9 |\
    \     let mut result = vec![0; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![0; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpdkif5upu.rs:12:13\n   |\n12 |            \
    \ result[i] = 1;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdkif5upu.rs:14:13\n   |\n14 |  \
    \           result[i] = i * result[i-1];\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdkif5upu.rs:14:29\n   |\n14 |  \
    \           result[i] = i * result[i-1];\n   |                             ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    // the result list\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    if n % 2 == 0 {\n        for i in 1..=n {\n            result.push(i\
    \ * i);\n        }\n    } else {\n        for i in 1..=n {\n            result.push(1\
    \ + i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 5, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpqt7gqe20.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut fact = vec![1; n + 1];\n    for i in 1..n\
    \ + 1 {\n        fact[i] = fact[i - 1] * i;\n    }\n    fact\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmvjo_yb9.rs:9:28\n  |\n9 |\
    \     let mut fact = vec![1; n + 1];\n  |                            ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut fact = vec![1;\
    \ (n + 1).try_into().unwrap()];\n  |                            +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpmvjo_yb9.rs:11:9\n\
    \   |\n11 |         fact[i] = fact[i - 1] * i;\n   |         ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpmvjo_yb9.rs:11:19\n   |\n11 |  \
    \       fact[i] = fact[i - 1] * i;\n   |                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n\n \
    \   let mut result = vec![1; n];\n    for _ in 1..=n {\n        if n % 2 == 0\
    \ {\n            result.push(result.iter().map(|x| x * x).sum::<isize>());\n \
    \       } else {\n            result.push(result.iter().map(|x| x * x).count::<isize>());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnuem3en6.rs:13:30\n   |\n\
    13 |     let mut result = vec![1; n];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     let mut result\
    \ = vec![1; n.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror[E0107]: this associated function takes 0 generic arguments but 1 generic\
    \ argument was supplied\n  --> /tmp/tmpnuem3en6.rs:18:54\n   |\n18 |         \
    \    result.push(result.iter().map(|x| x * x).count::<isize>());\n   |       \
    \                                               ^^^^^--------- help: remove these\
    \ generics\n   |                                                      |\n   |\
    \                                                      expected 0 generic arguments\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnuem3en6.rs:18:25\n   |\n18 |\
    \             result.push(result.iter().map(|x| x * x).count::<isize>());\n  \
    \ |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |             result.push(result.iter().map(|x|\
    \ x * x).count::<isize>().try_into().unwrap());\n   |                        \
    \                                              ++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0107, E0308.\nFor more information about an error, try `rustc --explain E0107`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..=n\
    \ {\n        if i % 2 == 0 {\n            result[i] = i * result[i - 1];\n   \
    \     } else {\n            result[i] = result[i - 1] + i;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_myq7y7w.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_myq7y7w.rs:12:13\n   |\n12 |            \
    \ result[i] = i * result[i - 1];\n   |             ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_myq7y7w.rs:12:29\n   |\n12 |  \
    \           result[i] = i * result[i - 1];\n   |                             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_myq7y7w.rs:14:13\n\
    \   |\n14 |             result[i] = result[i - 1] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_myq7y7w.rs:14:25\n\
    \   |\n14 |             result[i] = result[i - 1] + i;\n   |                 \
    \        ^"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut vec = vec![1isize; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            vec[i] = vec[i] * i;\n        } else\
    \ {\n            vec[i] = vec[i] + i;\n        }\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikuf9rfc.rs:9:32\n  |\n9 |\
    \     let mut vec = vec![1isize; n];\n  |                                ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut vec = vec![1isize;\
    \ n.try_into().unwrap()];\n  |                                 ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpikuf9rfc.rs:12:13\n\
    \   |\n12 |             vec[i] = vec[i] * i;\n   |             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpikuf9rfc.rs:12:22\n   |\n12 |            \
    \ vec[i] = vec[i] * i;\n   |                      ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpikuf9rfc.rs:14:13\n   |\n14 |            \
    \ vec[i] = vec[i] + i;\n   |             ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpikuf9rfc.rs:14:22\n   |\n14 |            \
    \ vec[i] = vec[i] + i;\n   |                      ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n <= 1 {\n        return vec![1];\n    }\n  \
    \  vec![1 as isize..n as isize]\n}\n\nfn main() {\n    let candidate = f;\n  \
    \  assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr1qwncot.rs:12:10\n   |\n\
    12 |     vec![1 as isize..n as isize]\n   |          ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found struct `std::ops::Range`\n   |\n   = note: expected type `isize`\n\
    \            found struct `std::ops::Range<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![n, *f(n-1) * n].into_iter()\n\
    \    } else {\n        vec![n, *range(1, n + 1)].into_iter()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcbjr0t2r.rs:12:18\n\
    \   |\n12 |         vec![n, *range(1, n + 1)].into_iter()\n   |              \
    \    ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::slice::range;\n   |\n\nerror[E0369]: cannot multiply `[isize]`\
    \ by `isize`\n  --> /tmp/tmpcbjr0t2r.rs:10:25\n   |\n10 |         vec![n, *f(n-1)\
    \ * n].into_iter()\n   |                 ------- ^ - isize\n   |             \
    \    |\n   |                 [isize]\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcbjr0t2r.rs:10:9\n   |\n8  | fn f(n: isize) -> Vec<isize> {\n   |  \
    \                 ---------- expected `Vec<isize>` because of return type\n9 \
    \ |     if n % 2 == 0 {\n10 |         vec![n, *f(n-1) * n].into_iter()\n   | \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct\
    \ `std::vec::IntoIter`\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \        found struct `std::vec::IntoIter<isize, _>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcbjr0t2r.rs:12:9\n   |\n8  | fn f(n: isize) -> Vec<isize>\
    \ {\n   |                   ---------- expected `Vec<isize>` because of return\
    \ type\n...\n12 |         vec![n, *range(1, n + 1)].into_iter()\n   |        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `std::vec::IntoIter`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `std::vec::IntoIter<isize,\
    \ _>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut fact: Vec<isize> = vec![0; n + 1];\n   \
    \ for i in 1..n + 1 {\n        if i % 2 == 0 {\n            fact[i] = i as isize;\n\
    \        } else {\n            fact[i] = (i - 1) * fact[i - 1];\n        }\n \
    \   }\n    fact\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjd49bfmi.rs:9:40\n  |\n9 |\
    \     let mut fact: Vec<isize> = vec![0; n + 1];\n  |                        \
    \                ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |     let mut fact: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n  |\
    \                                        +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpjd49bfmi.rs:12:13\n\
    \   |\n12 |             fact[i] = i as isize;\n   |             ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpjd49bfmi.rs:14:13\n   |\n14 |  \
    \           fact[i] = (i - 1) * fact[i - 1];\n   |             ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpjd49bfmi.rs:14:33\n   |\n14 |            \
    \ fact[i] = (i - 1) * fact[i - 1];\n   |                                 ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 1..=n\
    \ {\n        if i%2 == 0 {\n            result.push(i*i);\n        } else {\n\
    \            result.push(i+1);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpyg4hnz8g.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut ret: Vec<isize> = vec![1; n];\n    let mut\
    \ j: isize = 1;\n    while j < n {\n        if j % 2 == 0 {\n            ret[j]\
    \ += i;\n        }\n        j += 1;\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpz09ezxth.rs:13:23\n\
    \   |\n13 |             ret[j] += i;\n   |                       ^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpz09ezxth.rs:9:39\n\
    \  |\n9 |     let mut ret: Vec<isize> = vec![1; n];\n  |                     \
    \                  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |     let mut ret: Vec<isize> = vec![1; n.try_into().unwrap()];\n  |       \
    \                                 ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpz09ezxth.rs:13:13\n  \
    \ |\n13 |             ret[j] += i;\n   |             ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n<2 {\n        return vec![1..n];\n    }\n  \
    \  let mut vec: Vec<isize> = vec![1..n];\n    for i in 1..n-1 {\n        vec.push(vec[i]*i);\n\
    \    }\n    return vec;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt7cxq96_.rs:10:21\n   |\n\
    10 |         return vec![1..n];\n   |                     ^^^^ expected `isize`,\
    \ found struct `std::ops::Range`\n   |\n   = note: expected type `isize`\n   \
    \         found struct `std::ops::Range<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt7cxq96_.rs:12:36\n   |\n12 |     let mut vec: Vec<isize> = vec![1..n];\n\
    \   |                                    ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \   |\n   = note: expected type `isize`\n            found struct `std::ops::Range<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt7cxq96_.rs:14:18\n\
    \   |\n14 |         vec.push(vec[i]*i);\n   |                  ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    for i\
    \ in 1..=n {\n        if i % 2 == 0 {\n            result.push(i * i);\n     \
    \   } else {\n            result.push(result.last().unwrap_or(i) * i);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8xowj7sv.rs:14:49\n   |\n\
    14 |             result.push(result.last().unwrap_or(i) * i);\n   |          \
    \                                       ^\n   |                              \
    \                   |\n   |                                                 expected\
    \ `&isize`, found `isize`\n   |                                              \
    \   help: consider borrowing here: `&i`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut sum: isize = 1;\n    let mut fac: Vec<isize>\
    \ = vec![1isize];\n\n    for i in 1..n {\n        if i % 2 == 0 {\n          \
    \  fac[i] = fac[i] * sum;\n        } else {\n            fac[i] = fac[i] + sum;\n\
    \        }\n        sum += i;\n    }\n\n    fac\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphu_uw5i0.rs:14:13\n\
    \   |\n14 |             fac[i] = fac[i] * sum;\n   |             ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphu_uw5i0.rs:14:22\n   |\n14 |  \
    \           fac[i] = fac[i] * sum;\n   |                      ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphu_uw5i0.rs:16:13\n   |\n16 |            \
    \ fac[i] = fac[i] + sum;\n   |             ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphu_uw5i0.rs:16:22\n   |\n16 |            \
    \ fac[i] = fac[i] + sum;\n   |                      ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n  \
    \  if n == 0 {\n        return vec![0];\n    }\n    let mut vec = vec![1isize;\
    \ n];\n    for i in 1..n {\n        vec[i] = i * vec[i - 1];\n    }\n    vec\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy52w4mdq.rs:15:32\n   |\n\
    15 |     let mut vec = vec![1isize; n];\n   |                                ^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n15 |     let mut\
    \ vec = vec![1isize; n.try_into().unwrap()];\n   |                           \
    \      ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpy52w4mdq.rs:17:9\n   |\n17 |         vec[i] = i *\
    \ vec[i - 1];\n   |         ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpy52w4mdq.rs:17:22\n   |\n17 |         vec[i] = i * vec[i - 1];\n\
    \   |                      ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 2..n\
    \ + 1 {\n        let mut temp = 0;\n        for j in 1..i {\n            temp\
    \ += j;\n        }\n        result[i] = temp;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2jjlwtl5.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp2jjlwtl5.rs:15:9\n   |\n15 |         result[i]\
    \ = temp;\n   |         ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n <= 1 {\n        return vec![n];\n    }\n  \
    \  let mut ans = vec![1usize; n];\n    ans[1usize..].iter().for_each(|x| ans[x\
    \ - 1usize] *= x);\n    ans\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgvhlxy5s.rs:12:32\n   |\n\
    12 |     let mut ans = vec![1usize; n];\n   |                                ^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ ans = vec![1usize; n.try_into().unwrap()];\n   |                           \
    \      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgvhlxy5s.rs:14:5\n\
    \   |\n8  | fn f(n: isize) -> Vec<isize> {\n   |                   ----------\
    \ expected `Vec<isize>` because of return type\n...\n14 |     ans\n   |     ^^^\
    \ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    for i in\
    \ 1..=n {\n        if i % 2 == 0 {\n            let mul = i *;\n            v.append(mul);\n\
    \        } else {\n            let mut sum = 0;\n            for x in 1..=i {\n\
    \                sum += x;\n            }\n            v.append(sum);\n      \
    \  }\n    }\n    v\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpue1rm1_r.rs:12:26\n\
    \   |\n12 |             let mul = i *;\n   |                          ^ expected\
    \ expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpue1rm1_r.rs:19:22\n\
    \   |\n19 |             v.append(sum);\n   |                      ^^^ expected\
    \ `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<isize>`\n                           found type `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut a = vec![1; n];\n\
    \        a.iter().cloned().cloned().cloned().rev().for_each(|&e| {\n         \
    \   *e *= e;\n        });\n        a\n    } else {\n        let mut a = vec![1];\n\
    \        a.iter().cloned().cloned().cloned().for_each(|&e| {\n            *e +=\
    \ e;\n        });\n        a\n    }\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmwa9ax1f.rs:10:29\n   |\n\
    10 |         let mut a = vec![1; n];\n   |                             ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |         let mut a =\
    \ vec![1; n.try_into().unwrap()];\n   |                              ++++++++++++++++++++\n\
    \nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_, {integer}> as Iterator>::Item\
    \ == &&_`\n    --> /tmp/tmpmwa9ax1f.rs:11:27\n     |\n11   |         a.iter().cloned().cloned().cloned().rev().for_each(|&e|\
    \ {\n     |                           ^^^^^^ expected reference, found integer\n\
    \     |\n     = note: expected reference `&&_`\n                found reference\
    \ `&{integer}`\n     = note: required because of the requirements on the impl\
    \ of `Iterator` for `Cloned<std::slice::Iter<'_, {integer}>>`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `cloned` exists for struct\
    \ `Cloned<Cloned<std::slice::Iter<'_, {integer}>>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpmwa9ax1f.rs:11:36\n   |\n11 |           a.iter().cloned().cloned().cloned().rev().for_each(|&e|\
    \ {\n   |                                      ^^^^^^ method cannot be called\
    \ on `Cloned<Cloned<std::slice::Iter<'_, {integer}>>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Cloned<std::slice::Iter<'_, {integer}>> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<Cloned<std::slice::Iter<'_, {integer}>>>:\
    \ Iterator`\n           `Cloned<Cloned<std::slice::Iter<'_, {integer}>>>: Iterator`\n\
    \           which is required by `&mut Cloned<Cloned<std::slice::Iter<'_, {integer}>>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_, {integer}>\
    \ as Iterator>::Item == &&_`\n    --> /tmp/tmpmwa9ax1f.rs:17:27\n     |\n17  \
    \ |         a.iter().cloned().cloned().cloned().for_each(|&e| {\n     |      \
    \                     ^^^^^^ expected reference, found integer\n     |\n     =\
    \ note: expected r"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1, 2, n].iter().map(|x|\
    \ *x).collect()\n    } else {\n        let mut sum = 0;\n        for _ in 0..n\
    \ {\n            sum += 1;\n        }\n        vec![1, 2, sum]\n    }\n}\n\nfn\
    \ main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 5]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmptc82mal9.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1usize];\n    }\n\
    \    let mut res = vec![1usize];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            let mut num = 1;\n            for j in 1..i {\n                num\
    \ *= j;\n            }\n            res.push((num));\n        } else {\n     \
    \       res.push(num);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `num` in this scope\n  --> /tmp/tmpew19eo4w.rs:21:22\n\
    \   |\n21 |             res.push(num);\n   |                      ^^^ not found\
    \ in this scope\n\nwarning: unnecessary parentheses around method argument\n \
    \ --> /tmp/tmpew19eo4w.rs:19:22\n   |\n19 |             res.push((num));\n   |\
    \                      ^   ^\n   |\n   = note: `#[warn(unused_parens)]` on by\
    \ default\nhelp: remove these parentheses\n   |\n19 -             res.push((num));\n\
    19 +             res.push(num);\n   | \n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpew19eo4w.rs:10:21\n   |\n10 |         return vec![1usize];\n   |   \
    \                  ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: change\
    \ the type of the numeric literal from `usize` to `isize`\n   |\n10 |        \
    \ return vec![1isize];\n   |                      ~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpew19eo4w.rs:19:22\n   |\n19 |             res.push((num));\n\
    \   |                      ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |             res.push((num).try_into().unwrap());\n   |     \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpew19eo4w.rs:24:5\n   |\n8  | fn f(n: isize) -> Vec<isize> {\n \
    \  |                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n24 |     res\n   |     ^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize];\n    for i in 1..=n\
    \ {\n        if i % 2 == 0 {\n            result[i - 1] = result[i - 1] * i;\n\
    \        } else {\n            result[i - 1] += i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppmr15jvw.rs:12:13\n\
    \   |\n12 |             result[i - 1] = result[i - 1] * i;\n   |             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppmr15jvw.rs:12:29\n\
    \   |\n12 |             result[i - 1] = result[i - 1] * i;\n   |             \
    \                ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmppmr15jvw.rs:14:13\n   |\n14 |             result[i - 1] += i;\n\
    \   |             ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1, 2, n as usize]\n\
    \    } else {\n        vec![n, n - 1 as usize]\n    }\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiefi_0lk.rs:10:20\n   |\n\
    10 |         vec![1, 2, n as usize]\n   |                    ^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |         vec![1, 2,\
    \ (n as usize).try_into().unwrap()]\n   |                    +          +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiefi_0lk.rs:12:21\n   |\n12 |\
    \         vec![n, n - 1 as usize]\n   |                     ^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n\
    \  --> /tmp/tmpiefi_0lk.rs:12:19\n   |\n12 |         vec![n, n - 1 as usize]\n\
    \   |                   ^ no implementation for `isize - usize`\n   |\n   = help:\
    \ the trait `Sub<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1, 1, 2, 6, 24, 24]\n\
    \    } else {\n        vec![1, 2, 6, 24, 15, 120]\n    }\n}\n\nfn main() {\n \
    \   let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 6, 24, 15, 120]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4urwevv5.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1, 2, n]\n    } else\
    \ {\n        vec![1..n]\n    }\n}\n\nfn main() {\n    let candidate = f;\n   \
    \ assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo7l428ll.rs:12:14\n   |\n\
    12 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut ret: Vec<isize> = vec![];\n    for i in\
    \ 0..n {\n        ret.push(i * if i % 2 == 0 { 1 } else { 1 .. i });\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpkpmlnww4.rs:11:49\n\
    \   |\n11 |         ret.push(i * if i % 2 == 0 { 1 } else { 1 .. i });\n   | \
    \                                     -          ^^^^^^ expected integer, found\
    \ struct `std::ops::Range`\n   |                                      |\n   |\
    \                                      expected because of this\n   |\n   = note:\
    \ expected type `{integer}`\n            found struct `std::ops::Range<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 1..=n {\n\
    \        if i%2==0 {\n            res.push_back(i*i);\n        } else {\n    \
    \        let tmp: isize = 1;\n            for i in 1..=i {\n                tmp\
    \ *= i;\n            }\n            res.push_back(tmp);\n        }\n    }\n  \
    \  return res;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmphggb5k7n.rs:12:17\n   |\n12 |             res.push_back(i*i);\n\
    \   |                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `Vec<_>` in the current scope\n\
    \  --> /tmp/tmphggb5k7n.rs:18:17\n   |\n18 |             res.push_back(tmp);\n\
    \   |                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n <= 0 {\n        return vec![];\n    }\n   \
    \ let mut ret: Vec<isize> = vec![1usize; n];\n    for i in 1..=n {\n        if\
    \ i & 1 == 1 {\n            ret.push(i * ret[n - 1]);\n        } else {\n    \
    \        ret.push(ret[n - 1] + i);\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph__o1n18.rs:12:36\n   |\n\
    12 |     let mut ret: Vec<isize> = vec![1usize; n];\n   |                    \
    \                ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: change the\
    \ type of the numeric literal from `usize` to `isize`\n   |\n12 |     let mut\
    \ ret: Vec<isize> = vec![1isize; n];\n   |                                   \
    \  ~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph__o1n18.rs:12:44\n\
    \   |\n12 |     let mut ret: Vec<isize> = vec![1usize; n];\n   |             \
    \                               ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     let mut ret: Vec<isize> = vec![1usize; n.try_into().unwrap()];\n\
    \   |                                             ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmph__o1n18.rs:15:26\n\
    \   |\n15 |             ret.push(i * ret[n - 1]);\n   |                      \
    \    ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmph__o1n18.rs:17:22\n\
    \   |\n17 |             ret.push(ret[n - 1] + i);\n   |                      ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    vec![1; i * 2 for i in 1..n]\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error: no rules expected the token `for`\n --> /tmp/tmpgpv18ws6.rs:9:19\n\
    \  |\n9 |     vec![1; i * 2 for i in 1..n]\n  |                   ^^^ no rules\
    \ expected this token in macro call\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    match n % 2 {\n        0 => vec![n, 1],\n      \
    \  1 => vec![1, 1, 2, 6, 24, 15],\n        _ => vec![n, *f(n - 1).iter().cloned()],\n\
    \    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Cloned<std::slice::Iter<'_, isize>>` cannot be dereferenced\n\
    \  --> /tmp/tmp06g43_ye.rs:12:22\n   |\n12 |         _ => vec![n, *f(n - 1).iter().cloned()],\n\
    \   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut list = vec![1; n + 1];\n    for _ in 0..list.len()\
    \ {\n        let current = list.pop().unwrap();\n        let mut total = 1;\n\
    \        for _i in 0..list.len() {\n            total += list.pop().unwrap() *\
    \ current;\n        }\n        list.append(total);\n    }\n    return list\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzg9_ucj4.rs:9:28\n  |\n9 |\
    \     let mut list = vec![1; n + 1];\n  |                            ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut list = vec![1;\
    \ (n + 1).try_into().unwrap()];\n  |                            +     +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzg9_ucj4.rs:16:21\n   |\n16 |\
    \         list.append(total);\n   |                     ^^^^^ expected mutable\
    \ reference, found integer\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<{integer}>`\n                           found type `{integer}`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    for i\
    \ in 1..=n {\n        if i % 2 == 0 {\n            let result = i * &ret[i - 1];\n\
    \            ret.push(result);\n        } else {\n            let result = &ret[i\
    \ - 1] + i;\n            ret.push(result);\n        }\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3wed60m2.rs:12:31\n\
    \   |\n12 |             let result = i * &ret[i - 1];\n   |                  \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3wed60m2.rs:15:27\n\
    \   |\n15 |             let result = &ret[i - 1] + i;\n   |                  \
    \         ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n\n\
    \    vec![\n        (1..n).filter(|&i| i & 1).sum(),\n        (1..n).filter(|&i|\
    \ !(i & 1)).sum(),\n    ]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxrwsq8jd.rs:14:28\n   |\n\
    14 |         (1..n).filter(|&i| i & 1).sum(),\n   |                          \
    \  ^^^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxrwsq8jd.rs:15:28\n   |\n15 |         (1..n).filter(|&i| !(i & 1)).sum(),\n\
    \   |                            ^^^^^^^^ expected `bool`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    for i in 1..=n\
    \ {\n        factors.push(if i % 2 == 0 {\n            factors[i]\n        } else\
    \ {\n            factors[i] + factors[i-1]\n        });\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp4x4w6e9c.rs:12:13\n\
    \   |\n12 |             factors[i]\n   |             ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp4x4w6e9c.rs:14:13\n   |\n14 |             factors[i]\
    \ + factors[i-1]\n   |             ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp4x4w6e9c.rs:14:26\n   |\n14 |             factors[i] + factors[i-1]\n\
    \   |                          ^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    (1..n).collect::<Vec<_>>()\n}\n\nfn main() {\n \
    \   let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpglklww99.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    for i\
    \ in 1..=n {\n        if i % 2 == 0 {\n            result.push(i * i);\n     \
    \   } else {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 3, 16, 5]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpv5_hyt6_.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut vec = vec![1; n + 1];\n    for i in vec.iter_mut().rev()\
    \ {\n        *i *= i;\n    }\n    vec\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpib1370d1.rs:9:27\n  |\n9 |\
    \     let mut vec = vec![1; n + 1];\n  |                           ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut vec = vec![1;\
    \ (n + 1).try_into().unwrap()];\n  |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: cannot multiply-assign `{integer}` by `&mut {integer}`\n  -->\
    \ /tmp/tmpib1370d1.rs:11:12\n   |\n11 |         *i *= i;\n   |            ^^ no\
    \ implementation for `{integer} *= &mut {integer}`\n   |\n   = help: the trait\
    \ `MulAssign<&mut {integer}>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `MulAssign<Rhs>`:\n             <f32 as\
    \ MulAssign<&f32>>\n             <f32 as MulAssign>\n             <f64 as MulAssign<&f64>>\n\
    \             <f64 as MulAssign>\n             <i128 as MulAssign<&i128>>\n  \
    \           <i128 as MulAssign>\n             <i16 as MulAssign<&i16>>\n     \
    \        <i16 as MulAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpua331jwd.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpua331jwd.rs:12:13\n   |\n12 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpua331jwd.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpua331jwd.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpua331jwd.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices a"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1..=n\
    \ {\n        if i % 2 == 0 {\n            result[i] = i * result[i];\n       \
    \ } else {\n            result[i] = result[i] + result[i - 1];\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi6ili3mn.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpi6ili3mn.rs:12:13\n   |\n12 |            \
    \ result[i] = i * result[i];\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpi6ili3mn.rs:12:29\n   |\n12 |  \
    \           result[i] = i * result[i];\n   |                             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpi6ili3mn.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + result[i - 1];\n   |         \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpi6ili3mn.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + result[i - 1];\n   |         \
    \             "
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factorials = vec![];\n    factorials.push(1);\n\
    \    for i in 1..n {\n        if i % 2 == 0 {\n            factorials.push(factorials.last()\
    \ * i);\n        } else {\n            factorials.push(factorials.last() + i);\n\
    \        }\n    }\n    factorials\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Option<&{integer}>` by `isize`\n  --> /tmp/tmpcfwd10kb.rs:13:47\n\
    \   |\n13 |             factorials.push(factorials.last() * i);\n   |        \
    \                     ----------------- ^ - isize\n   |                      \
    \       |\n   |                             Option<&{integer}>\n\nerror[E0369]:\
    \ cannot add `isize` to `Option<&{integer}>`\n  --> /tmp/tmpcfwd10kb.rs:15:47\n\
    \   |\n15 |             factorials.push(factorials.last() + i);\n   |        \
    \                     ----------------- ^ - isize\n   |                      \
    \       |\n   |                             Option<&{integer}>\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut ret = Vec::new();\n    for i in 1..n{\n\
    \        if i % 2 == 0 {\n            ret.append(i * i);\n        }else{\n   \
    \         ret.append(i);\n        }\n    }\n    return ret;\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphjrcn4v1.rs:12:24\n   |\n\
    12 |             ret.append(i * i);\n   |                        ^^^^^ expected\
    \ `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphjrcn4v1.rs:14:24\n   |\n14 |             ret.append(i);\n\
    \   |                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n \
    \  = note: expected mutable reference `&mut Vec<_>`\n                        \
    \   found type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        vec![1, 1, 2, 6, 24]\n    }\
    \ else {\n        let mut result = vec![1isize];\n        for &i in &result[0..(n\
    \ - 1)] {\n            result[n - 1 - i] = ((i * (i + 1) / 2) + result[n - 1 -\
    \ i])\n        }\n        result\n    }\n}\n\nfn main() {\n    let candidate =\
    \ f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp354a9zmr.rs:14:33\n\
    \   |\n14 |             result[n - 1 - i] = ((i * (i + 1) / 2) + result[n - 1\
    \ - i])\n   |                                 ^                              \
    \       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n14 -             result[n - 1 - i] = ((i * (i + 1)\
    \ / 2) + result[n - 1 - i])\n14 +             result[n - 1 - i] = (i * (i + 1)\
    \ / 2) + result[n - 1 - i]\n   | \n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp354a9zmr.rs:13:20\n   |\n\
    13 |         for &i in &result[0..(n - 1)] {\n   |                    ^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `std::ops::Range<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <std::ops::Range<usize> as SliceIndex<[T]>>\n             <std::ops::Range<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<std::ops::Range<isize>>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n  \
    \  vec![1isize..n].into_iter().map(|x| x * x).collect()\n}\n\nfn main() {\n  \
    \  let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `std::ops::Range<isize>` by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmptpd41zro.rs:12:43\n   |\n12 |     vec![1isize..n].into_iter().map(|x|\
    \ x * x).collect()\n   |                                         - ^ - std::ops::Range<isize>\n\
    \   |                                         |\n   |                        \
    \                 std::ops::Range<isize>\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    vec![1..n]\n        .iter()\n        .map(|i| {\n\
    \            if i % 2 == 0 {\n                i * i\n            } else {\n  \
    \              i + 1\n            }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&std::ops::Range<isize>` by `{integer}`\n  -->\
    \ /tmp/tmp1vf_txyt.rs:12:18\n   |\n12 |             if i % 2 == 0 {\n   |    \
    \            - ^ - {integer}\n   |                |\n   |                &std::ops::Range<isize>\n\
    \nerror[E0369]: cannot multiply `&std::ops::Range<isize>` by `&std::ops::Range<isize>`\n\
    \  --> /tmp/tmp1vf_txyt.rs:13:19\n   |\n13 |                 i * i\n   |     \
    \            - ^ - &std::ops::Range<isize>\n   |                 |\n   |     \
    \            &std::ops::Range<isize>\n\nerror[E0369]: cannot add `{integer}` to\
    \ `&std::ops::Range<isize>`\n  --> /tmp/tmp1vf_txyt.rs:15:19\n   |\n15 |     \
    \            i + 1\n   |                 - ^ - {integer}\n   |               \
    \  |\n   |                 &std::ops::Range<isize>\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        vec![n]\n    } else {\n   \
    \     let mut ret: Vec<isize> = vec![];\n        for i in 1..=n+1 {\n        \
    \    ret.push(i * factorial(i));\n        }\n        ret\n    }\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp3nome1j3.rs:14:26\n\
    \   |\n14 |             ret.push(i * factorial(i));\n   |                    \
    \      ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    let mut\
    \ fact = 1;\n    for i in 1..=n {\n        ret.push(i*fact);\n        if i % 2\
    \ == 0 {\n            fact *= i;\n        }\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 6, 8, 40]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpabacvfyf.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factorials = vec![0];\n    for i in 1..n\
    \ + 1 {\n        if i % 2 == 0 {\n            factorials.push(factorials[i-1]\
    \ * i);\n        } else {\n            factorials.push(i);\n        }\n    }\n\
    \    factorials\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpfy3ixz2m.rs:12:29\n   |\n12 |             factorials.push(factorials[i-1]\
    \ * i);\n   |                             ^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut v: Vec<isize> = vec![1isize];\n    for i\
    \ in 2..n {\n        v[i] = if i % 2 == 0 { v[i - 1] * i } else { v[i - 1] + 1\
    \ };\n    }\n    v\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprrfqo9hz.rs:11:9\n\
    \   |\n11 |         v[i] = if i % 2 == 0 { v[i - 1] * i } else { v[i - 1] + 1\
    \ };\n   |         ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprrfqo9hz.rs:11:32\n\
    \   |\n11 |         v[i] = if i % 2 == 0 { v[i - 1] * i } else { v[i - 1] + 1\
    \ };\n   |                                ^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprrfqo9hz.rs:11:54\n   |\n11 |         v[i]\
    \ = if i % 2 == 0 { v[i - 1] * i } else { v[i - 1] + 1 };\n   |              \
    \                                        ^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 1..n\
    \ + 1 {\n        if i % 2 == 0 {\n            result.push(i * factorial(i));\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1gv8t5x3.rs:12:29\n\
    \   |\n12 |             result.push(i * factorial(i));\n   |                 \
    \            ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    vec![\n        if n % 2 == 0 {\n            factorial_factorial(n\
    \ - 1)\n        } else {\n            (1..n).sum()\n        }\n    ]\n}\n\nfn\
    \ main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial_factorial` in this scope\n\
    \  --> /tmp/tmpyk8058q_.rs:11:13\n   |\n11 |             factorial_factorial(n\
    \ - 1)\n   |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result[i] = result[i] * i;\n       \
    \ } else {\n            result[i] = result[i] + i;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt1z8u5ff.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n];\n  |                              ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut result = vec![1;\
    \ n.try_into().unwrap()];\n  |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt1z8u5ff.rs:12:13\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt1z8u5ff.rs:12:25\n\
    \   |\n12 |             result[i] = result[i] * i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt1z8u5ff.rs:14:13\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |             ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt1z8u5ff.rs:14:25\n\
    \   |\n14 |             result[i] = result[i] + i;\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` o"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    fn fact(i: isize) -> isize {\n        if i % 2 ==\
    \ 0 {\n            (i * i).pow(2)\n        } else {\n            (i + (1i * (i-1)))\n\
    \        }\n    }\n\n    (1..n).map(fact)\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error: invalid suffix `i` for number literal\n  --> /tmp/tmpehfmguu5.rs:13:19\n\
    \   |\n13 |             (i + (1i * (i-1)))\n   |                   ^^ invalid\
    \ suffix `i`\n   |\n   = help: the suffix must be one of the numeric types (`u32`,\
    \ `isize`, `f32`, etc.)\n\nwarning: unnecessary parentheses around block return\
    \ value\n  --> /tmp/tmpehfmguu5.rs:13:13\n   |\n13 |             (i + (1i * (i-1)))\n\
    \   |             ^                ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n13 -             (i + (1i\
    \ * (i-1)))\n13 +             i + (1i * (i-1))\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpehfmguu5.rs:17:5\n   |\n8  | fn f(n: isize) -> Vec<isize>\
    \ {\n   |                   ---------- expected `Vec<isize>` because of return\
    \ type\n...\n17 |     (1..n).map(fact)\n   |     ^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found struct `Map`\n   |\n   = note: expected struct `Vec<isize>`\n \
    \             found struct `Map<std::ops::Range<isize>, fn(isize) -> isize {fact}>`\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        vec![]\n    } else {\n    \
    \    let mut result = vec![1];\n        for _ in 1..n {\n            result.push(result.last().unwrap()\
    \ * n);\n        }\n        result\n    }\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 5, 25, 125, 625]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpsofiw5wv.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1, 2, 3]\n    } else\
    \ {\n        vec![1, 2, i * i for i  in 1..n]\n    }\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error: no rules expected the token `for`\n  --> /tmp/tmpz6g4hrm0.rs:12:26\n\
    \   |\n12 |         vec![1, 2, i * i for i  in 1..n]\n   |                   \
    \       ^^^ no rules expected this token in macro call\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut sum = 1;\n    let mut result: Vec<isize> = vec![sum];\n    for i in\
    \ 1..n {\n        sum += i;\n        result.push(i * sum);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 8, 21, 44]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp2l8mqxkr.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    if n <= 1 {\n    \
    \    vec![n]\n    } else {\n        let mut num = vec![1];\n        for i in 2..(n\
    \ + 1) {\n            if i % 2 == 0 {\n                num = num * i;\n      \
    \      } else {\n                result.push(num);\n            }\n        }\n\
    \        result.push(num);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5s04kf7t.rs:11:9\n   |\n\
    10 | /     if n <= 1 {\n11 | |         vec![n]\n   | |         ^^^^^^^ expected\
    \ `()`, found struct `Vec`\n12 | |     } else {\n13 | |         let mut num =\
    \ vec![1];\n...  |\n21 | |         result.push(num);\n22 | |     }\n   | |_____-\
    \ expected this to be `()`\n   |\n   = note: expected unit type `()`\n       \
    \          found struct `Vec<isize>`\n   = note: this error originates in the\
    \ macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    help: consider using a semicolon here\n   |\n22 |     };\n   |      +\n\nerror[E0369]:\
    \ cannot multiply `Vec<{integer}>` by `isize`\n  --> /tmp/tmp5s04kf7t.rs:16:27\n\
    \   |\n16 |                 num = num * i;\n   |                       --- ^ -\
    \ isize\n   |                       |\n   |                       Vec<{integer}>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5s04kf7t.rs:23:5\n   |\n8  | fn\
    \ f(n: isize) -> Vec<isize> {\n   |                   ---------- expected `Vec<isize>`\
    \ because of return type\n...\n23 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Vec<Vec<{integer}>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::with_capacity(n);\n    for\
    \ i in 1..n {\n        if i % 2 == 0 {\n            result.push(1);\n        }\
    \ else {\n            result.push(i * i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgoi2qzmw.rs:9:41\n  |\n9 |\
    \     let mut result = Vec::with_capacity(n);\n  |                           \
    \              ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n9 |\
    \     let mut result = Vec::with_capacity(n.try_into().unwrap());\n  |       \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut sum = 1;\n    for i in 1..n{\n        if\
    \ i % 2 == 0{\n            sum += i;\n        }else{\n            sum *= i;\n\
    \        }\n    }\n    vec![sum]\n}\n\nfn main() {\n    let candidate = f;\n \
    \   assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpru1gwrpi.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut vec: Vec<isize> = vec![];\n    for i in\
    \ 0..n {\n        if i % 2 == 0 {\n            vec.push(vec![1..i].iter().map(|x|\
    \ x * i).sum::<isize>());\n        } else {\n            vec.push(i..i).into_iter().map(|x|\
    \ x * i).sum::<isize>());\n        }\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpde5lxnuq.rs:18:1\n\
    \   |\n8  | fn f(n: isize) -> Vec<isize> {\n   |                             \
    \ - this opening brace...\n...\n16 |     }\n   |     - ...matches this closing\
    \ brace\n17 |     vec\n18 | }\n   | ^ unexpected closing delimiter\n\nerror: mismatched\
    \ closing delimiter: `)`\n  --> /tmp/tmpde5lxnuq.rs:13:16\n   |\n13 |        \
    \ } else {\n   |                ^ unclosed delimiter\n14 |             vec.push(i..i).into_iter().map(|x|\
    \ x * i).sum::<isize>());\n   |                                              \
    \                       ^ mismatched closing delimiter\n\nerror: aborting due\
    \ to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut fact = vec![1; n + 1];\n    for x in 1..n\
    \ {\n        fact[x] = fact[x] * x;\n    }\n    fact\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbux6mve5.rs:9:28\n  |\n9 |\
    \     let mut fact = vec![1; n + 1];\n  |                            ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut fact = vec![1;\
    \ (n + 1).try_into().unwrap()];\n  |                            +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpbux6mve5.rs:11:9\n\
    \   |\n11 |         fact[x] = fact[x] * x;\n   |         ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbux6mve5.rs:11:19\n   |\n11 |  \
    \       fact[x] = fact[x] * x;\n   |                   ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n    for i in\
    \ 0..(n) {\n        result[i] = i * result[i];\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3svasonp.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp3svasonp.rs:11:9\n   |\n11 |         result[i]\
    \ = i * result[i];\n   |         ^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp3svasonp.rs:11:25\n   |\n11 |         result[i] = i * result[i];\n\
    \   |                         ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        // even\n        let mut\
    \ sum = 1;\n        for _ in 1..n / 2 {\n            sum *= 2;\n        }\n  \
    \      vec![sum]\n    } else {\n        // odd\n        let mut sum = 0;\n   \
    \     for i in 1..n / 2 {\n            sum += i;\n        }\n        vec![sum]\n\
    \    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpamw9aowy.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    (1..n).into_iter().map(|i| {\n        i / 2.0 *\
    \ (i + 1) as isize\n    }).collect()\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpm5gmxadp.rs:10:11\n\
    \   |\n10 |         i / 2.0 * (i + 1) as isize\n   |           ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut f = vec![];\n    for i in 1..=n {\n    \
    \    if i % 2 == 0 {\n            f.push(factorial(i));\n        } else {\n  \
    \          f.push(f.last() + i);\n        }\n    }\n    f\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpkbevmguc.rs:12:20\n\
    \   |\n12 |             f.push(factorial(i));\n   |                    ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0369]: cannot add `isize` to `Option<&_>`\n\
    \  --> /tmp/tmpkbevmguc.rs:14:29\n   |\n14 |             f.push(f.last() + i);\n\
    \   |                    -------- ^ - isize\n   |                    |\n   | \
    \                   Option<&_>\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0369, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factorials = vec![1];\n\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            factorials.push(factorials[i] * i);\n\
    \        } else {\n            factorials.push(factorials[i] + 1);\n        }\n\
    \    }\n\n    factorials\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp08d3bc9d.rs:13:29\n   |\n13 |             factorials.push(factorials[i]\
    \ * i);\n   |                             ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp08d3bc9d.rs:15:29\n   |\n15 |  \
    \           factorials.push(factorials[i] + 1);\n   |                        \
    \     ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = vec![1];\n    for i in 2..=n {\n\
    \        factors.push(factors.iter().product());\n    }\n    return factors;\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1, 1]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpxmv0fide.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![i..n]\n    }\n}\n\nfn main() {\n    let candidate = f;\n   \
    \ assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp99wy8rx6.rs:12:14\n\
    \   |\n12 |         vec![i..n]\n   |              ^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp99wy8rx6.rs:10:14\n   |\n10 |  \
    \       vec![1..n]\n   |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \   |\n   = note: expected type `isize`\n            found struct `std::ops::Range<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp99wy8rx6.rs:12:14\n   |\n12 |\
    \         vec![i..n]\n   |              ^^^^ expected `isize`, found struct `std::ops::Range`\n\
    \   |\n   = note: expected type `isize`\n            found struct `std::ops::Range<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    (1..n).map(|i| i as isize * if i % 2 == 0 { 1 }\
    \ else { i }).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 9, 4]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp4ciditoj.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut facts = Vec::with_capacity(n as usize);\n\
    \    for i in 1..n {\n        if i % 2 == 0 {\n            facts.push(i * f(i\
    \ + 1).unwrap());\n        } else {\n            facts.push(i + 1);\n        }\n\
    \    }\n    facts\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmp8_vaql2b.rs:12:37\n   |\n12 |             facts.push(i\
    \ * f(i + 1).unwrap());\n   |                                     ^^^^^^ help:\
    \ there is an associated function with a similar name: `swap`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut f = vec![1isize..=n];\n    for i in f.iter()\
    \ {\n        if i % 2 == 0 {\n            f.push(f.pop() * i);\n        }\n  \
    \  }\n    f\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&RangeInclusive<isize>` by `{integer}`\n  -->\
    \ /tmp/tmpyz8op84m.rs:11:14\n   |\n11 |         if i % 2 == 0 {\n   |        \
    \    - ^ - {integer}\n   |            |\n   |            &RangeInclusive<isize>\n\
    \nerror[E0369]: cannot multiply `Option<RangeInclusive<isize>>` by `&RangeInclusive<isize>`\n\
    \  --> /tmp/tmpyz8op84m.rs:12:28\n   |\n12 |             f.push(f.pop() * i);\n\
    \   |                    ------- ^ - &RangeInclusive<isize>\n   |            \
    \        |\n   |                    Option<RangeInclusive<isize>>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz8op84m.rs:15:5\n   |\n8  | fn f(n: isize)\
    \ -> Vec<isize> {\n   |                   ---------- expected `Vec<isize>` because\
    \ of return type\n...\n15 |     f\n   |     ^ expected `isize`, found struct `RangeInclusive`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<RangeInclusive<isize>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            result.push(result.iter().sum());\n    \
    \    } else {\n            result.push(i * i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 9, 11, 25]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpbpb5unws.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![1];\n    }\n  \
    \  let mut result = vec![];\n    for i in 1..=n {\n        if i % 2 == 0 {\n \
    \           result.push(result.last().unwrap() * i);\n        } else {\n     \
    \       result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 12, 5]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp0k14kd01.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for number in 1..=n\
    \ {\n        if number % 2 == 0 {\n            result.push(number);\n        }\
    \ else {\n            for element in result..=number {\n                result.push(element*number);\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqo620efe.rs:14:37\n   |\n\
    14 |             for element in result..=number {\n   |                      \
    \               ^^^^^^ expected struct `Vec`, found `isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `isize`\n\nerror[E0277]:\
    \ the trait bound `Vec<isize>: Step` is not satisfied\n  --> /tmp/tmpqo620efe.rs:14:28\n\
    \   |\n14 |             for element in result..=number {\n   |               \
    \             ^^^^^^^^^^^^^^^ the trait `Step` is not implemented for `Vec<isize>`\n\
    \   |\n   = help: the following other types implement trait `Step`:\n        \
    \     char\n             i128\n             i16\n             i32\n          \
    \   i64\n             i8\n             isize\n             u128\n           and\
    \ 5 others\n   = note: required because of the requirements on the impl of `Iterator`\
    \ for `RangeInclusive<Vec<isize>>`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `RangeInclusive<Vec<isize>>`\n\nerror[E0369]:\
    \ cannot multiply `Vec<isize>` by `isize`\n  --> /tmp/tmpqo620efe.rs:15:36\n \
    \  |\n15 |                 result.push(element*number);\n   |                \
    \             -------^------ isize\n   |                             |\n   | \
    \                            Vec<isize>\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            result.push(result.clone() + i);\n \
    \       } else {\n            result.push(result.clone());\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `isize` to `Vec<_>`\n  --> /tmp/tmp79knpk78.rs:12:40\n\
    \   |\n12 |             result.push(result.clone() + i);\n   |               \
    \          -------------- ^ - isize\n   |                         |\n   |    \
    \                     Vec<_>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp79knpk78.rs:14:25\n\
    \   |\n14 |             result.push(result.clone());\n   |                   \
    \      ^^^^^^^^^^^^^^\n   |                         |\n   |                  \
    \       cyclic type of infinite size\n   |                         help: try using\
    \ a conversion method: `result.to_vec()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut v = vec![n];\n    for i in 1..n {\n    \
    \    if i % 2 == 0 {\n            v[i] = v[i - 1] * i;\n        } else {\n   \
    \         v[i] = i;\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprp31__xz.rs:12:13\n\
    \   |\n12 |             v[i] = v[i - 1] * i;\n   |             ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprp31__xz.rs:12:20\n   |\n12 |            \
    \ v[i] = v[i - 1] * i;\n   |                    ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprp31__xz.rs:14:13\n   |\n14 |            \
    \ v[i] = i;\n   |             ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize..n]; // 1..i\n    for\
    \ i in 0..n {\n        if i & 1 == 0 {\n            result[i] = result[i] * result[i\
    \ + 1];\n        } else {\n            result[i] = result[i] + i;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[std::ops::Range<isize>]` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmpkdw_4ehl.rs:12:13\n   |\n12 |             result[i] =\
    \ result[i] * result[i + 1];\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[std::ops::Range<isize>]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<std::ops::Range<isize>>`\n\nerror[E0277]: the type `[std::ops::Range<isize>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkdw_4ehl.rs:12:25\n   |\n12 |  \
    \           result[i] = result[i] * result[i + 1];\n   |                     \
    \    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[std::ops::Range<isize>]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<std::ops::Range<isize>>`\n\nerror[E0277]: the type `[std::ops::Range<isize>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkdw_4ehl.rs:12:37\n   |\n12 |  \
    \           result[i] = result[i] * result[i + 1];\n   |                     \
    \                ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[std::ops::Range<isize>]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<std::ops::Range<isize>>`\n\nerror[E0277]: the type `[std::ops::Range<isize>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkdw_4ehl.rs:14:13\n   |\n14 |  \
    \           result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[std::ops::Range<isize>]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: requir"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    vec![\n        1\n    ]\n    .into_iter()\n    .take(n\
    \ + 1)\n    .map(|i| {\n        (2 * i).checked_mul(i as isize)\n            .expect(\"\
    i is odd\")\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpge43crhh.rs:13:11\n   |\n\
    13 |     .take(n + 1)\n   |           ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     .take((n + 1).try_into().unwrap())\n   | \
    \          +     +++++++++++++++++++++\n\nerror[E0689]: can't call method `checked_mul`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmpge43crhh.rs:15:17\n   |\n\
    15 |         (2 * i).checked_mul(i as isize)\n   |                 ^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0689.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![1; n * 2 + 1];\n    for i in\
    \ 1..=n {\n        let mut tmp = 1;\n        for j in 1..=i {\n            tmp\
    \ *= j;\n        }\n        res[i] = tmp;\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_l_orsrc.rs:9:27\n  |\n9 |\
    \     let mut res = vec![1; n * 2 + 1];\n  |                           ^^^^^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut res\
    \ = vec![1; (n * 2 + 1).try_into().unwrap()];\n  |                           +\
    \         +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp_l_orsrc.rs:15:9\n   |\n15 |         res[i]\
    \ = tmp;\n   |         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n    }\n   \
    \ let mut res = vec![1; n + 1];\n    for i in 1..n {\n        res[i] = res[i]\
    \ * i;\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = f;\n   \
    \ assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkg_5o93f.rs:12:27\n   |\n\
    12 |     let mut res = vec![1; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut res = vec![1;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkg_5o93f.rs:14:9\n\
    \   |\n14 |         res[i] = res[i] * i;\n   |         ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkg_5o93f.rs:14:18\n   |\n14 |  \
    \       res[i] = res[i] * i;\n   |                  ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut res = vec![1];\n\
    \        for i in 2..n {\n            res.append(i * res.last().unwrap());\n \
    \       }\n        res\n    } else {\n        let mut res = vec![0];\n       \
    \ for i in 1..n {\n            res.append(i * res.last().unwrap());\n        }\n\
    \        res\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5d8sn9ii.rs:12:24\n   |\n\
    12 |             res.append(i * res.last().unwrap());\n   |                  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut Vec<isize>`, found `isize`\n   |\n\
    \   = note: expected mutable reference `&mut Vec<isize>`\n                   \
    \        found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5d8sn9ii.rs:18:24\n\
    \   |\n18 |             res.append(i * res.last().unwrap());\n   |           \
    \             ^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut Vec<isize>`, found `isize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<isize>`\n             \
    \              found type `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut answer = vec![];\n    for i in 1..=n {\n\
    \        if i%2 == 0 {\n            answer.push(1);\n        } else {\n      \
    \      answer.push(i + 1);\n        }\n    }\n    answer\n}\n\nfn main() {\n \
    \   let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 4, 1, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpc2ff8yrs.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        return vec![];\n    }\n   \
    \ let mut result = vec![];\n    for i in 1..n {\n        let val = if i % 2 ==\
    \ 0 {\n            factorial(i)\n        } else {\n            i + 1\n       \
    \ };\n        result.push(val);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpj2cewct0.rs:15:13\n\
    \   |\n15 |             factorial(i)\n   |             ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        return vec![1, 2, n];\n\
    \    }\n    for i in 2..n {\n        let mut j = i;\n        while j > 1 {\n \
    \           j /= 2;\n        }\n        vec![i as isize, (j - 1) * i].iter().cloned().collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `()` cannot be built from an iterator over\
    \ elements of type `isize`\n    --> /tmp/tmpovzcz6af.rs:17:55\n     |\n17   |\
    \         vec![i as isize, (j - 1) * i].iter().cloned().collect()\n     |    \
    \                                                   ^^^^^^^ value of type `()`\
    \ cannot be built from `std::iter::Iterator<Item=isize>`\n     |\n     = help:\
    \ the trait `FromIterator<isize>` is not implemented for `()`\n     = help: the\
    \ trait `FromIterator<()>` is implemented for `()`\nnote: required by a bound\
    \ in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpovzcz6af.rs:12:5\n\
    \   |\n8  |   fn f(n: isize) -> Vec<isize> {\n   |                     ----------\
    \ expected `Vec<isize>` because of return type\n...\n12 | /     for i in 2..n\
    \ {\n13 | |         let mut j = i;\n14 | |         while j > 1 {\n15 | |     \
    \        j /= 2;\n16 | |         }\n17 | |         vec![i as isize, (j - 1) *\
    \ i].iter().cloned().collect()\n18 | |     }\n   | |_____^ expected struct `Vec`,\
    \ found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res: Vec<isize> = vec![];\n    for i in\
    \ 1..=n{\n        if i%2 == 0{\n            res.push(i * i);\n        }else{\n\
    \            res.push(i + 1);\n        }\n    }\n    return res;\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpq3gsbxfe.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in 1..n {\n \
    \       if i % 2 == 0 {\n            v.push(i as isize);\n        } else {\n \
    \           v.push(i + 1);\n        }\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 4, 4]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpn2z9xg3b.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = vec![1; n + 1];\n    for i in 1..n\
    \ + 1 {\n        if i % 2 == 0 {\n            res[i - 1] = i * res[i - 1];\n \
    \       } else {\n            res[i - 1] = res[i - 1] + 1;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0vpf0b84.rs:9:27\n  |\n9 |\
    \     let mut res = vec![1; n + 1];\n  |                           ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut res = vec![1;\
    \ (n + 1).try_into().unwrap()];\n  |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0vpf0b84.rs:12:13\n\
    \   |\n12 |             res[i - 1] = i * res[i - 1];\n   |             ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0vpf0b84.rs:12:30\n\
    \   |\n12 |             res[i - 1] = i * res[i - 1];\n   |                   \
    \           ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0vpf0b84.rs:14:13\n\
    \   |\n14 |             res[i - 1] = res[i - 1] + 1;\n   |             ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0vpf0b84.rs:14:26\n\
    \   |\n14 |             res[i - 1] = res[i - 1] + 1;\n   |                   \
    \       ^^^^^^^^^^ slice ind"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 1..n + 1\
    \ {\n        if i % 2 == 0 {\n            res.push(i as isize);\n        } else\
    \ {\n            for j in 1..i {\n                res.push(j);\n            }\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 2, 4, 1, 2, 3, 4]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpngyoksoo.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut list = Vec::new();\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            list.push(i * i);\n        } else {\n  \
    \          list.push(i * i + 1);\n        }\n    }\n    list\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 10, 16, 26]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpdartmxp5.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 1..=n\
    \ {\n        if i % 2 == 0 {\n            result.push(i * i);\n        } else\
    \ {\n            result.push(i + 1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp30ryxg99.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    vec![1usize; n]\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_ow8ibbp.rs:9:10\n  |\n9 |\
    \     vec![1usize; n]\n  |          ^^^^^^ expected `isize`, found `usize`\n \
    \ |\nhelp: change the type of the numeric literal from `usize` to `isize`\n  |\n\
    9 |     vec![1isize; n]\n  |           ~~~~~\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_ow8ibbp.rs:9:18\n  |\n9 |     vec![1usize; n]\n  |            \
    \      ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n9 |     vec![1usize;\
    \ n.try_into().unwrap()]\n  |                   ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![1..n].iter().cloned().product()\n    }\n}\n\nfn main() {\n \
    \   let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkffq675f.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror[E0277]: the trait bound `Vec<isize>:\
    \ Product<std::ops::Range<isize>>` is not satisfied\n    --> /tmp/tmpkffq675f.rs:12:36\n\
    \     |\n12   |         vec![1..n].iter().cloned().product()\n     |         \
    \                           ^^^^^^^ the trait `Product<std::ops::Range<isize>>`\
    \ is not implemented for `Vec<isize>`\n     |\n     = help: the following other\
    \ types implement trait `Product<A>`:\n               <Option<T> as Product<Option<U>>>\n\
    \               <Result<T, E> as Product<Result<U, E>>>\n               <Simd<f32,\
    \ LANES> as Product<&'a Simd<f32, LANES>>>\n               <Simd<f32, LANES> as\
    \ Product>\n               <Simd<f64, LANES> as Product<&'a Simd<f64, LANES>>>\n\
    \               <Simd<f64, LANES> as Product>\n               <Simd<i16, LANES>\
    \ as Product<&'a Simd<i16, LANES>>>\n               <Simd<i16, LANES> as Product>\n\
    \             and 70 others\nnote: required by a bound in `std::iter::Iterator::product`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut result: Vec<isize>\
    \ = Vec::new();\n        for i in 1..=n {\n            result.push(result[i] -\
    \ result[i-1])\n        }\n    } else {\n        let mut result: Vec<isize> =\
    \ Vec::new();\n        for i in 1..=n {\n            result.push(i * i)\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `result` in this scope\n  --> /tmp/tmpuaecnp30.rs:20:5\n\
    \   |\n20 |     result\n   |     ^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpuaecnp30.rs:12:25\n\
    \   |\n12 |             result.push(result[i] - result[i-1])\n   |           \
    \              ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpuaecnp30.rs:12:37\n\
    \   |\n12 |             result.push(result[i] - result[i-1])\n   |           \
    \                          ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    Vec::new()\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpxsj26paj.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1..n]\n    } else\
    \ {\n        vec![n]\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgpmc56r6.rs:10:14\n   |\n\
    10 |         vec![1..n]\n   |              ^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut f = vec![1isize; n + 1];\n    for &i in\
    \ f {\n        if i % 2 == 0 {\n            i as isize * f[i - 1]\n        } else\
    \ {\n            i as isize + f[i - 1]\n        }\n    }\n    f\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8zon4ouq.rs:9:30\n  |\n9 |\
    \     let mut f = vec![1isize; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut f\
    \ = vec![1isize; (n + 1).try_into().unwrap()];\n  |                          \
    \    +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8zon4ouq.rs:10:9\n\
    \   |\n10 |     for &i in f {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1; n + 1];\n    for i in 1\
    \ .. n {\n        result[i] = if i % 2 == 0 {\n            result[i] * i\n   \
    \     } else {\n            i + result[i]\n        };\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp53ti9j1n.rs:9:30\n  |\n9 |\
    \     let mut result = vec![1; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = vec![1; (n + 1).try_into().unwrap()];\n  |                              +\
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp53ti9j1n.rs:11:9\n   |\n11 |         result[i]\
    \ = if i % 2 == 0 {\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp53ti9j1n.rs:12:13\n   |\n12 |  \
    \           result[i] * i\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp53ti9j1n.rs:14:17\n   |\n14 |  \
    \           i + result[i]\n   |                 ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    assert!(n > 0);\n    assert!(n % 2 == 0);\n\n  \
    \  let mut res = vec![1; n];\n    for i in 1..n {\n        res[i] = res[i] * i;\n\
    \    }\n\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpteuv_c40.rs:12:27\n   |\n\
    12 |     let mut res = vec![1; n];\n   |                           ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut res = vec![1;\
    \ n.try_into().unwrap()];\n   |                            ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpteuv_c40.rs:14:9\n\
    \   |\n14 |         res[i] = res[i] * i;\n   |         ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpteuv_c40.rs:14:18\n   |\n14 |  \
    \       res[i] = res[i] * i;\n   |                  ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        vec![1; n * 2]\n    } else\
    \ {\n        vec![i..n]\n    }\n}\n\nfn main() {\n    let candidate = f;\n   \
    \ assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpgjha7d5l.rs:12:14\n\
    \   |\n12 |         vec![i..n]\n   |              ^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpgjha7d5l.rs:10:17\n   |\n10 |  \
    \       vec![1; n * 2]\n   |                 ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n10 |         vec![1; (n * 2).try_into().unwrap()]\n\
    \   |                 +     +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgjha7d5l.rs:12:14\n   |\n12 |         vec![i..n]\n   |\
    \              ^^^^ expected `isize`, found struct `std::ops::Range`\n   |\n \
    \  = note: expected type `isize`\n            found struct `std::ops::Range<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut vec = vec![1];\n    for i in 1..=n {\n \
    \       if i%2 == 0 {\n            vec.push(vec![i]);\n        } else {\n    \
    \        vec.push(vec![i] + vec![i-1]);\n        }\n    }\n    return vec\n}\n\
    \nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2,\
    \ 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplf7p9lap.rs:12:22\n   |\n\
    12 |             vec.push(vec![i]);\n   |                      ^^^^^^^ expected\
    \ integer, found struct `Vec`\n   |\n   = note: expected type `{integer}`\n  \
    \          found struct `Vec<isize>`\n   = note: this error originates in the\
    \ macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmplf7p9lap.rs:14:30\n\
    \   |\n14 |             vec.push(vec![i] + vec![i-1]);\n   |                 \
    \     ------- ^ --------- Vec<isize>\n   |                      |\n   |      \
    \                Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n < 2 {\n        return vec![];\n    }\n    let\
    \ mut v = vec![1; n];\n    v[0] = v[0] * v[0];\n    for i in 1..(n + 1) {\n  \
    \      v[i] = v[i] * i;\n    }\n    v\n}\n\nfn main() {\n    let candidate = f;\n\
    \    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiyaedoux.rs:12:25\n   |\n\
    12 |     let mut v = vec![1; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut v = vec![1; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpiyaedoux.rs:15:9\n\
    \   |\n15 |         v[i] = v[i] * i;\n   |         ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpiyaedoux.rs:15:16\n   |\n15 |  \
    \       v[i] = v[i] * i;\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        Vec::new().iter().map(|x|\
    \ x * f(n + 1))\n    } else {\n        Vec::new().iter().map(|x| x + f(n + 1))\n\
    \    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `&_` by `Vec<isize>`\n  --> /tmp/tmphl17tkxc.rs:10:37\n\
    \   |\n10 |         Vec::new().iter().map(|x| x * f(n + 1))\n   |            \
    \                         ^ no implementation for `&_ * Vec<isize>`\n   |\n  \
    \ = help: the trait `Mul<Vec<isize>>` is not implemented for `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphl17tkxc.rs:10:9\n   |\n8  | fn f(n: isize)\
    \ -> Vec<isize> {\n   |                   ---------- expected `Vec<isize>` because\
    \ of return type\n9  |     if n % 2 == 0 {\n10 |         Vec::new().iter().map(|x|\
    \ x * f(n + 1))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `Map`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Map<std::slice::Iter<'_, _>, [closure@/tmp/tmphl17tkxc.rs:10:31:\
    \ 10:47]>`\n\nerror[E0277]: cannot add `Vec<isize>` to `&_`\n  --> /tmp/tmphl17tkxc.rs:12:37\n\
    \   |\n12 |         Vec::new().iter().map(|x| x + f(n + 1))\n   |            \
    \                         ^ no implementation for `&_ + Vec<isize>`\n   |\n  \
    \ = help: the trait `Add<Vec<isize>>` is not implemented for `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphl17tkxc.rs:12:9\n   |\n8  | fn f(n: isize)\
    \ -> Vec<isize> {\n   |                   ---------- expected `Vec<isize>` because\
    \ of return type\n...\n12 |         Vec::new().iter().map(|x| x + f(n + 1))\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ struct `Map`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Map<std::slice::Iter<'_, _>, [closure@/tmp/tmphl17tkxc.rs:12:31: 12:47]>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if n % 2 == 0\
    \ {\n        for i in 1..n {\n            result.push(i * i);\n        }\n   \
    \ } else {\n        for i in 1..n {\n            result.push(1 + i);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 5]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp7_63hzkn.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![1];\n    }\n  \
    \  let mut result = vec![1; n + 1];\n    for i in 1..n + 1 {\n        let factorial\
    \ = factorial(i);\n        result[i] = factorial % 2 == 0 ? factorial : factorial\
    \ + i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `factorial`\n\
    \  --> /tmp/tmpulmoi8fu.rs:15:42\n   |\n15 |         result[i] = factorial % 2\
    \ == 0 ? factorial : factorial + i;\n   |                                    \
    \      ^^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0425]:\
    \ cannot find function `factorial` in this scope\n  --> /tmp/tmpulmoi8fu.rs:14:25\n\
    \   |\n14 |         let factorial = factorial(i);\n   |                      \
    \   ^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpulmoi8fu.rs:12:30\n   |\n12 |     let mut result = vec![1; n + 1];\n\
    \   |                              ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n12 |     let mut result = vec![1; (n + 1).try_into().unwrap()];\n\
    \   |                              +     +++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::with_capacity(n);\n\
    \n    for i in 1..=n {\n        if i%2 == 0 {\n            v.push(i * i);\n  \
    \      } else {\n            v.push(v.last() + i);\n        }\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjhs74ytt.rs:9:48\n  |\n9 |\
    \     let mut v: Vec<isize> = Vec::with_capacity(n);\n  |                    \
    \                            ^ expected `usize`, found `isize`\n  |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |     let mut v: Vec<isize> = Vec::with_capacity(n.try_into().unwrap());\n\
    \  |                                                 ++++++++++++++++++++\n\n\
    error[E0369]: cannot add `isize` to `Option<&isize>`\n  --> /tmp/tmpjhs74ytt.rs:15:29\n\
    \   |\n15 |             v.push(v.last() + i);\n   |                    --------\
    \ ^ - isize\n   |                    |\n   |                    Option<&isize>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n < 0 {\n        vec![]\n    } else {\n     \
    \   let mut result = vec![1; n]; // vec![1; 5] -> vec![1, 1, 2, 2, 3, 4, 5]\n\
    \        for i in 2..n {\n            result[i] = result[i] * i;\n        }\n\
    \        result\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6unopedm.rs:12:34\n   |\n\
    12 |         let mut result = vec![1; n]; // vec![1; 5] -> vec![1, 1, 2, 2, 3,\
    \ 4, 5]\n   |                                  ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |         let mut result = vec![1; n.try_into().unwrap()];\
    \ // vec![1; 5] -> vec![1, 1, 2, 2, 3, 4, 5]\n   |                           \
    \        ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp6unopedm.rs:14:13\n   |\n14 |            \
    \ result[i] = result[i] * i;\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6unopedm.rs:14:25\n   |\n14 |  \
    \           result[i] = result[i] * i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![1isize; n];\n\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result[i] = i * result[i];\n  \
    \      } else {\n            result[i] = result[i] - 1;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkx9s6uyz.rs:9:35\n  |\n9 |\
    \     let mut result = vec![1isize; n];\n  |                                 \
    \  ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut\
    \ result = vec![1isize; n.try_into().unwrap()];\n  |                         \
    \           ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkx9s6uyz.rs:13:13\n   |\n13 |            \
    \ result[i] = i * result[i];\n   |             ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkx9s6uyz.rs:13:29\n   |\n13 |            \
    \ result[i] = i * result[i];\n   |                             ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkx9s6uyz.rs:15:13\n   |\n15 |  \
    \           result[i] = result[i] - 1;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkx9s6uyz.rs:15:25\n   |\n15 |            \
    \ result[i] = result[i] - 1;\n   |                         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usi"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    vec![\n        1 as isize,\n        2 * f(n-1) as\
    \ isize,\n    ]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0605]: non-primitive cast: `Vec<isize>` as `isize`\n  --> /tmp/tmprhr7szk7.rs:11:13\n\
    \   |\n11 |         2 * f(n-1) as isize,\n   |             ^^^^^^^^^^^^^^^ an\
    \ `as` expression can only be used to convert between primitive types or to coerce\
    \ to a specific trait object\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    // todo\n    vec![]\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmptp_ma4r3.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut f = Vec::new();\n    for i in 1..=n {\n\
    \        if i % 2 == 0 {\n            f.push(i);\n        }\n        else {\n\
    \            f.push(f.last() * i);\n        }\n    }\n    f\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Option<&isize>` by `isize`\n  --> /tmp/tmp2m54t_0t.rs:15:29\n\
    \   |\n15 |             f.push(f.last() * i);\n   |                    --------\
    \ ^ - isize\n   |                    |\n   |                    Option<&isize>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in 1..=n {\n\
    \        if i%2 == 0 {\n            res.push(i*i);\n        } else {\n       \
    \     res.push(i+1);\n        }\n    }\n    return res;\n}\n\nfn main() {\n  \
    \  let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmplo31ogbc.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut ret = vec![];\n    for i in 1..=n {\n  \
    \      if i%2 == 0 {\n            ret.append(i*i);\n        } else {\n       \
    \     let mut sum = 0;\n            for j in 1..=i {\n                sum += j;\n\
    \            }\n            ret.append(sum);\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6,\
    \ 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n \
    \   assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1, 2,\
    \ 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwuw8ffvo.rs:12:24\n   |\n\
    12 |             ret.append(i*i);\n   |                        ^^^ expected `&mut\
    \ Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n\
    \                           found type `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwuw8ffvo.rs:18:24\n   |\n18 |             ret.append(sum);\n  \
    \ |                        ^^^ expected `&mut Vec<_>`, found `isize`\n   |\n \
    \  = note: expected mutable reference `&mut Vec<_>`\n                        \
    \   found type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut sum: isize = 1;\n    for i in 1..n {\n \
    \       sum += i;\n    }\n    vec![sum]\n}\n\nfn main() {\n    let candidate =\
    \ f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpnmgsilb7.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    if\
    \ n % 2 == 0 {\n        for i in 1..=n / 2 {\n            result += vec![i, i];\n\
    \        }\n    } else {\n        for i in 1..=n / 2 {\n            result +=\
    \ vec![i];\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmpc823_u_f.rs:12:13\n   |\n12 |             result\
    \ += vec![i, i];\n   |             ------^^^^^^^^^^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpc823_u_f.rs:16:13\n\
    \   |\n16 |             result += vec![i];\n   |             ------^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<isize>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    // base case\n    if n == 1 {\n        return vec![1];\n\
    \    }\n    // recurrence relation\n    let mut result = vec![];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result.push(i * f(i));\n      \
    \  } else {\n            result.push(i * f(i-1));\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1,\
    \ 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n\
    \    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3), vec![1,\
    \ 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `Vec<isize>`\n  --> /tmp/tmpb2cibq3z.rs:17:27\n\
    \   |\n17 |             result.push(i * f(i));\n   |                         \
    \  ^ no implementation for `isize * Vec<isize>`\n   |\n   = help: the trait `Mul<Vec<isize>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `Vec<isize>`\n\
    \  --> /tmp/tmpb2cibq3z.rs:19:27\n   |\n19 |             result.push(i * f(i-1));\n\
    \   |                           ^ no implementation for `isize * Vec<isize>`\n\
    \   |\n   = help: the trait `Mul<Vec<isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 1..n {\n\
    \        let factor = 1;\n        for j in 1..i {\n            factor *= j;\n\
    \        }\n        result.push(factor);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `factor`\n  -->\
    \ /tmp/tmphubikglo.rs:13:13\n   |\n11 |         let factor = 1;\n   |        \
    \     ------\n   |             |\n   |             first assignment to `factor`\n\
    \   |             help: consider making this binding mutable: `mut factor`\n12\
    \ |         for j in 1..i {\n13 |             factor *= j;\n   |             ^^^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::<isize>::new();\n    for i in\
    \ 1..=n {\n        if i % 2 == 0 {\n            res.push(i * i);\n        } else\
    \ {\n            res.push(1 + i);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 4, 16, 6]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmp1fmv1kzq.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    res.reserve(n);\n\
    \    for i in 1..=n {\n        if i % 2 == 0 {\n            res.push(i * i);\n\
    \        } else {\n            let mut j = 1;\n            while j > i {\n   \
    \             j *= i;\n            }\n            res.push(j);\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps58d4otx.rs:10:17\n   |\n\
    10 |     res.reserve(n);\n   |                 ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n10 |     res.reserve(n.try_into().unwrap());\n   |\
    \                  ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut f = vec![1isize; n + 1];\n    for i in 1..=n+1\
    \ {\n        f[n - i] = i * f[n - i - 1];\n    }\n    f\n}\n\nfn main() {\n  \
    \  let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo9joq70d.rs:9:30\n  |\n9 |\
    \     let mut f = vec![1isize; n + 1];\n  |                              ^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut f\
    \ = vec![1isize; (n + 1).try_into().unwrap()];\n  |                          \
    \    +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpo9joq70d.rs:11:9\n   |\n11 |         f[n -\
    \ i] = i * f[n - i - 1];\n   |         ^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpo9joq70d.rs:11:24\n   |\n11 |         f[n\
    \ - i] = i * f[n - i - 1];\n   |                        ^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    (1..n).map(|i| i * i).collect()\n}\n\nfn main()\
    \ {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n\
    \    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n    assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 9, 16]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpubm35uex.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n % 2 == 0 {\n        let mut result = vec![1;\
    \ n];\n        for i in 2..=n {\n            result[i] *= i;\n        }\n    \
    \    result\n    } else {\n        let mut result = vec![1];\n        for i in\
    \ 2..=n {\n            result[i] = result[i] + i;\n        }\n        result\n\
    \    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8vbn2w4b.rs:10:34\n   |\n\
    10 |         let mut result = vec![1; n];\n   |                              \
    \    ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n10 |      \
    \   let mut result = vec![1; n.try_into().unwrap()];\n   |                   \
    \                ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8vbn2w4b.rs:12:13\n   |\n12 |  \
    \           result[i] *= i;\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8vbn2w4b.rs:18:13\n   |\n18 |  \
    \           result[i] = result[i] + i;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8vbn2w4b.rs:18:25\n   |\n18 |  \
    \           result[i] = result[i] + i;\n   |                         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    (1..n)\n        .filter(|&i| i % 2 == 0)\n     \
    \   .map(|i| i * (i + 1) / 2)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 10]`,\n right: `[1, 2, 6, 24, 15]`', /tmp/tmpcwcin025.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    let mut f = vec![1isize];\n    for i in 1..=n{\n\
    \        if i % 2 == 0{\n            f.push(f * i);\n        }else{\n        \
    \    f.push(f + i);\n        }\n    }\n    return f;\n}\n\nfn main() {\n    let\
    \ candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Vec<isize>` by `isize`\n  --> /tmp/tmp4i7_8ykk.rs:12:22\n\
    \   |\n12 |             f.push(f * i);\n   |                    - ^ - isize\n\
    \   |                    |\n   |                    Vec<isize>\n\nerror[E0369]:\
    \ cannot add `isize` to `Vec<isize>`\n  --> /tmp/tmp4i7_8ykk.rs:14:22\n   |\n\
    14 |             f.push(f + i);\n   |                    - ^ - isize\n   |   \
    \                 |\n   |                    Vec<isize>\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    vec![1..=n]\n}\n\nfn main() {\n    let candidate\
    \ = f;\n    assert_eq!(candidate(5), vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7),\
    \ vec![1, 2, 6, 24, 15, 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n \
    \   assert_eq!(candidate(3), vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppszekrr_.rs:9:10\n  |\n9 |\
    \     vec![1..=n]\n  |          ^^^^^ expected `isize`, found struct `RangeInclusive`\n\
    \  |\n  = note: expected type `isize`\n           found struct `RangeInclusive<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfn f(n:\
    \ isize) -> Vec<isize> {\n    if n == 1 {\n        vec![1.0]\n    } else if n\
    \ % 2 == 0 {\n        vec![1.0, f(n-1)]\n    } else {\n        vec![isize::from(1)..n]\n\
    \    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5),\
    \ vec![1, 2, 6, 24, 15]);\n    assert_eq!(candidate(7), vec![1, 2, 6, 24, 15,\
    \ 720, 28]);\n    assert_eq!(candidate(1), vec![1]);\n    assert_eq!(candidate(3),\
    \ vec![1, 2, 6]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpca12n0_5.rs:10:14\n   |\n\
    10 |         vec![1.0]\n   |              ^^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpca12n0_5.rs:12:14\n\
    \   |\n12 |         vec![1.0, f(n-1)]\n   |              ^^^ expected `isize`,\
    \ found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpca12n0_5.rs:14:14\n\
    \   |\n14 |         vec![isize::from(1)..n]\n   |              ^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `std::ops::Range`\n   |\n   = note: expected\
    \ type `isize`\n            found struct `std::ops::Range<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
