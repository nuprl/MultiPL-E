name: HumanEval_17_parse_music
language: rust
prompt: "/// Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n/// Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n\
  /// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n\
  /// '.|' - quater note, lasts one beat\n/// >>> parse_music('o o| .| o| o| .| .|\
  \ .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
  \ String) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
  \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1,\
  \ 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2,\
  \ 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o\
  \ o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
completions: ["    let mut music_iter = music_string.chars().enumerate().take(music_string.len()\
    \ / 12).collect();\n    let mut beats_per_note = 1;\n\n    // We need to keep\
    \ track of how many notes we currently have, and to know when to stop\n    let\
    \ mut current_note = 0;\n    let mut notes_since_last = 0;\n\n    for (index,\
    \ note) in music_iter {\n        if notes_since_last == 4 {\n            // 'o'\
    \ - whole note, lasts four beats\n            beats_per_note = 4;\n        }\n\
    \        if notes_since_last == 2 {\n            // 'o|' - half note, lasts two\
    \ beats\n            beats_per_note = 2;\n        }\n        if notes_since_last\
    \ == 1 {\n            // '.|' - quater note, lasts one beat\n            beats_per_note\
    \ = 1;\n        }\n        if note == '|' {\n            // We got a quater note\n\
    \            current_note = index;\n            notes_since_last = 0;\n      \
    \  }\n        if note == 'o' {\n            // We got a whole note\n         \
    \   current_note = index;\n            notes_since_last = 0;\n        }\n    \
    \    if notes_since_last == 3 {\n            // Now we're done. Return our results\n\
    \            music_iter.truncate(current_note);\n            return music_iter.collect();\n\
    \        }\n        notes_since_last += 1;\n    }\n\n    // If we reached the\
    \ end of the string, return an empty vector\n    music_iter.truncate(0);\n   \
    \ music_iter.collect();", "    let mut result = vec![0; music_string.len()];\n\
    \    let mut last_note = music_string.chars().skip(1).count();\n    let mut note_duration:\
    \ isize = 1;\n    let mut current_note = 0;\n    let mut first_note = 0;\n   \
    \ while current_note < music_string.len() {\n        if music_string[current_note]\
    \ == 'o' {\n            if first_note == 0 {\n                first_note = current_note;\n\
    \            }\n            current_note = current_note + 1;\n            result[current_note]\
    \ = result[current_note] + 1;\n            if current_note == music_string.len()\
    \ - 1 {\n                result[current_note] = result[current_note] + note_duration;\n\
    \            }\n            last_note = current_note;\n            note_duration\
    \ = 1;\n            current_note = current_note + 1;\n        } else {\n     \
    \       if last_note == 0 {\n                result[current_note] = result[current_note]\
    \ + 1;\n                note_duration = 1;\n                current_note = current_note\
    \ + 1;\n            } else {\n                if last_note == current_note {\n\
    \                    result[current_note] = result[current_note] + 1;\n      \
    \              note_duration = 1;\n                } else {\n                \
    \    result[current_note] = result[current_note] + note_duration;\n          \
    \          note_duration = 1;\n                }\n                current_note\
    \ = current_note + 1;\n            }\n            last_note = current_note;\n\
    \        }\n    }\n    result", "    let mut beats_per_note = vec![];\n    for\
    \ note in music_string.chars() {\n        match note {\n            'o' => {\n\
    \                beats_per_note.push(4);\n            }\n            'o|' => {\n\
    \                beats_per_note.push(2);\n            }\n            '.|' => {\n\
    \                beats_per_note.push(1);\n            }\n            _ => {\n\
    \                continue;\n            }\n        }\n    }\n    beats_per_note",
  "    let mut output = Vec::new();\n    let mut current_note = 0;\n    let mut last_note\
    \ = 0;\n    let mut note_length = 0;\n    for c in music_string {\n        match\
    \ c {\n            'o' => last_note = current_note,\n            'o|' => last_note\
    \ = current_note + 1,\n            'o' => current_note += 1,\n            '.|'\
    \ => current_note += 1,\n            '.' => output.push(current_note),\n     \
    \       _ => break\n        }\n    }\n    output", "    let mut result = Vec::<isize>::new();\n\
    \    let music_string = music_string.trim_end_matches(\".\").trim_start_matches(\"\
    o\");\n\n    for c in music_string.chars().filter_map(|c| match c {\n        'o'\
    \ => c == '.' || c == ' ' || (c as usize) % 4 == 0,\n        'o|' => c == '.'\
    \ || c == ' ' || (c as usize) % 2 == 0,\n        _ => false,\n    }) {\n     \
    \   result += (c as isize) / 4;\n    }\n\n    result", "    let mut notes: Vec<isize>\
    \ = Vec::new();\n    let mut current_note = music_string.chars().next().unwrap();\n\
    \    for c in music_string {\n        if *c == current_note {\n            notes.push(1);\n\
    \        } else {\n            notes.push(0);\n        }\n        if *c == '|'\
    \ {\n            notes.push(1);\n            current_note = *c;\n        }\n \
    \   }\n    notes", "    music_string\n        .chars()\n        .filter(|c| *c\
    \ != '|')\n        .map(|c| match c {\n            'o' => 4,\n            'o|'\
    \ => 2,\n            '.|' => 1,\n            _ => 0,\n        })\n        .collect()",
  "    let mut intervals: Vec<isize> = vec![0; music_string.len()];\n    let mut current_note\
    \ = music_string[0];\n    let mut current_beat = 0;\n    let mut current_octave\
    \ = 1;\n    for &c in music_string.chars() {\n        match c {\n            'o'\
    \ => intervals[current_note - 'o'] -= current_beat,\n            'o|' => intervals[current_note\
    \ - 'o'] -= current_beat,\n            '.|' => intervals[current_note - 'o'] -=\
    \ current_beat,\n            _ => {\n                intervals[current_note -\
    \ 'o'] += 1;\n                intervals[current_note] -= 1;\n                current_note\
    \ = c;\n                current_beat = intervals[current_note];\n            \
    \    current_octave += 1;\n            }\n        }\n    }\n    return intervals;",
  "    let mut beats_counter: Vec<isize> = Vec::new();\n    let mut beat = 0;\n  \
    \  music_string\n        .split_whitespace()\n        .filter(|ch| !ch.is_ascii_whitespace())\n\
    \        .into_iter()\n        .for_each(|ch| {\n            match ch {\n    \
    \            ' ' | '\\t' | '\\n' => {}\n                'o' | 'o|' | '.|' => {\
    \ beats_counter.push(beat); beat += 1 }\n                rest => panic!(\"Unsupported\
    \ musical symbol: {}\", rest)\n            }\n        });\n    beats_counter",
  '    // YOUR CODE HERE', "    let mut beats_per_beat = 1;\n    let mut current_beat\
    \ = 0;\n\n    let mut music_string = music_string.to_string();\n    let mut music_string_chars\
    \ = music_string.chars();\n\n    let mut notes: Vec<isize> = vec![];\n    while\
    \ music_string_chars.next() != Some(&'.') {\n        if music_string_chars.next()\
    \ != Some(&'|') {\n            if music_string_chars.next() == Some(&'o') {\n\
    \                notes.push(current_beat + 4);\n                music_string_chars.next();\n\
    \            } else if music_string_chars.next() == Some(&'o|') {\n          \
    \      notes.push(current_beat + 2);\n                music_string_chars.next();\n\
    \            } else if music_string_chars.next() == Some(&'.|') {\n          \
    \      notes.push(current_beat);\n                music_string_chars.next();\n\
    \            } else {\n                return vec![];\n            }\n       \
    \     beats_per_beat += 1;\n            current_beat += 1;\n        } else {\n\
    \            notes.push(current_beat);\n            music_string_chars.next();\n\
    \            beats_per_beat += 1;\n            current_beat += 1;\n        }\n\
    \    }\n    notes", "    let mut beats_so_far: Vec<isize> = vec![0, 0, 0, 0, 0,\
    \ 0, 0, 0];\n    let mut music_string = music_string.to_string();\n    let mut\
    \ notes = music_string.chars().take_while(|c| *c != '|').collect::<String>();\n\
    \    for note in notes {\n        match note {\n            'o' => beats_so_far.push(4),\n\
    \            'o|' => beats_so_far.push(2),\n            '.|' => beats_so_far.push(1)\n\
    \            _ => {}\n        }\n    }\n    beats_so_far", "    let mut beats:\
    \ Vec<isize> = music_string.chars().map(|c| match c {\n        'o' => 4,\n   \
    \     'o|' => 2,\n        '.|' => 1,\n        _ => 0,\n    }).collect();\n\n \
    \   beats.sort_by_key(|x| *x).reverse();\n\n    beats.iter().cloned().collect()",
  "    music_string.chars().skip_while(|c| *c == ' ').collect::<String>().chars().nth(music_string.chars().count()\
    \ - 1).unwrap()\n        .chars().enumerate().filter_map(|(i, char)| {\n     \
    \       match char {\n                'o' => 1,\n                'o|' => 2,\n\
    \                '.|' => 4,\n                _ => 0,\n            }\n        }).collect()",
  "    music_string.split(' ').filter_map(|x| match x {\n        \"o\" => Some(4),\n\
    \        \"o|\" => Some(2),\n        '.|' => Some(1),\n        _ => None,\n  \
    \  }).collect::<Vec<Option<isize>>>().flatten()\n        .filter(|&_| _ != None).collect::<Vec<_>>()",
  "    let mut counters = Vec::new();\n\n    let mut music_string_iter = music_string.chars().enumerate();\n\
    \    let mut cur_beat: isize = 0;\n    let mut cur_note = 0;\n    let mut next_note\
    \ = 0;\n\n    loop {\n        match music_string_iter.next() {\n            Some(note_char)\
    \ => {\n                if note_char == b'o' {\n                    counters.push(cur_beat);\n\
    \                    cur_beat = 0;\n                    cur_note += 1;\n     \
    \           } else if note_char == b'o|' {\n                    counters.push(cur_beat);\n\
    \                    cur_beat = 0;\n                    cur_note += 2;\n     \
    \           } else if note_char == b'.|' {\n                    counters.push(cur_beat);\n\
    \                    cur_beat = 0;\n                    cur_note += 4;\n     \
    \           } else if note_char == b'o|o|' {\n                    counters.push(cur_beat);\n\
    \                    cur_beat = 0;\n                    cur_note += 8;\n     \
    \           } else if note_char == b'o|o|o|o|o|' {\n                    counters.push(cur_beat);\n\
    \                    cur_beat = 0;\n                    cur_note += 16;\n    \
    \            } else {\n                    cur_beat += 1;\n                  \
    \  next_note = note_char;\n                }\n            }\n            None\
    \ => break,\n        }\n    }\n\n    counters.push(cur_beat);\n    counters.push(cur_note);\n\
    \    counters.push(next_note);\n\n    counters", "    music_string\n        .split_whitespace()\n\
    \        .chars()\n        .filter(|c| *c >= 'o' && *c <= 'o')\n        .map(|c|\
    \ c.to_digit(16))\n        .filter(|&c| c >= '0' && c <= '9')\n        .collect::<Vec<isize>>()",
  "    let mut beats: Vec<isize> = Vec::new();\n    let mut note_count: usize = 0;\n\
    \    let mut notes: Vec<&'static str> = Vec::new();\n    let mut current_note:\
    \ &'static str = String::new();\n\n    for c in music_string.chars() {\n     \
    \   note_count += 1;\n\n        match c {\n            'o' | 'o|' => notes.push(current_note.clone()),\n\
    \            '.|' => notes.push(current_note.clone()),\n            _ => notes.push(c),\n\
    \        };\n\n        if notes.len() == 3 {\n            beats.push(note_count);\n\
    \            note_count = 0;\n            notes.clear();\n        }\n\n      \
    \  current_note = c;\n    }\n\n    beats.push(note_count);\n\n    notes", "  \
    \  let mut beats = 0; // number of beats\n\n    for note in music_string.chars()\
    \ {\n        match note {\n            'o' => beats += 4,\n            'o|' =>\
    \ beats += 2,\n            '.|' => beats += 1,\n            _ => (),\n       \
    \ }\n    }\n\n    beats", "    // Split the string into chunks delimited by `|`\n\
    \    let chunks = music_string.chars().take_while(|c| c != '|').collect();\n\n\
    \    // Convert each chunk to an int and collect into vec with beats per note\n\
    \    let chunk_beats_per_note = chunks\n        .iter()\n        .map(|c| match\
    \ c {\n            '.' => 1,\n            'o' => 4,\n            '|' => 2,\n \
    \           _ => panic!(\"'{}' does not represent a note!\", c),\n        })\n\
    \        .collect();\n\n    // Add the sum of all beats per note together and\
    \ divide by 4 to get number of beats per note\n    let result = chunk_beats_per_note.iter().sum()\
    \ / 4;\n    vec![result]", "    let mut beats_per_note = vec![];\n    let mut\
    \ note_len = music_string.len();\n\n    let mut note_start = -1;\n    let mut\
    \ note_end = -1;\n\n    for c in music_string {\n        if c == ' ' {\n     \
    \       if note_end < 0 {\n                note_start = c;\n                note_end\
    \ = c;\n            } else if note_end == c {\n                note_end = c;\n\
    \            } else {\n                note_end = c;\n                beats_per_note.push(i\
    \ - note_start);\n                note_start = -1;\n            }\n        } else\
    \ {\n            if note_start < 0 {\n                note_start = c;\n      \
    \      } else {\n                note_end = c;\n            }\n        }\n   \
    \ }\n\n    if note_start >= 0 {\n        beats_per_note.push(i - note_start);\n\
    \    }\n\n    beats_per_note", "    music_string.split_whitespace().iter().map(|note|\
    \ {\n        let mut i = 0;\n        let mut j = 0;\n        let mut last = 0;\n\
    \        let mut count = 1;\n        while i < music.len() && music[i] == '|'\
    \ {\n            i += 1;\n            count *= 2;\n        }\n        if music[i]\
    \ == 'o' {\n            i += 1;\n            last = 4;\n        }\n        if\
    \ music[i] == 'o|' {\n            i += 1;\n            last = 2;\n        }\n\
    \        if music[i] == '.' {\n            i += 1;\n            count = 1;\n \
    \       }\n        \n        for (; i <= music.len() - 1 && music[i] != '|' &&\
    \ !music.is_empty(); i += 1, last = count) {\n            for (; j <= music.len()\
    \ - 1 && music[j] != '|' && !music.is_empty(); j += 1, count = (count - 1) / 2)\
    \ {\n            }\n        }\n        if music[i] == ' ' {\n            i +=\
    \ 1;\n        }\n        \n        last = music.len() - i;\n        if music[i]\
    \ == 'o' {\n            i += 1;\n            last = 4;\n        }\n        if\
    \ music[i] == 'o|' {\n            i += 1;\n            last = 2;\n        }\n\
    \        if music[i] == '.' {\n            i += 1;\n            last = 1;\n  \
    \      }\n        if music.len() > 1 && music[i + 1] == '.' {\n            i +=\
    \ 1;\n            last = 1;\n        }\n        \n        i += 1;\n        \n\
    \        if music[i] == '.' {\n            i += 1;\n            last = 1;\n  \
    \      }\n        if music.len() > 1 && music[i + 1] == '.' {\n            i +=\
    \ 1;\n            last = 1;\n        }\n        \n        if music[i] == 'o' {\n\
    \            i += 1;\n            last = 4;\n        }\n        if music[i] ==\
    \ 'o|' {\n            i += 1;\n            last = 2;\n        }\n        \n  \
    \      if music.len() > 1 && music[i + 1] == '.' {\n            i += 1;\n    \
    \        last = 1;\n        }\n        \n        if music[i] == '.' {\n      \
    \      i += 1;\n            last = 1;\n        }\n        if music.len() > 1 &&\
    \ music[i + 1] == '.' {\n            i += 1;\n            last = 1;\n        }\n\
    \        \n        if music[i] == 'o' {\n            i += 1;\n            last\
    \ = 4;\n        }\n        if music[i] == 'o|' {\n            i += 1;\n      \
    \      last = 2;\n        }\n        if music.len() > 1 && music[i + 1] == '.'\
    \ {\n            i += 1;\n            last = 1;\n        }\n        \n       \
    \ if music.len() > 1 && music[i + 1] == '.' {\n            i += 1;\n         \
    \   last = 1;\n        }\n        \n        if music[i] == '.' {\n           \
    \ i += 1;\n            last = 1;\n        }\n        ", "    let mut beats: Vec<isize>\
    \ = vec![];\n    for note in music_string.chars().filter(|&c| c == 'o' || c ==\
    \ '|' || c == '.') {\n        if note == 'o' {\n            beats.push(4);\n \
    \       } else if note == '|' {\n            beats.push(2);\n        } else if\
    \ note == '.' {\n            beats.push(1);\n        }\n    }\n    beats", " \
    \   let mut music_string = music_string.to_string();\n    let mut music_vector:\
    \ Vec<isize> = Vec::new();\n    let mut note_string = music_string.chars();\n\n\
    \    while let Some(note_character) = note_string.next() {\n        // If note\
    \ is '.' , quater note or whole note, then increase counter and store in vector\n\
    \        if note_character == '.' {\n            music_vector.push(1);\n     \
    \   } else if note_character == 'o' {\n            music_vector.push(4);\n   \
    \     } else if note_character == '|' {\n            music_vector.push(2);\n \
    \       } else {\n            music_vector.push(0);\n        }\n    }\n\n    music_vector",
  "    let music_string = music_string.trim().to_string();\n    let mut beats = 0;\n\
    \    let mut current_note_length = 0;\n    let mut current_note_length = 0;\n\
    \    let mut current_note = Note::UNKNOWN;\n    let mut current_note_length =\
    \ 0;\n    for i in music_string.chars() {\n        // if we hit '.|' then we have\
    \ reached the end of note, so we can increment current_note_length\n        if\
    \ i.is_whitespace() {\n            current_note_length += 1;\n            beats\
    \ += 1;\n            current_note = Note::UNKNOWN;\n            continue;\n  \
    \      }\n\n        // if we hit 'o|' then we know that the next note was '.|'\
    \ and we can continue counting the rest\n        if i.is_ascii(\"o|\") {\n   \
    \         current_note_length += 1;\n            continue;\n        }\n\n    \
    \    // if we hit 'o' then we know that we are done with current note and can\
    \ move on to the next one\n        if i.is_ascii(\"o\") {\n            beats +=\
    \ 1;\n            current_note = Note::UNKNOWN;\n            continue;\n     \
    \   }\n\n        // if we hit any other character then we know that this note\
    \ just has last one beat and we can continue\n        // counting rests\n    \
    \    current_note_length += 1;\n    }\n\n    if current_note != Note::UNKNOWN\
    \ {\n        beats += 1;\n    }\n\n    vec![beats]", "    let mut beats_per_note_last\
    \ = 0;\n    for &c in music_string.chars() {\n        match c {\n            'o'\
    \ | 'o|' => beats_per_note_last = 4,\n            '.|' => beats_per_note_last\
    \ = 1\n            _ => break\n        }\n    }\n\n    let mut music_note_lasts\
    \ = Vec::new();\n    for c in music_string.chars() {\n        match c {\n    \
    \        'o' | 'o|' =>\n                music_note_lasts.push(beats_per_note_last),\n\
    \            '.|' => music_note_lasts.push(1)\n            _ => break\n      \
    \  }\n    }\n    music_note_lasts", "    music_string\n        .chars()\n    \
    \    .filter(|c| c != '|')\n        .filter_map(|c| match c {\n            'o'\
    \ => (0,),\n            'o|' => (4,),\n            '.' => (1,),\n            _\
    \ => return Err(format_err!(\"Incorrect music string: {}\", music_string)),\n\
    \        })\n        .collect::<Result<Vec<_>, _>>()?\n        .into_iter()\n\
    \        .map(|beats| *beats)\n        .collect()", "    let mut beats = music_string.chars().map(|c|\
    \ match c {\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1,\n     \
    \   _ => 0,\n    }).collect::<Vec<_>>();\n    let mut i = 0;\n    let mut last_beat_beats\
    \ = music_string.chars().skip(1).peekable().map(|c| c != '|').count() as isize;\n\
    \    while i < beats.len() {\n        beats[i] += last_beat_beats;\n        last_beat_beats\
    \ = music_string.chars().skip(1).take_while(|c| c != '|').count() as isize;\n\
    \        i += 1;\n    }\n    beats", '    // TODO: implement this', "    music_string.trim().chars().map(|x|\
    \ match x {\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1,\n     \
    \   _ => 0,\n    }).sum()", "    let mut beats: Vec<isize> = vec![];\n    let\
    \ mut current_note = \"\";\n    for char in music_string.chars() {\n        match\
    \ char {\n            '.' => {}\n            'o' => {}\n            '|' => {}\n\
    \            ' ' => {}\n            _ => {\n                let note_num = char.code_str().parse().unwrap();\n\
    \                beats.push(note_num);\n                current_note = char.to_string();\n\
    \            }\n        }\n    }\n    beats.push(beats.last().unwrap());\n   \
    \ return beats;", "    let mut beats = Vec::<isize>::new();\n\n    for note in\
    \ music_string.chars().take(music_string.len()) {\n        match note {\n    \
    \        'o' => beats.extend_from_slice(&[4, 4]),\n            'o|' => beats.extend_from_slice(&[2,\
    \ 2]),\n            '.|' => beats.extend_from_slice(&[1]),\n            _ => ()\n\
    \        }\n    }\n\n    beats.reverse();\n\n    beats", "    music_string.lines()\n\
    \        .map(|line| {\n            let mut beats: isize = 0;\n            let\
    \ mut note = &line[0];\n            let mut prev_note = &note[..1];\n        \
    \    while note[0] != '|' {\n                if note[0] == 'o' {\n           \
    \         if note[1] == prev_note {\n                        beats += 4;\n   \
    \                 } else {\n                        beats += 1;\n            \
    \        }\n                } else if note[0] == '.' {\n                    if\
    \ note[1] == prev_note {\n                        beats += 1;\n              \
    \      } else {\n                        beats += 2;\n                    }\n\
    \                } else {\n                    beats += 1;\n                }\n\
    \                prev_note = note[1];\n                note = &note[2..];\n  \
    \          }\n            beats\n        })\n        .collect()", "    music_string\n\
    \        .chars()\n        .enumerate()\n        .filter_map(|(idx, char)| match\
    \ char {\n            'o' => Some(idx as isize),\n            'o|' => Some(idx\
    \ as isize * 2),\n            '.|' => Some(idx as isize * 4),\n            _ =>\
    \ None,\n        })\n        .collect()", "    music_string.lines()\n        .map(|line|\
    \ match line {\n            'o' => 4,\n            'o|' => 2,\n            '.|'\
    \ => 1,\n            _ => 0,\n        })\n        .collect()", "    let mut counters\
    \ = Vec::new();\n\n    for note in music_string.chars().filter(|x| *x != '|')\
    \ {\n        let mut note_count = Counter::new();\n        let note_to_beats =\
    \ note_to_beats(note);\n        for i in 0..note_to_beats.len() {\n          \
    \  note_count[note_to_beats[i]] += 1;\n        }\n        counters.push(note_count.clone());\n\
    \    }\n\n    note_to_beats(music_string)", "    let mut beats = 0;\n    music_string\n\
    \        .lines()\n        .filter_map(|line| line.chars().map(|c| c.to_digit(10).unwrap()))\n\
    \        .filter(|x| *x == '.')\n        .filter(|x| *x == '|')\n        .for_each(|x|\
    \ *x != 'o' && *x != '|')\n        .for_each(|x| *x != '|' && *x != 'o')\n   \
    \     .for_each(|x| *x != 'o' && beats += x * 4);\n    music_string\n        .lines()\n\
    \        .filter_map(|line| line.chars().map(|c| c.to_digit(10).unwrap()))\n \
    \       .filter(|x| *x == 'o')\n        .filter(|x| *x == '|')\n        .for_each(|x|\
    \ *x != '|' && *x != 'o')\n        .for_each(|x| *x != 'o' && beats += x * 2);\n\
    \    music_string\n        .lines()\n        .filter_map(|line| line.chars().map(|c|\
    \ c.to_digit(10).unwrap()))\n        .filter(|x| *x == 'o')\n        .filter(|x|\
    \ *x != '|')\n        .for_each(|x| *x != 'o' && *x != '|')\n        .for_each(|x|\
    \ *x != 'o' && beats += x);\n    music_string\n        .lines()\n        .filter_map(|line|\
    \ line.chars().map(|c| c.to_digit(10).unwrap()))\n        .filter(|x| *x == 'o')\n\
    \        .filter(|x| *x != '|')\n        .for_each(|x| *x != 'o' && *x != '|')\n\
    \        .for_each(|x| *x != 'o' && beats += x);\n    music_string\n        .lines()\n\
    \        .filter_map(|line| line.chars().map(|c| c.to_digit(10).unwrap()))\n \
    \       .filter(|x| *x == 'o')\n        .filter(|x| *x != '|')\n        .for_each(|x|\
    \ *x != 'o' && *x != '|')\n        .for_each(|x| *x != 'o' && beats += x);\n \
    \   music_string\n        .lines()\n        .filter_map(|line| line.chars().map(|c|\
    \ c.to_digit(10).unwrap()))\n        .filter(|x| *x == 'o')\n        .filter(|x|\
    \ *x != '|')\n        .for_each(|x| *x != 'o", "    music_string\n        .lines()\n\
    \        .map(|l| {\n            match l.chars().next().unwrap() {\n         \
    \       'o' => 4,\n                'o|' => 2,\n                '.|' => 1,\n  \
    \              _ => panic!(\"Unexpected symbol in music string: {:?}\", l),\n\
    \            }\n        })\n        .collect()", "    music_string\n        .chars()\n\
    \        .flat_map(|c| *c as u8)\n        .collect::<Vec<_>>()\n        .into_iter()\n\
    \        .map(|note| match note {\n            'o' => 1,\n            'o|' =>\
    \ 2,\n            '.|' => 4,\n            _ => panic!(\"{}\", note),\n       \
    \ })\n        .collect()", "    let mut beats = Vec::new();\n\n    for music_note\
    \ in music_string.chars() {\n        let music_note = music_note.to_string();\n\
    \        let note_to_beats = match music_note {\n            'o' => 0,\n     \
    \       'o|' => 2,\n            '.|' => 1,\n            _ => {\n             \
    \   println!(\"Invalid music note {}\", music_note);\n                println!(\"\
    {}\", music_string);\n                continue;\n            }\n        };\n \
    \       for _ in 0..note_to_beats {\n            beats.push(note_to_beats);\n\
    \        }\n    }\n\n    beats", "    let mut beats = Vec::new();\n    let mut\
    \ notes = 0;\n    let mut last_beat = 0;\n    loop {\n        music_string\n \
    \           .chars()\n            .skip_while(|c| *c != 'o' | c == '|')\n    \
    \        .take_while(|c| *c != 'o' | c == '|')\n            .skip_while(|c| *c\
    \ != '.' | c == '|')\n            .take_while(|c| *c != '.' | c == '|')\n    \
    \        .for_each(|c| *c as usize += last_beat);\n        notes += 1;\n     \
    \   last_beat = 0;\n        if music_string.chars().last().unwrap() == 'o' {\n\
    \            last_beat = 4;\n        }\n    }\n    beats", "    let mut parsed_music:\
    \ Vec<isize> = Vec::new();\n\n    for note in music_string.chars() {\n       \
    \ let mut beats: isize = 0;\n        match note {\n            'o' => { beats\
    \ = 4; },\n            'o|' => { beats = 2; },\n            '.|' => { beats =\
    \ 1; }\n            _ => {\n                // This character is not a note nor\
    \ other music character. Just add it to our list\n                parsed_music.push(beats);\n\
    \                continue;\n            }\n        }\n\n        // We have not\
    \ reached end of our note. Add one beat to our beat counter\n        parsed_music.push(beats\
    \ + 1);\n    }\n\n    return parsed_music;", "    let mut beats: Vec<isize> =\
    \ Vec::new();\n\n    // TODO: implement this function\n    // Oh no! It is not\
    \ working! Try it yourself!\n    let mut current_beat = 0;\n    let mut current_note\
    \ = 0;\n\n    for _ in music_string.chars() {\n        let letter = *iter_mut(music_string).next();\n\
    \        if letter == 'o' {\n            beats.push(current_beat);\n         \
    \   current_beat = 0;\n            current_note = 0;\n        } else if letter\
    \ == 'o' {\n            current_beat += 1;\n        } else if letter == '|' {\n\
    \            current_note += 1;\n        } else if letter == '.' {\n         \
    \   current_note /= 2;\n        } else {\n            panic!(\"invalid input:\
    \ {:?}\", letter);\n        }\n    }\n    beats.push(current_beat);\n    current_beat\
    \ = 0;\n    current_note = 0;\n\n    beats", "    // We are going to parse music\
    \ string into list of notes, i.e. 'o o' -> ['o', 'o', 'o', 'o']\n    let mut notes:\
    \ Vec<String> = music_string.split(\"\").collect();\n    // We are going to make\
    \ our note count as many as music string length\n    let mut note_count: usize\
    \ = music_string.len();\n    // We are going to fill our list with zeros until\
    \ we find first note\n    let mut notes_list: Vec<isize> = notes.to_vec();\n \
    \   // We are going to fill our list with zeros until we find second note\n  \
    \  let mut notes_list_two: Vec<isize> = notes.to_vec();\n    // We are going to\
    \ keep track of how many beats last each note (note length = 4 in our example)\n\
    \    let mut beats_last_notes: Vec<isize> = notes.to_vec();\n    // We are going\
    \ to keep track of how many beats last each second note (note length = 2 in our\
    \ example)\n    let mut beats_last_notes_two: Vec<isize> = notes.to_vec();\n \
    \   // We are going to keep track of how many beats last each third note (note\
    \ length = 1 in our example)\n    let mut beats_last_notes_three: Vec<isize> =\
    \ notes.to_vec();\n    // We are going to keep track of how many beats last each\
    \ fourth note (note length = 2 in our example)\n    let mut beats_last_notes_four:\
    \ Vec<isize> = notes.to_vec();\n\n    // Iterate over each character of the string\n\
    \    for c in music_string {\n        // We are going to fill our notes list with\
    \ character itself\n        notes_list.push(c);\n        // We are going to add\
    \ 1 to our note count if we have a 'o' in this position\n        if c == 'o' {\n\
    \            note_count += 1;\n        }\n    }\n\n    // Iterate over each character\
    \ of the string\n    for c in music_string {\n        // We are going to fill\
    \ our notes list with character itself\n        notes_list_two.push(c);\n    \
    \    // We are going to add 2 to our note count if we have a 'o' in this position\n\
    \        if c == 'o' {\n            note_count += 2;\n        }\n    }\n\n   \
    \ // Iterate over each character of the string\n    for c in music_string {\n\
    \        // We are going to fill our notes list with character itself\n      \
    \  notes_list_three.push(c);\n        // We are going to add 3 to our note count\
    \ if we have a 'o' in this ", "    let mut music = music_string.split_whitespace();\n\
    \n    let mut beats: Vec<isize> = music.iter().cloned().collect();\n    let mut\
    \ last_note = -1;\n    let mut last_beat = 0;\n\n    for note in music.iter()\
    \ {\n        match note {\n            \"o\" => {\n                beats[last_beat]\
    \ = 0;\n                last_note = 0;\n            }\n            \"o|\" => {\n\
    \                beats[last_beat] = beats[last_beat] + (4 as isize);\n       \
    \         last_note = 1;\n            }\n            \".|\" => {\n           \
    \     beats[last_beat] = beats[last_beat] + (1 as isize);\n                last_note\
    \ = 2;\n            }\n            _ => {\n                println!(\"Unknown\
    \ note, skipping\");\n                continue;\n            }\n        }\n  \
    \      last_beat = last_beat * 4;\n    }\n    beats", "    // write your code\
    \ here\n    let mut beats = 0;\n    let mut notes = music_string.split(' ');\n\
    \    notes.for_each(|note|{\n        if note == \".\" || note == \"o\" {\n   \
    \         beats = 4;\n        }\n        if note == \"o|\" || note == \".|\" {\n\
    \            beats = 2;\n        }\n        if note == \"o||\" || note == \".|\"\
    \ {\n            beats = 1;\n        }\n    });\n    beats.to_vec()", "    let\
    \ mut beats: Vec<isize> = vec![];\n    let mut current_beat: isize = 0;\n    for\
    \ c in music_string.chars() {\n        match c {\n            'o' => current_beat\
    \ = 4,\n            'o|' => current_beat = 2,\n            '.|' => current_beat\
    \ = 1,\n            _ => (),\n        }\n        beats.push(current_beat);\n \
    \   }\n    beats", "    let mut beats = vec![];\n    let mut current_beat: isize\
    \ = 0;\n    let mut i = 0;\n    let mut current_note = 0;\n    let mut notes_chars\
    \ = music_string.chars();\n    while i < music_string.len() {\n        let current_char\
    \ = notes_chars.next()?;\n        match current_char {\n            'o' => current_beat\
    \ += 4,\n            'o|' => current_beat += 2,\n            '.|' => current_beat\
    \ += 1,\n            _ => {\n                beats.push(current_beat);\n     \
    \           current_beat = 0;\n                current_note += 1;\n          \
    \  }\n        }\n        i += 1;\n    }\n    beats.push(current_beat);\n    beats.clone_without_zeros()",
  "    music_string.split(' ').collect::<Vec<_>>().into_iter()\n        .map(|note|\n\
    \            note.chars().filter(|c| !c.is_ascii()).take_while(|c| c != 'o')\n\
    \                .collect::<Vec<_>>().into_iter()\n                .filter(|c|\
    \ c != 'o').count()).collect()", "    let mut notes = music_string.chars().map(|x|\
    \ x).collect();\n    notes = notes.iter().filter_map(|x| match x {\n        'o'\
    \ => Some(4),\n        'o|' => Some(2),\n        '.|' => Some(1),\n        _ =>\
    \ None,\n    }).collect();\n    notes.sort_by(|a, b| a.cmp(b));\n    notes.into_iter().map(|x|\
    \ x).collect()", "    // Write your parsing code here\n    let mut output = vec![];\n\
    \    let mut note_chars: Vec<&str> = music_string.chars().collect();\n\n    for\
    \ i in 0..music_string.len() - 4 {\n        let last_note = note_chars[i] == 'o'\
    \ || note_chars[i] == '.';\n        let note_beat_length = last_note ? 4 : 2;\n\
    \        let beats_num = *note_chars.iter()\n            .skip_while(|&x| x ==\
    \ note_chars.last().unwrap())\n            .take(note_beat_length)\n         \
    \   .count();\n        output.push(beats_num);\n    }\n    output", "    music_string.split(|&x|\
    \ !x.is_empty()).map(|x| {\n        match x {\n            \"o\" => 1,\n     \
    \       \"o|\" => 2,\n            \".|\" => 1,\n            _ => return vec![0],\n\
    \        }\n    }).sum()", "    let mut beats = Vec::new();\n    let mut note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == 'o' {\n\
    \            if note.is_empty() {\n                continue;\n            }\n\
    \            beats.push(note.len());\n            note.clear();\n            continue;\n\
    \        }\n\n        if c.is_whitespace() {\n            continue;\n        }\n\
    \n        note.push(c);\n    }\n\n    beats.push(note.len());\n    note.clear();\n\
    \    return beats;", "    music_string.split(' ').collect::<Vec<_>>().iter()\n\
    \        .map(|c| match c {\n            'o' => 1,\n            '|' => 2,\n  \
    \          '.' => 3,\n            _ => unimplemented!(),\n        })\n       \
    \ .collect::<Vec<_>>()", "    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut cur_note = 0;\n    let mut cur_beat = 0;\n    let mut last_note = music_string.chars().skip(1).next().unwrap();\n\
    \    beats.push(cur_beat);\n    if last_note == 'o' {\n        cur_note = 4;\n\
    \        cur_beat += 4;\n    }\n    beats.push(cur_beat);\n    while music_string.chars().any(|&c|\
    \ c == last_note) {\n        beats.push(cur_beat);\n        last_note = music_string.chars().skip(1).next().unwrap();\n\
    \        cur_beat++;\n        if last_note == 'o' {\n            cur_note = 4;\n\
    \            cur_beat += 4;\n        }\n        beats.push(cur_beat);\n    }\n\
    \    beats", "    let mut notes: Vec<isize> = vec![];\n    music_string.split_whitespace().for_each(|note|\
    \ {\n        if note == \".\" {\n            notes.push(4);\n        }\n     \
    \   if note == \"o\" {\n            notes.push(1);\n        }\n        if note\
    \ == \"|\" {\n            notes.push(2);\n        }\n    });\n    notes", "  \
    \  let mut music_vec = Vec::new();\n    music_vec.reserve(music_string.len());\n\
    \    let mut notes = 0;\n    let mut current_note = 0;\n    let mut note_in_chord\
    \ = 0;\n    let mut current_chord = 0;\n    for c in music_string {\n        if\
    \ c == 'o' || c == '|' || c == ' ' {\n            if notes == 0 {\n          \
    \      notes_in_chord(notes, note_in_chord);\n                notes = 0;\n   \
    \             note_in_chord = 0;\n                notes++;\n            }\n  \
    \      } else {\n            notes++;\n        }\n        if c == 'o' || c ==\
    \ '|' || c == ' ' || c == '.' {\n            notes--;\n        }\n        current_note\
    \ = notes;\n    }\n    if notes > 0 {\n        notes_in_chord(notes, note_in_chord);\n\
    \        notes = 0;\n        note_in_chord = 0;\n        notes++;\n        music_vec.push(notes);\n\
    \    }\n    return music_vec;", "    let mut beats: Vec<isize> = vec![];\n   \
    \ for c in music_string.chars() {\n        match c {\n            'o' => beats.push(4),\n\
    \            'o|' => beats.push(2),\n            '.|' => beats.push(1),\n    \
    \        _ => continue,\n        }\n    }\n    beats", "    music_string.split_whitespace()\n\
    \        .filter_map(|note| match note {\n            \"o\" => Some(4),\n    \
    \        \"o|\" => Some(2),\n            \".|\" => Some(1),\n            _ =>\
    \ None,\n        })\n        .collect()", "    let mut counter = 0;\n    let mut\
    \ beats = vec![0; 128];\n    for (note, time) in music_string.chars().zip(music_string.chars().skip(1)).zip(0..music_string.len()\
    \ - 1) {\n        if note == 'o' {\n            counter = 0;\n        }\n    \
    \    if note == 'o|' {\n            counter = 2;\n        }\n        if note ==\
    \ '.|' {\n            counter = 1;\n        }\n        if note == '.' {\n    \
    \        counter = 4;\n        }\n        if note == '|' {\n            beats[time\
    \ - 1] += 1;\n        }\n        if note == '-' {\n            beats[time - 1]\
    \ += 3;\n        }\n        if note == '+' {\n            beats[time - 1] += 1;\n\
    \        }\n        if note == '/' {\n            beats[time - 1] += 2;\n    \
    \    }\n        if note == '\\\\' {\n            beats[time - 1] += 2;\n     \
    \   }\n        if note == '#' {\n            beats[time - 1] += 2;\n        }\n\
    \        if note == 'b' {\n            beats[time - 1] += 1;\n        }\n    \
    \    if note == '%' {\n            beats[time - 1] += 1;\n        }\n        if\
    \ note == 't' {\n            beats[time - 1] += 1;\n        }\n        if note\
    \ == 'j' {\n            beats[time - 1] += 1;\n        }\n        if note == 'o'\
    \ {\n            beats[time - 1] += 1;\n        }\n    }\n    beats", "    let\
    \ mut beats: Vec<isize> = Vec::new();\n    for music_note in music_string.chars().filter(|&c|\
    \ c != '|') {\n        let music_note_index = music_string.index(music_note);\n\
    \        let music_note_length = music_note_index - music_string.len() - 1;\n\
    \        let mut beats_at_note = isize::MIN;\n\n        // if current music note\
    \ is the beginning of the line, add 0 to the beats\n        if music_note_length\
    \ == 0 {\n            beats_at_note += 0;\n            continue;\n        }\n\n\
    \        // if current music note is the end of the line, add 1 to the beats\n\
    \        if music_note_length == music_string.len() - 1 {\n            beats_at_note\
    \ += 1;\n            continue;\n        }\n\n        // if current music note\
    \ has more than one beat, count each one\n        if music_note_length != 1 {\n\
    \            for _ in 0..music_note_length {\n                beats_at_note +=\
    \ 1;\n            }\n            continue;\n        }\n\n        // if current\
    \ music note has only one beat, count it once for each beat\n        beats_at_note\
    \ += 1;\n    }\n\n    beats", "    music_string.split(|&c| match c {\n       \
    \ 'o' => 1..=4,\n        'o|' => 1..=4,\n        '.|' => 1..=4,\n        _ =>\
    \ 0\n    }).collect()", "    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut notes: Vec<&str> = music_string.split_whitespace().collect();\n    for note\
    \ in notes {\n        if note.len() == 1 {\n            result.push(1);\n    \
    \    } else {\n            let mut beats = 0;\n            let mut last_note =\
    \ true;\n            for c in note.chars().skip(1) {\n                beats +=\
    \ last_note ? 4 : 1;\n                if c != '|' && c != ' ' {\n            \
    \        break;\n                }\n                last_note = !last_note;\n\
    \            }\n            result.push(beats);\n        }\n    }\n    result",
  "    let mut beats = Vec::new();\n\n    for music_note in music_string.chars() {\n\
    \        beats.push(music_note == '.' | music_note == 'o' | music_note == 'o|');\n\
    \    }\n\n    beats", "    music_string.split(' ')\n        .map(|s| s.parse().unwrap())\n\
    \        .map(|beats| beats / 4)\n        .collect()", "    let mut beats: Vec<isize>\
    \ = music_string.chars().map(|c| {\n        let note = match c {\n           \
    \ 'o' => 0,\n            'o|' => 1,\n            '.|' => 2,\n            _ =>\
    \ panic!(\"Invalid note\"),\n        };\n        let beat = note / 4\n       \
    \     + note % 4 / 4\n            + note % 4 % 4;\n        beat as isize\n   \
    \ }).collect();\n    beats.sort_unstable();\n    beats.reverse();\n    beats",
  "    let mut beats: Vec<isize> = music_string\n        .split_whitespace()\n   \
    \     .map(|note| {\n            match note {\n                \"o\" => 0,\n \
    \               \"o|\" => 2,\n                \".|\" => 1,\n                _\
    \ => panic!(\"{} is not a musical note.\", note),\n            }\n        })\n\
    \        .collect();\n    if beats.len() % 4 != 0 {\n        panic!(\"music string\
    \ is not divisible by 4!\");\n    }\n    for i in 0..beats.len() / 4 {\n     \
    \   beats[i] = beats[i] as isize + 4;\n    }\n    beats", "    let mut music_notes:\
    \ Vec<isize> = vec![0; music_string.len()];\n    for (pos, &note) in music_string.chars().enumerate()\
    \ {\n        music_notes[pos] = if note == '.' {\n            1\n        } else\
    \ if note == '|' {\n            2\n        } else if note == 'o' {\n         \
    \   4\n        } else {\n            0\n        };\n    }\n    music_notes", " \
    \   music_string.split(' ').map(|m| {\n        match m {\n            'o' => 4,\n\
    \            'o|' => 2,\n            '.|' => 1,\n            _ => panic!(\"Unknown\
    \ music symbol: {:?}\", m),\n        }\n    }).collect()", "    let mut beats:\
    \ Vec<isize> = vec![0; 128];\n\n    let mut last_note = 0;\n    let mut last_beat\
    \ = 0;\n\n    for note in music_string.chars() {\n        if note == ' ' {\n \
    \           last_note += 1;\n            last_beat = 0;\n        } else if note\
    \ != 'o' && note != '.' {\n            if last_note == 0 {\n                beats[last_beat\
    \ as usize] += 1;\n            }\n\n            last_note += 1;\n        } else\
    \ {\n            last_beat += 1;\n        }\n    }\n\n    beats.iter().enumerate().for_each(|&b,\
    \ (&b, &b)| {\n        if b > last_beat\n            && b - last_beat > 4\n  \
    \          && b - last_beat < 8 {\n            b -= 8;\n        }\n    });\n\n\
    \    beats.iter()\n        .filter(|&b| b == 0)\n        .collect::<Vec<_>>()\n\
    \        .into_iter()\n        .take_while(|&b| b > 4)\n        .collect()", " \
    \   let music_string = music_string.trim();\n\n    let mut beats = Vec::new();\n\
    \    let mut current_beat = 0;\n\n    let mut notes = music_string.split_whitespace();\n\
    \    while let Some(note) = notes.next() {\n        note = note.to_owned();\n\n\
    \        if note == \"o\" {\n            beats.push(current_beat);\n         \
    \   current_beat += 4;\n        } else if note == \"o|\" {\n            beats.push(current_beat);\n\
    \            current_beat += 2;\n        } else if note == \".|\" {\n        \
    \    beats.push(current_beat);\n            current_beat += 1;\n        } else\
    \ {\n            return Vec::new();\n        }\n    }\n\n    beats.push(current_beat);\n\
    \    beats", "    let mut music_str = music_string.to_string();\n    music_str.replace(\"\
    o|\", \"4\").replace(\"o|\", \"2\").replace(\"o|\", \"1\").replace(\"o|\", \"\
    1\").replace(\"o|\", \"1\").replace(\"o|\", \"1\").replace(\"o|\", \"4\").replace(\"\
    o|\", \"4\").replace(\"o|\", \"4\");\n    let music_str = music_str.trim_end_matches('.');\n\
    \    music_str.chars()\n        .filter(|&c| c != '|')\n        .collect()", '    music_string.split("|").map(|s|
    s.chars().take(4).collect::<Vec<Char>>()).collect()', "    let mut notes: Vec<isize>\
    \ = music_string.split_whitespace().collect();\n    notes.sort_by_key(|x| x.chars().count());\n\
    \    notes.reverse();\n    notes", "    music_string\n        .lines()\n     \
    \   .filter_map(|line| parse_note_line(&line))\n        .collect()", "    music_string\n\
    \        .lines()\n        .map(|note| note.trim().parse::<isize>().unwrap())\n\
    \        .filter(|note| note > 0)\n        .collect()", "    let mut beats = Vec::new();\n\
    \    for note in music_string.chars().skip(1) {\n        match note {\n      \
    \      'o' | 'o|' => beats.push(4),\n            '.|' => beats.push(2),\n    \
    \        _ => {\n                let last_beat = beats[beats.len()-1] as isize;\n\
    \                let new_beat = match note {\n                    '|' => 1,\n\
    \                    'o' => 4,\n                    '.' => 2,\n              \
    \      '_' => 0,\n                };\n                if new_beat > last_beat\
    \ {\n                    beats.push(new_beat);\n                }\n          \
    \  }\n        }\n    }\n    beats", "    let mut note_vec: Vec<isize> = vec![];\n\
    \    for note in music_string.chars() {\n        let note_str = note.to_string();\n\
    \        let note_cords: Vec<isize> = note_str.chars().collect();\n        let\
    \ mut note_beat_vec: Vec<isize> = vec![];\n        for n in 0..(note_cords.len()\
    \ / 6) {\n            let beat_vec: Vec<isize> = note_cords.into_iter().filter(|&x|\
    \ x % 6 == n).collect();\n            note_beat_vec.push(beat_vec.len());\n  \
    \      }\n        note_vec.push(note_beat_vec.len());\n    }\n    return note_vec;",
  "    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\")", "    let mut music_str: Vec<String> = music_string.split_whitespace().collect();\n\
    \    music_str.sort();\n    let mut beats_counter: Vec<isize> = music_str.len()\
    \ / 4; // 4 beats per note\n    music_str.par_iter_mut().enumerate().for_each(|(i,\
    \ note)| {\n        let last_beat_index = music_str.len() - i as usize;\n    \
    \    match note {\n            \"o\" => beats_counter[last_beat_index] += 4,\n\
    \            \"o|\" => beats_counter[last_beat_index] += 2,\n            \".|\"\
    \ => beats_counter[last_beat_index] += 1,\n            _ => {},\n        }\n \
    \   });\n    beats_counter", "    let mut music_chars = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut counter: usize = 0;\n    let mut beats: Vec<isize> = vec![0; music_chars.len()];\n\
    \    let mut current_char: char;\n\n    while counter < music_chars.len() {\n\
    \        // Read char\n        current_char = music_chars[counter];\n        //\
    \ Add 1 if the char is note (0 or 1)\n        beats[counter] = if current_char\
    \ == '0' { 1 } else { 0 };\n\n        // Add 1 to the counter if the char is a\
    \ '|' char\n        if current_char == '|' {\n            counter += 1;\n    \
    \    }\n        // Else add 1 to the counter if the char is a '.' char\n     \
    \   counter += if current_char == '.' { 1 } else { 0 };\n\n        // Add 1 to\
    \ the counter if the char is a 'o' char\n        counter += if current_char ==\
    \ 'o' { 1 } else { 0 };\n\n        // Reset counter if the char is a '|' char\n\
    \        if current_char == '|' {\n            counter = 0;\n        }\n     \
    \   // Reset counter if the char is a '.' char\n        counter += if current_char\
    \ == '.' { 1 } else { 0 };\n\n        // Reset counter if the char is a 'o' char\n\
    \        counter += if current_char == 'o' { 1 } else { 0 };\n    }\n\n    beats",
  "    let mut beats_per_bar = 0;\n\n    for c in music_string.chars() {\n       \
    \ match c {\n            'o' => beats_per_bar += 4,\n            'o|' => beats_per_bar\
    \ += 2,\n            '.|' => beats_per_bar += 1,\n            _ => (),\n     \
    \   }\n    }\n\n    vec![beats_per_bar]", "    // Split the input into an array\
    \ of characters, i.e. each character in the array represents a music note\n  \
    \  let music_chars: Vec<&str> = music_string.chars().collect();\n    \n    //\
    \ Define a variable 'beats' that stores how many beats each note last for\n  \
    \  let mut beats: Vec<isize> = music_chars.len() as Vec<_>;\n\n    // Go through\
    \ each music character and calculate the number of beats\n    for character in\
    \ music_chars {\n        // If the character is an 'o' or '|', then it represents\
    \ a whole note or a half note\n        if character == 'o' || character == '|'\
    \ {\n            // If the previous character was also a 'o' or '|' then that\
    \ means the last note of last beat has\n            // completed the beat, so\
    \ update the number of beats of that note and add 1 to its position\n        \
    \    if beats[beats.len() - 1] == character {\n                beats[beats.len()\
    \ - 1] += 1;\n            } else {\n                // If not, then it is a new\
    \ note and update the count of beats\n                beats.push(1)\n        \
    \    }\n        } else {\n            // Otherwise, its a new beat and add 1 to\
    \ its position\n            beats.push(1)\n        }\n    }\n    beats", "   \
    \ let mut notes = music_string.to_string().split_whitespace();\n    let mut beats_per_note\
    \ = 0;\n    for note in notes {\n        match note.chars().next().unwrap() {\n\
    \            'o' => beats_per_note += 4,\n            '|' => beats_per_note +=\
    \ 2,\n            '.' => beats_per_note += 1,\n            _ => {} // ignore anything\
    \ else\n        }\n    }\n    notes\n        .iter()\n        .enumerate()\n \
    \       .filter(|(_, note)| note != 'o')\n        .map(|(idx, note)| {\n     \
    \       match note.chars().next().unwrap() {\n                'o' => 4,\n    \
    \            '|' => 2,\n                '.' => 1,\n                _ => 0,\n \
    \           }\n        })\n        .sum()", "    let music_list = music_string.split_whitespace();\n\
    \    let mut beats_per_note = vec![];\n    for music in music_list {\n       \
    \ if music.len() == 1 {\n            beats_per_note.push(0);\n        } else {\n\
    \            beats_per_note.push(music.len() * 4);\n        }\n    }\n    beats_per_note",
  "    let mut result = vec![0; music_string.len()];\n    let mut last_beat = 0;\n\
    \    for c in music_string.chars() {\n        match c {\n            'o' => {\n\
    \                let last_beat = last_beat * 4 + 4;\n                result.push(last_beat);\n\
    \            }\n            'o|' => {\n                let last_beat = last_beat\
    \ * 4 + 2;\n                result.push(last_beat);\n            }\n         \
    \   '.|' => {\n                let last_beat = last_beat;\n                result.push(last_beat);\n\
    \            }\n            _ => (),\n        }\n    }\n    result", "    let\
    \ mut note_counts = vec![];\n    let mut note_to_beats = vec![];\n    let mut\
    \ beats_since_last_note = vec![];\n    let mut current_note = 0;\n    let mut\
    \ current_note_is_longer = false;\n    let mut current_note_length = 1;\n\n  \
    \  for music_note in music_string.chars().filter(|&c| c != '|') {\n        note_counts.push(0);\n\
    \        note_to_beats.push(current_note);\n        beats_since_last_note.push(0);\n\
    \        current_note += 1;\n        current_note_is_longer = false;\n       \
    \ current_note_length = 1;\n\n        if c == 'o' {\n            current_note_is_longer\
    \ = true;\n        }\n    }\n\n    note_to_beats.sort();\n\n    for (i, note_to_beat)\
    \ in note_to_beats.iter().enumerate() {\n        if note_counts[i] != 0 {\n  \
    \          note_counts[i] += 1;\n            if note_counts[i] == 4 {\n      \
    \          beats_since_last_note.push(4);\n            } else {\n            \
    \    beats_since_last_note.push(beats_since_last_note[note_to_beat - 1] + 1);\n\
    \            }\n        }\n    }\n\n    beats_since_last_note", "    let mut note_count\
    \ = music_string.chars().enumerate().map(|(n, _)| {\n        let mut beats = 1;\n\
    \        let mut last_note = Some(n);\n        loop {\n            let n = last_note.unwrap_or(n);\n\
    \            last_note = Some(n);\n            beats *= 4;\n            if n >\
    \ music_string.len() {\n                break;\n            }\n            if\
    \ music_string[n - 1] == '|' {\n                beats *= 2;\n            }\n \
    \       }\n        beats\n    }).collect::<Vec<_>>();\n    note_count = note_count.into_iter().map(|n|\
    \ n).collect::<Vec<_>>();\n    note_count", "    let mut beats = vec![];\n   \
    \ let mut notes = music_string.chars().enumerate();\n    for mut (_, note) in\
    \ notes.by_ref().take(music_string.len()) {\n        if note == 'o' || note ==\
    \ '.' {\n            beats.push(music_string.len() - note);\n        }\n    }\n\
    \    beats", "    let mut beats: Vec<isize> = Vec::new();\n    let mut current_beat_length\
    \ = 0;\n    let mut current_note = 0;\n\n    for ch in music_string {\n      \
    \  if ch == ' ' {\n            beats.push(current_beat_length);\n            current_beat_length\
    \ = 0;\n            current_note = 0;\n        } else {\n            current_beat_length\
    \ += 1;\n            match ch {\n                'o' => current_note += 1,\n \
    \               '|' => current_note += 2,\n                '.' => current_note\
    \ += 4,\n                '<' => current_note += 8,\n                '(' if ch\
    \ == '-' => {\n                    current_note -= 8;\n                    current_beat_length\
    \ -= 8;\n                },\n                _ => {\n                    current_note\
    \ += 1;\n                    current_beat_length += 1;\n                }\n  \
    \          }\n        }\n    }\n\n    beats.push(current_beat_length);\n\n   \
    \ beats", "    let mut beats = vec![];\n    let mut note = String::new();\n  \
    \  let mut last = false;\n    let mut last_beat = String::new();\n    let mut\
    \ i = 1;\n    while i < music_string.len() {\n        let c = music_string.chars()\n\
    \            .find(|&c| c.is_ascii() && c == music_string[i])\n            .unwrap();\n\
    \        if c == ' ' || c == '\\n' || c == '\\t' {\n            note.clear();\n\
    \            last = false;\n            i += 1;\n            continue;\n     \
    \   }\n        if c == 'o' || c == '|' {\n            last = true;\n        }\n\
    \        if c == '|' && !last {\n            beat_count(&music_string, i, &mut\
    \ beats);\n            i += 1;\n            continue;\n        }\n        note.push(c);\n\
    \        i += 1;\n        last_beat.push(c);\n    }\n    beat_count(&music_string,\
    \ i, &mut beats);\n    beats", "    let mut beats: Vec<isize> = music_string.trim().split('|').map(|x|\
    \ x.parse().unwrap()).collect();\n\n    for i in 0..beats.len() {\n        if\
    \ beats[i] % 4 == 0 {\n            beats[i] = beats[i] * 4;\n        }\n    }\n\
    \    return beats;", "    let mut beats: Vec<isize> = vec![];\n    for note in\
    \ music_string.chars().filter(|c| c.is_ascii()) {\n        let mut current_beat:\
    \ isize = 1;\n        if note == 'o' {\n            current_beat = 4;\n      \
    \  } else if note == 'o|' {\n            current_beat = 2;\n        } else if\
    \ note == '.|' {\n            current_beat = 1;\n        }\n        beats.push(current_beat);\n\
    \    }\n    beats", "    let mut notes: Vec<isize> = vec![];\n    music_string.split(\"\
    \").iter().for_each(|c| {\n        if c == 'o' {\n            notes.push(4);\n\
    \        } else if c == '|' {\n            notes.push(2);\n        } else if c\
    \ == '.' {\n            notes.push(1);\n        } else {\n            notes.push(0);\n\
    \        }\n    });\n    notes", "    let mut output = Vec::new();\n    let mut\
    \ current_note = 0;\n    let mut notes = music_string.split_whitespace();\n  \
    \  for i in 0..music_string.len() {\n        let n = notes[i].chars().next().unwrap();\n\
    \        let beats = match n.to_string().as_str() {\n            \"o\" => 4,\n\
    \            \"o|\" => 2,\n            \".|\" => 1,\n            _ => panic!(),\n\
    \        };\n        if current_note == 0 {\n            output.push(beats * 4\
    \ as isize);\n        } else {\n            output[current_note - 1] += beats\
    \ as isize;\n        }\n        current_note = n;\n    }\n    output", "    music_string\n\
    \        .trim()\n        .split_whitespace()\n        .map(|note| note.chars().enumerate().filter(|(_,\
    \ ch)| ch == 'o').count())\n        .collect()", "    music_string.chars()\n \
    \       .enumerate()\n        .map(|(idx, c)| {\n            match c {\n     \
    \           '.' => 0,\n                '|' => 1,\n                'o' => idx %\
    \ 4 as isize,\n                _ => 0,\n            }\n        })\n        .collect()",
  "    let mut beats = Vec::new();\n    let mut current_beat = 0;\n\n    for note\
    \ in music_string.chars() {\n        match note {\n            'o' => beats.push(current_beat);\n\
    \            'o|' => beats.push(current_beat / 2);\n            '.|' => beats.push(current_beat\
    \ / 4);\n            _ => {}\n        }\n\n        if note == '.' {\n        \
    \    beats.push(0);\n        }\n\n        current_beat++;\n    }\n\n    beats",
  "    let mut beats = vec![];\n    for (i, ch) in music_string.chars().enumerate()\
    \ {\n        let beat = match ch {\n            '.' => {\n                if beats.len()\
    \ == 0 {\n                    beats.push(4);\n                } else {\n     \
    \               beats[beats.len() - 1] += 1;\n                }\n            \
    \    continue;\n            }\n            '|' => {\n                if beats.len()\
    \ == 0 {\n                    beats.push(2);\n                } else {\n     \
    \               beats[beats.len() - 1] += 1;\n                }\n            \
    \    continue;\n            }\n            c if c == ' ' => {\n              \
    \  if beats.len() == 0 {\n                    beats.push(1);\n               \
    \ } else {\n                    beats[beats.len() - 1] += 1;\n               \
    \ }\n            }\n            _ => {\n                if beats.len() == 0 {\n\
    \                    beats.push(1);\n                } else {\n              \
    \      beats[beats.len() - 1] += 1;\n                }\n            }\n      \
    \  };\n        beats.push(beat);\n    }\n    beats", "    music_string\n     \
    \   .lines()\n        .filter_map(|x| x.chars().map(|c| match c {\n          \
    \  ' ' => 0,\n            'o' => 0,\n            '|' => 1,\n            '.' =>\
    \ 2,\n            _ => unreachable!(\"Unrecognised character {:?}\", c),\n   \
    \     }))\n        .collect()", "    let mut beats_to_notes_map: HashMap<String,\
    \ Vec<isize>> = HashMap::new();\n    for note in music_string.chars() {\n    \
    \    match note {\n            'o' => {\n                beats_to_notes_map.insert(\n\
    \                    String::from(note as char),\n                    vec![i32::from(i32::from(1))],\n\
    \                );\n            }\n            'o|' => {\n                beats_to_notes_map.insert(\n\
    \                    String::from(note as char),\n                    vec![i32::from(i32::from(1)),\
    \ i32::from(i32::from(4))],\n                );\n            }\n            '.|'\
    \ => {\n                beats_to_notes_map.insert(\n                    String::from(note\
    \ as char),\n                    vec![i32::from(i32::from(1))],\n            \
    \    );\n            }\n            _ => {\n                println!(\"Invalid\
    \ note: {:?}\", note);\n                panic!(\"Invalid note\");\n          \
    \  }\n        }\n    }\n    beats_to_notes_map.iter().map(|(_, beats)| beats).collect()",
  "    let mut beats: Vec<isize> = music_string.trim().split_whitespace().collect();\n\
    \    let mut note_count = 0;\n    for note in music_string.trim().split_whitespace()\
    \ {\n        if note.chars().all(|c| c == 'o') {\n            note_count += 4;\n\
    \        } else if note.chars().all(|c| c == 'o|') {\n            note_count +=\
    \ 2;\n        } else if note.chars().all(|c| c == '.|') {\n            note_count\
    \ += 1;\n        }\n    }\n    beats.push(note_count);\n    beats", "    music_string\n\
    \        .chars()\n        .filter(|c| c.is_ascii())\n        .filter_map(|c|\
    \ {\n            if c == 'o' {\n                Some(4)\n            } else if\
    \ c == 'o|' {\n                Some(2)\n            } else if c == '.|' {\n  \
    \              Some(1)\n            } else {\n                None\n         \
    \   }\n        })\n        .collect()", "    let mut music_notes = music_string.to_string().into_bytes();\n\
    \    let mut beats = Vec::new();\n    let mut current_beat = 0;\n    let mut last\
    \ = false;\n\n    music_notes.iter().for_each(|b|\n        if b == b'|' {\n  \
    \          last = true;\n            current_beat = 1;\n        } else if !last\
    \ {\n            beats.push(current_beat);\n            current_beat = 1;\n  \
    \      } else {\n            current_beat += 1;\n        }\n    );\n\n    beats",
  "    let mut beats: Vec<isize> = Vec::new();\n    let mut current_note = 0;\n  \
    \  let mut note_length = -1;\n\n    for letter in music_string.chars() {\n   \
    \     match letter {\n            '.' => {\n                note_length = -2;\n\
    \                beats.truncate(beats.len() - 1);\n                beats.push(isize::MAX);\n\
    \                current_note = 0;\n            }\n            '|' => {\n    \
    \            note_length = -1;\n                beats.truncate(beats.len() - 1);\n\
    \                beats.push(isize::MAX);\n                current_note = 0;\n\
    \            }\n            'o' => {\n                beats.truncate(beats.len()\
    \ - 1);\n                beats.push(isize::MAX);\n                current_note\
    \ = 0;\n            }\n            'o|' => {\n                beats.truncate(beats.len()\
    \ - 1);\n                beats.push(isize::MAX);\n                current_note\
    \ = 1;\n            }\n            _ => {\n                let beats_to_add =\
    \ if note_length == -1 {\n                    4\n                } else if note_length\
    \ == -2 {\n                    2\n                } else {\n                 \
    \   1\n                };\n                beats.append(beats.len() * beats_to_add);\n\
    \                beats.push(isize::MAX);\n                current_note = 0;\n\
    \                note_length = -1;\n            }\n        }\n\n        beats[current_note\
    \ as usize] += 1;\n    }\n\n    beats", "    let mut notes = music_string.to_string().chars().enumerate().map(|(_,\
    \ n)| n.to_string());\n    let mut beats = Vec::new();\n    let mut offset = 0;\n\
    \    while offset < music_string.len() {\n        match notes.next() {\n     \
    \       None => break,\n            Some((note, beat)) => {\n                notes.remove(note);\n\
    \                beats.append(beat);\n                offset += beat.len() as\
    \ isize;\n            }\n        }\n    }\n    beats", "    music_string.split(\"\
    \ \").filter_map(|&note| {\n        let note_to_beats: Vec<isize> = note.chars().enumerate().filter(|&(_,\
    \ note)| note == 'o').collect();\n        note_to_beats.iter().map(|i| i.1.to_usize())\n\
    \    }).collect()", "    music_string.chars()\n        .filter(|c| c.is_ascii())\n\
    \        .filter(|c| c != '|')\n        .filter(|c| c != 'o')\n        .filter(|c|\
    \ !c.is_whitespace())\n        .filter(|c| !c.is_whitespace())\n        .map(|c|\
    \ if c == 'o' {\n            4 // whole note, lasts four beats\n        } else\
    \ if c == '|' {\n            2 // half note, lasts two beats\n        } else {\n\
    \            1 // quater note, lasts one beat\n        })\n        .collect()",
  "    // Implement here\n    let mut num_beat_vec: Vec<isize> = Vec::new();\n   \
    \ num_beat_vec.push(4);\n    let mut current_beat = 4;\n    for c in music_string\
    \ {\n        match c {\n            'o' => num_beat_vec.push(current_beat),\n\
    \            'o|' => num_beat_vec.push(current_beat),\n            '.|' => num_beat_vec.push(current_beat),\n\
    \            _ => num_beat_vec.push(current_beat),\n        }\n        current_beat++;\n\
    \    }\n    return num_beat_vec;", "    let mut beats: Vec<isize> = Vec::new();\n\
    \    let mut last: Option<char> = None;\n    for (index, char) in music_string.chars().enumerate()\
    \ {\n        if char == '|' {\n            if last.is_some() {\n             \
    \   beats.push(beats.last().unwrap());\n            }\n            beats.push(1);\n\
    \            last = Some('|');\n        } else {\n            beats.push(0);\n\
    \            last = Some(char);\n        }\n    }\n    beats.push(beats.last().unwrap());\n\
    \    beats", "    let mut counter: Vec<isize> = vec![];\n    for n in music_string.chars().map(|c|\
    \ {\n        if c == 'o' || c == 'O' {\n            counter.push(4);\n       \
    \ } else {\n            counter.push(1);\n        }\n    }) {\n        if counter.last().unwrap()\
    \ == 4 {\n            counter.pop();\n        }\n    }\n    counter // [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4]", "    let mut beats: Vec<isize> = Vec::new();\n\
    \    music_string\n        .split_whitespace()\n        .filter(|&c| !c.is_ascii())\n\
    \        .for_each(|c| {\n            if c == 'o' {\n                beats.push(4);\n\
    \            } else {\n                let beats = match c {\n               \
    \     'o' | 'o|' => 2,\n                    '.|' => 1,\n                    _\
    \ => panic!(\"Invalid music string: {}\", c),\n                };\n          \
    \      beats.push(beats);\n            }\n        });\n    beats", "    let mut\
    \ beats = Vec::new();\n    let mut last_note = String::new();\n    let mut last_beat\
    \ = 0;\n    let mut last_duration = 0;\n    for note in music_string.chars().filter_map(|c|\
    \ match c {\n        'o' => Some(0),\n        'o|' => Some(2),\n        '.|' =>\
    \ Some(1),\n        _ => None,\n    }) {\n        if note.is_empty() {\n     \
    \       continue;\n        }\n\n        let duration = note[0] as usize;\n\n \
    \       if duration > last_duration {\n            beats.push(last_beat);\n  \
    \          last_beat = 0;\n        }\n\n        last_duration = duration;\n\n\
    \        let beat = beat.checked_add(duration) as isize;\n        last_beat =\
    \ beat;\n\n        if note[1] == 'o' {\n            last_note = note;\n      \
    \  }\n    }\n\n    beats.push(last_beat);\n\n    beats", "    let mut intervals\
    \ = Vec::new();\n    let mut music_iter = music_string.chars();\n    music_iter.for_each(|music_char|\
    \ {\n        match music_char {\n            'o' => intervals.push(4),\n     \
    \       'o|' => intervals.push(2),\n            '.|' => intervals.push(1),\n \
    \           _ => {\n                let interval = music_iter.position();\n  \
    \              intervals.push(interval - music_iter);\n            }\n       \
    \ }\n    });\n    intervals", "    music_string\n        .lines()\n        .map(|line|\
    \ {\n            line.split(' ')\n                .iter()\n                .filter(|char|\
    \ !char.is_whitespace())\n                .enumerate()\n                .filter(|(i,\
    \ _)| i >= 3)\n                .map(|(i, note)| {\n                    let last_index\
    \ = i - 2;\n                    let count = note\n                        .trim_start()\n\
    \                        .chars()\n                        .filter(|c| c.is_ascii_letter())\n\
    \                        .count() as usize;\n                    match note {\n\
    \                        \"o\" | \"o|\" => 1,\n                        \".|\"\
    \ => 1,\n                        _ => 0,\n                    }\n            \
    \        last_index * 4 + count,\n                })\n                .sum()\n\
    \        })\n        .collect()", "    let mut notes = music_string.split_whitespace();\n\
    \    notes.retain(|&note| note != \"o\" && note != \"|\" && note != \".\");\n\
    \    let mut beats = notes.iter().filter(|&note| note == \"o\").count();\n   \
    \ for note in notes.iter().filter(|&note| note == \"|\").cloned() {\n        beats\
    \ *= 2;\n    }\n    for note in notes.iter().filter(|&note| note == \".\").cloned()\
    \ {\n        beats = 1;\n    }\n    beats", "    let mut beats = vec![];\n   \
    \ let mut last_beat_length = 0;\n    let mut last_beat_num = 0;\n    for c in\
    \ music_string.chars() {\n        match c {\n            'o' => beats.push(4),\n\
    \            'o|' => beats.push(2),\n            '.|' => beats.push(1),\n    \
    \        _ => {}\n        }\n        match c {\n            '.' => last_beat_length\
    \ += 1,\n            '|' => last_beat_num += 1,\n            _ => {}\n       \
    \ }\n    }\n    beats", "    let mut notes = Vec::new();\n    let music_length\
    \ = music_string.len();\n    let mut music_counter = 0;\n    let mut last_note_length\
    \ = 0;\n    for c in music_string {\n        if c == 'o' {\n            if music_counter\
    \ > 0 {\n                notes.push(music_counter);\n                music_counter\
    \ += 4;\n            }\n            last_note_length = 4;\n        } else if c\
    \ == 'o|' {\n            if music_counter > 0 {\n                notes.push(music_counter);\n\
    \                music_counter += 2;\n            }\n            last_note_length\
    \ = 2;\n        } else if c == '.|' {\n            if music_counter > 0 {\n  \
    \              notes.push(music_counter);\n                music_counter++;\n\
    \            }\n            last_note_length = 1;\n        } else {\n        \
    \    // If none of the above was found, we just add last note length.\n      \
    \      notes.push(last_note_length);\n            last_note_length = 0;\n    \
    \        music_counter = 0;\n        }\n    }\n    notes", "    music_string\n\
    \        .split_whitespace()\n        .filter_map(|x| x.parse::<isize>().ok())\n\
    \        .collect()", "    let mut music_char_array: Vec<u8> = Vec::with_capacity(music_string.len());\n\
    \    music_string.as_bytes().for_each(|c| music_char_array.push(c));\n    let\
    \ music_char_array_len = music_char_array.len();\n    let mut beats_per_note =\
    \ 0;\n    let mut music_char_array_iter = music_char_array.iter();\n    let mut\
    \ music_char_array_ptr = music_char_array_iter as *const u8;\n    let mut music_char_array_end\
    \ = music_char_array_iter as *const u8;\n    let mut music_char_array_ptr_end\
    \ = music_char_array_end;\n    while music_char_array_ptr != music_char_array_end\
    \ {\n        let music_char_array_ptr_next = music_char_array_ptr.offset(1);\n\
    \        let music_char_array_ptr_next_2 = music_char_array_ptr_next.offset(1);\n\
    \        if *music_char_array_ptr == b'|' {\n            beats_per_note += 1;\n\
    \            if music_char_array_ptr_next != music_char_array_end {\n        \
    \        beats_per_note += 1;\n                if music_char_array_ptr_next_2\
    \ != music_char_array_end {\n                    beats_per_note += 1;\n      \
    \          }\n            }\n        } else {\n            if music_char_array_ptr_next\
    \ != music_char_array_end {\n                beats_per_note += 1;\n          \
    \  }\n        }\n        music_char_array_ptr += 1;\n    }\n    let music_char_array_ptr_end_2\
    \ = music_char_array_end.offset(1);\n    if music_char_array_ptr_end_2 != music_char_array_end\
    \ {\n        beats_per_note += 1;\n    }\n    beats_per_note += music_char_array_len\
    \ - music_char_array_array_len;\n    let mut music_char_array_array_len = music_char_array_len\
    \ / beats_per_note;\n    let mut music_char_array_array_ptr = music_char_array_ptr.offset(1);\n\
    \    let mut music_char_array_array_end = music_char_array_array_ptr + music_char_array_array_len;\n\
    \    let mut music_char_array_array_ptr_end = music_char_array_array_end;\n  \
    \  let mut music_char_array_array_ptr_end_2 = music_char_array_array_end.offset(1);\n\
    \    while music_char_array_array_ptr != music_char_array_array_end {\n      \
    \  let music_char_array_array_ptr_next = music_char_array_array_ptr.offset(1);\n\
    \        let music_char_array_array_ptr_next_2 = music_char_", "    let mut music_notes:\
    \ Vec<isize> = music_string\n        .split_whitespace()\n        .filter(|c|\
    \ !c.is_empty())\n        .collect();\n\n    let mut beats_per_pitch = music_notes.len()\
    \ / 12; // 12 notes per pitch\n    // If number of notes is not an even number\
    \ of 12, the last note may be of a different pitch\n    if music_notes.len() %\
    \ 12 != 0 {\n        music_notes.push(0);\n        beats_per_pitch += 1;\n   \
    \ }\n\n    for note in music_notes {\n        note /= 12;\n        if note < 4\
    \ {\n            note += 1;\n        }\n        music_notes.insert(music_notes.iter().position(|&x|\
    \ x == note).unwrap() + 1, note);\n    }\n\n    music_notes", "    music_string.split(|x|\
    \ *x)\n        .filter_map(|note| match note {\n            \"o\" => Some(4),\n\
    \            \"o|\" => Some(2),\n            \".|\" => Some(1),\n            _\
    \ => None,\n        })\n        .collect()", "    let mut beats_vec: Vec<isize>\
    \ = vec![];\n    let mut music_vec = music_string.chars().map(|c| match c {\n\
    \        'o' => 4,\n        'o|' => 2,\n        '.|' => 1,\n        _ => 0,\n\
    \    }).collect::<Vec<_>>();\n    for i in 0..music_vec.len() {\n        beats_vec.push(music_vec[music_vec.len()\
    \ - 1 - i]);\n    }\n    return beats_vec;", "    music_string.chars().collect::<Vec<&str>>().iter().enumerate().filter(|&(i,\
    \ &note)| note == 'o' || note == '.' || note == '|').map(|(i, note)| (*i + 1)\
    \ * (note.len() / 4))", "    // Use regex to parse musical notes. \"([^\\|\\.]|\\\
    \\\\|[^\\.])\" means any string that doesn't include a dot or pipe or doesn't\
    \ include a pipe or dot\n    let music_pattern = \"([^\\|\\.]|\\\\\\|[^\\.])\"\
    .to_string();\n    let music_pat = Regex::new(&music_pattern).unwrap();\n\n  \
    \  // This regex will capture the lasts beats number of the notes, including decimal\
    \ number\n    let music_beat_numbers_pattern = \"[+-]?(0|[1-9]\\d*)(\\.\\d*)?\"\
    .to_string();\n    let music_beat_numbers_pat = Regex::new(&music_beat_numbers_pattern).unwrap();\n\
    \n    let music_notes = music_pat.captures_iter(music_string.clone()).collect::<Vec<_>>();\n\
    \    // Collect all notes beats numbers into one array\n    let mut music_beats_numbers:\
    \ Vec<isize> = music_notes.iter().map(|note|\n        // Use regex to capture\
    \ the beats number in the note, excluding decimal number\n        music_beat_numbers_pat.capture(note).unwrap().as_str().parse().unwrap()).collect();\n\
    \n    // Use map to calculate the number of beats for each note\n    music_beats_numbers.map(|note|\
    \ note / 4 as isize)", "    let mut notes = Vec::<isize>::new();\n    music_string\n\
    \        .lines()\n        .filter_map(|line| line.chars().take_while(|c| !c.is_whitespace()))\n\
    \        .for_each(|line| notes.push(line.count()));\n    notes", "    music_string\n\
    \        .chars()\n        .filter_map(|c| match c {\n            'o' => 1,\n\
    \            'o|' => 4,\n            '.|' => 2,\n            _ => 0,\n       \
    \ })\n        .collect()", "    let mut beat_counts: Vec<isize> = Vec::new();\n\
    \n    for c in music_string {\n        if c == 'o' {\n            beat_counts.push(4);\n\
    \        } else if c == 'o|' {\n            beat_counts.push(2);\n        } else\
    \ if c == '.|' {\n            beat_counts.push(1);\n        } else {\n       \
    \     panic!(\"music string error\");\n        }\n    }\n\n    return beat_counts;",
  "    let mut beats: Vec<isize> = vec![];\n    let mut current_beat = 0;\n    for\
    \ c in music_string.chars() {\n        let c_str = match c {\n            'o'\
    \ => \"1\",\n            'o|' => \"2\",\n            'o|' => \"1\",\n        \
    \    '.|' => \"4\",\n            _ => return beats,\n        };\n\n        let\
    \ beats_per_letter = c_str.len() as isize / 4;\n        let n_beats = c_str.len()\
    \ / beats_per_letter;\n        for i in 0..n_beats {\n            beats.push(current_beat\
    \ + (i * beats_per_letter));\n        }\n\n        current_beat += n_beats;\n\
    \    }\n    beats", "    let mut intervals = Vec::new();\n    for c in music_string\
    \ {\n        let mut interval = c.to_ascii_digit().parse();\n        if interval\
    \ == None {\n            println!(\"The string '{}' does not represent a musical\
    \ note!\", c);\n            return None;\n        }\n        // Check whether\
    \ we are in the 'o|' interval\n        if interval == 0 || interval == 3 {\n \
    \           intervals.push(interval);\n        } else {\n            intervals.pop();\n\
    \        }\n    }\n    intervals", "    let mut beats_per_note = vec![];\n   \
    \ let mut note_count = vec![];\n    for (i, note) in music_string.chars().enumerate()\
    \ {\n        note_count[i] = 0;\n        let mut note_index = 0;\n        let\
    \ note_char = note.to_char();\n        let mut note_end = false;\n        if note_char\
    \ == u'o' {\n            for _ in 0..4 {\n                beats_per_note.push(note_count[note_index]);\n\
    \                note_index += 1;\n            }\n            note_end = true;\n\
    \        } else if note_char == u'|' {\n            for _ in 0..2 {\n        \
    \        beats_per_note.push(note_count[note_index]);\n                note_index\
    \ += 1;\n            }\n            note_end = true;\n        } else if note_char\
    \ == u'.' {\n            beats_per_note.push(note_count[note_index]);\n      \
    \      note_index += 1;\n        }\n        if !note_end {\n            note_count.push(0);\n\
    \        } else {\n            note_count.push(beats_per_note.len() - note_count[note_index]);\n\
    \        }\n    }\n    beats_per_note", "    music_string.chars().filter_map(|&c|\
    \ match c {\n        'o' => Some(4),\n        '|' => Some(2),\n        _ => None,\n\
    \    }).collect()", "    let mut beats = Vec::new();\n    for note in music_string.chars()\
    \ {\n        match note {\n            'o' => beats.push(4),\n            'o|'\
    \ => beats.push(2),\n            '.|' => beats.push(1),\n            _ => (),\n\
    \        }\n    }\n    beats", '    // parse notes and beats from music_string
    and return', "    let music_string = music_string.to_string();\n    let mut beats\
    \ = Vec::new();\n    music_string.chars()\n        .filter_map(|c| {\n       \
    \     match c {\n                'o' => { // whole note, lasts 4 beats\n     \
    \               beats.push(4);\n                    Some(true)\n             \
    \   }\n                'o|' => { // half note, lasts 2 beats\n               \
    \     beats.push(2);\n                    Some(true)\n                }\n    \
    \            '.|' => { // quater note, lasts 1 beat\n                    beats.push(1);\n\
    \                    Some(true)\n                }\n                _ => Some(false)\n\
    \            }\n        })\n        .collect()", "    let mut beats: Vec<isize>\
    \ = vec![];\n    let music_string = music_string.chars().collect::<String>();\n\
    \    let mut current_note = music_string[0];\n    let current_beat = 0;\n    for\
    \ note in music_string.chars().skip(1).take(music_string.len() - 1).cloned() {\n\
    \        let note_len = note.chars().count(|c| c == 'o');\n        note.chars().skip(note_len\
    \ - 1).for_each(|c| {\n            if c == '|' {\n                beats.push(current_beat);\n\
    \                current_beat += 1;\n            } else {\n                current_note\
    \ += c;\n                current_beat = 1;\n            }\n        });\n    }\n\
    \    beats.push(current_beat);\n    beats", "    let music_string_len = music_string.len();\n\
    \    let mut beats_per_bar = vec![0; music_string_len];\n\n    let mut current_beat\
    \ = 0;\n    let mut current_beat_has_quarter_note = false;\n    let mut current_beat_has_half_note\
    \ = false;\n    let mut current_beat_has_whole_note = false;\n\n    for i in music_string.chars()\
    \ {\n        let ascii_char = i.to_ascii_lowercase();\n\n        // '.' is a special\
    \ case\n        if ascii_char == \".\" {\n            beats_per_bar[i] = 0;\n\
    \            current_beat_has_quarter_note = true;\n            current_beat_has_whole_note\
    \ = true;\n            current_beat++;\n            continue;\n        }\n\n \
    \       match ascii_char {\n            \"o\" | \"O\" => {\n                beats_per_bar[i]\
    \ = current_beat + 4;\n                current_beat_has_whole_note = false;\n\
    \                current_beat++;\n                current_beat_has_whole_note\
    \ = true;\n            }\n            \"|\" => {\n                beats_per_bar[i]\
    \ = current_beat + 2;\n                current_beat_has_whole_note = false;\n\
    \                current_beat++;\n                current_beat_has_whole_note\
    \ = true;\n            }\n            \".\" => {\n                if current_beat_has_quarter_note\
    \ {\n                    beats_per_bar[i] = current_beat + 1;\n              \
    \      current_beat++;\n                } else {\n                    if current_beat_has_half_note\
    \ {\n                        beats_per_bar[i] = current_beat;\n              \
    \          current_beat++;\n                    } else {\n                   \
    \     beats_per_bar[i] = 1;\n                    }\n                }\n      \
    \          current_beat_has_whole_note = true;\n            }\n            _ =>\
    \ {\n                beats_per_bar[i] = 1;\n            }\n        }\n    }\n\n\
    \    // TODO: Find out why this isn't needed here\n    // if beats_per_bar.iter().sum()\
    \ != music_string_len {\n    //     let mut bar = Vec::with_capacity(music_string_len);\n\
    \    //     for i in music_string_len - beats_per_bar.iter().sum() {\n    // \
    \        bar.push(0);\n    //     }\n    //     beats_per_bar.push(bar.to_owned());\n\
    \    // }\n    beats_per_bar", "    let mut beats: Vec<isize> = vec![];\n\n  \
    \  music_string\n        .lines()\n        .map(|line| {\n            let mut\
    \ beat = 0;\n            let mut note = match line.chars().nth(1) {\n        \
    \        None => return,\n                Some(c) => {\n                    if\
    \ c == '|' || c == 'o' {\n                        note = c as u8;\n          \
    \          }\n                    beat += 1;\n                }\n            };\n\
    \n            while note != 0 {\n                beats.push(beat);\n         \
    \       note -= 1;\n            }\n        })\n        .collect::<Vec<_>>()",
  "    let mut beats = Vec::new();\n    let mut notes_found = 0;\n    for c in music_string\
    \ {\n        if c == 'o' {\n            notes_found += 1;\n        } else if c\
    \ == '|' {\n            beats.push(notes_found);\n            notes_found = 0;\n\
    \        } else {\n            notes_found += 1;\n        }\n    }\n    beats.push(notes_found);\n\
    \    beats", "    let mut beats = Vec::new();\n    let mut current_note = MusicalNote::C;\n\
    \    for character in music_string.chars() {\n        if character == 'o' {\n\
    \            current_note = MusicalNote::C;\n            beats.push((4 - beats.len())\
    \ as isize);\n        } else if character == 'o|' {\n            current_note\
    \ = MusicalNote::D;\n            beats.push((2 - beats.len()) as isize);\n   \
    \     } else if character == '.|' {\n            current_note = MusicalNote::E;\n\
    \            beats.push((1 - beats.len()) as isize);\n        } else {\n     \
    \       // We have a musical note - add note length\n            beats.push(current_note.beats());\n\
    \            // We have another musical note\n            current_note = MusicalNote::C\
    \ if character == '.';\n        }\n    }\n    beats", '    // implement this function',
  "    let mut beats = Vec::new();\n\n    for (index, char) in music_string.chars().enumerate()\
    \ {\n        if char == ' ' {\n            beats.push(index / 4);\n        } else\
    \ {\n            beats.push(index);\n        }\n    }\n\n    beats", "    let\
    \ mut beats: Vec<isize> = Vec::new();\n\n    let mut current_note = music_string.chars().next().unwrap();\n\
    \    while current_note != \".\" && current_note != \" \" {\n        beats.push(current_note\
    \ as isize);\n\n        if current_note == \"|\" {\n            let note = music_string.chars().next().unwrap();\n\
    \            beats.push(note as isize);\n        }\n\n        current_note = music_string.chars().next().unwrap();\n\
    \    }\n\n    beats", "    music_string.split(\" \").collect::<Vec<_>>()\n   \
    \     .filter(|&x| !x.starts_with('.'))\n        .filter(|&x| !x.contains('|'))\n\
    \        .map(|x| x.chars().take_while(|&x| x != 'o').count())\n        .collect()",
  "    let mut result = vec![];\n\n    let mut prev_beat = 0;\n    let mut curr_beat\
    \ = 0;\n\n    music_string.split(\" \").iter().for_each(|note| {\n        let\
    \ note = note.to_ascii_lowercase();\n\n        if note == \"o\" {\n          \
    \  result.append(curr_beat);\n            prev_beat = curr_beat;\n           \
    \ curr_beat = 0;\n        }\n\n        let beats_count = note.chars().filter(|&c|\
    \ c != '|').count() + 1;\n\n        if note[1] == '|' {\n            result.append(beats_count);\n\
    \            prev_beat = curr_beat;\n            curr_beat = 0;\n        } else\
    \ {\n            curr_beat += beats_count - 1;\n        }\n    });\n\n    result",
  "    let mut notes: Vec<isize> = Vec::new();\n    for music_char in music_string\
    \ {\n        if music_char == '.' {\n            let beats = notes.len() / 4;\n\
    \            notes.push(beats);\n        } else if music_char == 'o' {\n     \
    \       let beats = notes.len() / 4;\n            notes.push(beats);\n       \
    \ } else if music_char == '|' {\n            let beats = notes.len() / 2;\n  \
    \          notes.push(beats);\n        } else if music_char == 'o|' {\n      \
    \      let beats = notes.len() / 2;\n            notes.push(beats);\n        }\
    \ else {\n            notes.push(1);\n        }\n    }\n    notes", "    let mut\
    \ beats_per_beat: isize = 64;\n    let mut notes: Vec<isize> = music_string.to_string().chars().enumerate().filter(|(_,\
    \ char)| char == 'o').collect();\n    let mut beats: Vec<isize> = notes.iter().cloned().map(|note|\
    \ {\n        beats_per_beat = note % 128;\n        note / 128\n    }).collect();\n\
    \    beats.sort();\n    beats_per_beat += beats[0];\n    for i in 1..beats.len()\
    \ {\n        beats_per_beat += beats[i] - beats[i - 1];\n    }\n    beats", " \
    \   let mut numbers: Vec<isize> = vec![];\n    let mut beats = 0;\n\n    for c\
    \ in music_string.chars() {\n        let s = c - '0';\n        if s == 4 {\n \
    \           beats += 1;\n        }\n        numbers.push(s);\n    }\n\n    return\
    \ numbers;", "    music_string.chars().map(|c|\n        match c {\n          \
    \  b'o' => 4,\n            b'o|' => 2,\n            b'|' => 1,\n            _\
    \ => 0,\n        }\n    ).sum()", "    let music_notes = music_string\n      \
    \  .chars()\n        .filter(|&c| c == 'o' || c == 'o|' || c == '.|')\n      \
    \  .map(|c| {\n            if c == 'o' {\n                0 // whole note\n  \
    \          } else if c == 'o|' {\n                1 // half note\n           \
    \ } else if c == '.|' {\n                2 // quater note\n            } else\
    \ {\n                unimplemented!();\n            }\n        })\n        .collect::<Vec<isize>>();\n\
    \n    let music_notes_size = music_notes.len();\n\n    let music_notes_sum: usize\
    \ = music_notes.iter().fold(0, |acc, &note| acc + note);\n\n    // Create array\
    \ of beats for each note from note to end\n    let music_notes_beats: Vec<isize>\
    \ = music_notes\n        .iter()\n        .enumerate()\n        .filter(|&(_,\
    \ note)| note != music_notes_sum)\n        .map(|(_, note)| note)\n        .collect::<Vec<isize>>();\n\
    \n    // Convert array of beats to vector of beats per measure\n    let music_notes_beats_per_measure:\
    \ Vec<isize> = music_notes_beats.iter().fold(0, |acc, &beat| acc + (beat % 4));\n\
    \n    // Calculate total beats per measure\n    let total_beats_per_measure =\
    \ music_notes_beats_per_measure\n        .iter()\n        .cloned()\n        .fold(0,\
    \ |acc, &beats_per_measure| acc + (beats_per_measure % 4));\n\n    // Convert\
    \ total beats per measure back to array of beats per measure\n    let music_notes_beats_per_measure_back:\
    \ Vec<isize> = total_beats_per_measure\n        .iter()\n        .map(|beats_per_measure|\
    \ beats_per_measure % 4)\n        .collect::<Vec<isize>>();\n\n    // Calculate\
    \ the number of beats per measure\n    let music_notes_beats_per_measure_len:\
    \ isize = music_notes_beats_per_measure\n        .iter()\n        .zip(music_notes_beats_per_measure_back)\n\
    \        .map(|(&beats_per_measure, &beats_per_measure_back)| beats_per_measure\
    \ - beats_per_measure_back)\n        .sum()\n        + music_notes_beats_per_measure_back\n\
    \        .len();\n\n    // Create vector of beats for each note\n    let music_notes_beats:\
    \ Vec<isize> = music_notes\n        .iter()\n        .map(|note| music_note",
  "    let mut beats = Vec::new();\n    let mut notes = music_string.trim().split_whitespace();\n\
    \    while notes.len() > 0 {\n        notes.pop();\n        let note = notes.last().unwrap();\n\
    \        if note.len() == 1 && notes[0] == '.' {\n            notes.pop();\n \
    \           beats.push(1);\n        } else {\n            let note_index = notes.last().unwrap().chars().last().unwrap();\n\
    \            beats.push(note_index == 'o' ? 4 : 2);\n        }\n    }\n    beats",
  "    music_string.chars().map(|c| { if c == 'o' { 4 } else if c == 'o|' { 2 } else\
    \ if c == '.|' { 1 } else { 0 } }).collect()", "    let mut beats = Vec::new();\n\
    \    let mut notes = music_string.split_whitespace();\n    let mut current_note\
    \ = 0;\n    notes.for_each(|note| {\n        // ignore empty notes\n        if\
    \ note.is_empty() {\n            return;\n        }\n\n        // ignore non-notes\n\
    \        let note = note.chars().next().unwrap();\n        if note != 'o' || note\
    \ != '|' || note != '.' {\n            return;\n        }\n\n        // parse\
    \ note length\n        let note_length = note.chars().next().unwrap() as usize;\n\
    \        if note_length == 0 {\n            return;\n        }\n\n        // parse\
    \ note duration\n        let note_duration = note.chars().next().unwrap() as usize;\n\
    \        if note_duration > 0 {\n            beats.push(note_duration);\n    \
    \    }\n\n        // parse note and add it to beats\n        beats.push(current_note);\n\
    \n        // reset current note\n        current_note = 0;\n\n        // advance\
    \ to next note\n        notes.pop();\n    });\n\n    beats", "    // Split input\
    \ music string by spaces and remove all empty strings\n    let mut music_list\
    \ = music_string.split_whitespace().filter(|s| !s.is_empty()).collect::<Vec<String>>();\n\
    \    // Convert all strings to lowercase to simplify parsing.\n    music_list.sort_by_key(|s|\
    \ s.to_lowercase());\n    // Split all notes into single note and rests\n    let\
    \ mut notes = music_list\n        .into_iter()\n        .flat_map(|note| note.split('|').collect::<Vec<_>>())\n\
    \        .filter(|note| note.is_some())\n        .collect::<Vec<_>>();\n    //\
    \ Add 0 at the end of rests vector if necessary\n    notes.insert(music_list.len(),\
    \ \"\");\n    // Count rests\n    let mut rests = notes\n        .iter_mut()\n\
    \        .filter_map(|note| {\n            if note.len() == 1 { Some(note.as_str())\
    \ } else { None }\n        })\n        .count();\n    // Count notes in each rest\n\
    \    rests.iter_mut().for_each(|&rest| rest.chars().for_each(|c| {\n        let\
    \ count = notes.iter().filter(|note| note.chars().any(|&&c| c == c)).count();\n\
    \        *rest = count.to_string();\n    }));\n    // Calculate how many beats\
    \ per note\n    let beats_per_note = 12 / notes.len();\n    // Return music as\
    \ vector of beats\n    notes\n        .iter()\n        .map(|note| beats_per_note\
    \ * note.chars().count())\n        .collect()", "    let mut beats_counter = vec![0,\
    \ 0, 0, 0];\n    let mut music_string = music_string.to_ascii_lowercase();\n \
    \   loop {\n        if music_string.is_empty() {\n            break;\n       \
    \ }\n        let mut music_char: char;\n        let mut note = music_string[0];\n\
    \        if music_string.len() > 1 {\n            if music_string[1] == '|' {\n\
    \                note |= 'o';\n                music_string = &music_string[2..];\n\
    \            } else {\n                note |= 'o';\n            }\n        }\n\
    \        for music_char in music_string {\n            if !('o' <= music_char\
    \ && music_char <= '.') {\n                music_string = &music_string[1..];\n\
    \                break;\n            }\n        }\n        let mut beats = beat_count(note);\n\
    \        if music_char == ' ' {\n            music_string = &music_string[1..];\n\
    \            continue;\n        }\n        if music_char == '|' {\n          \
    \  note |= '|';\n            music_string = &music_string[2..];\n        } else\
    \ {\n            note |= '|';\n        }\n        for music_char in music_string\
    \ {\n            if !('o' <= music_char && music_char <= '.') {\n            \
    \    music_string = &music_string[1..];\n                break;\n            }\n\
    \        }\n        beats_counter[beats - 1] += 1;\n    }\n    beats_counter.iter().collect()",
  "    let mut notes = music_string.chars().collect::<Vec<_>>();\n    notes = notes.windows(2).collect::<Vec<_>>();\n\
    \    let mut beats: Vec<isize> = notes.iter().cloned().collect();\n\n    let mut\
    \ last = false;\n    for i in 0..notes.len() {\n        match notes[i] {\n   \
    \         'o' => {\n                if last {\n                    beats[i] +=\
    \ 4;\n                }\n                beats.push(1);\n                last\
    \ = true;\n            }\n            'o|' => {\n                if last {\n \
    \                   beats[i] += 2;\n                }\n                beats.push(1);\n\
    \                last = true;\n            }\n            '.|' => {\n        \
    \        if last {\n                    beats[i] += 1;\n                }\n  \
    \              beats.push(1);\n                last = true;\n            }\n \
    \           _ => {\n                beats.push(1);\n                last = false;\n\
    \            }\n        }\n    }\n    beats", "    let mut beats_per_octave: isize\
    \ = 1;\n\n    let mut beats_array: Vec<isize> = vec![0; music_string.len()];\n\
    \    for i in 0..music_string.len() {\n        let music_symbol = music_string[..i];\n\
    \        if music_symbol == \".\" {\n            beats_array[i] = beats_per_octave;\n\
    \            beats_per_octave <<= 1;\n        } else {\n            beats_array[i]\
    \ += 1;\n        }\n    }\n\n    beats_array", "    let mut beats: Vec<isize>\
    \ = vec![0; music_string.len()];\n    let mut current_note = None;\n    let mut\
    \ current_note_index = 0;\n    for (index, note) in music_string.chars().enumerate()\
    \ {\n        if note == 'o' {\n            beats[current_note_index] += 4;\n \
    \           current_note = None;\n            current_note_index = index;\n  \
    \      } else if note == 'o|' {\n            beats[current_note_index] += 2;\n\
    \            current_note = None;\n            current_note_index = index;\n \
    \       } else if note == '.|' {\n            beats[current_note_index] += 1;\n\
    \            current_note = None;\n            current_note_index = index;\n \
    \       } else {\n            current_note = note;\n            beats[current_note_index]\
    \ += 1;\n        }\n    }\n    return beats", "    let mut notes = Vec::new();\n\
    \    for c in music_string.chars() {\n        notes.push(match c {\n         \
    \   'o' => 1,\n            'o|' => 2,\n            '.|' => 3,\n            _ =>\
    \ 0,\n        });\n    }\n    notes.iter().fold(0, |notes: &[isize], beat| notes\
    \ + beat)", "    music_string\n        .lines()\n        .flat_map(|line| {\n\
    \            line.chars().enumerate()\n                .map(|(i, c)| {\n     \
    \               let (beats, note) = c.to_ascii_lowercase().split_at(1).collect();\n\
    \                    beats.parse::<isize>()\n                })\n        })\n\
    \        .collect()", "    music_string.split_whitespace().map(|note| {\n    \
    \    if note == \"o\" {\n            4\n        } else if note == \"o|\" {\n \
    \           2\n        } else if note == \".|\" {\n            1\n        } else\
    \ {\n            panic!(\"Unrecognized note: {}\".format(note))\n        }\n \
    \   }).collect()", "    let mut beats: Vec<isize> = vec![];\n    let mut current_beat\
    \ = -1;\n    let mut music_list = music_string.split_whitespace();\n    for note\
    \ in music_list {\n        match note {\n            \"o\" => {\n            \
    \    current_beat = current_beat + 4;\n                beats.push(current_beat);\n\
    \            }\n            \"o|\" => {\n                current_beat = current_beat\
    \ + 2;\n                beats.push(current_beat);\n            }\n           \
    \ \".|\" => {\n                current_beat = current_beat + 1;\n            \
    \    beats.push(current_beat);\n            }\n            _ => (),\n        }\n\
    \    }\n    beats", "    let mut beats = vec![];\n    music_string.chars().for_each(|c|\
    \ {\n        match c {\n            'o' => beats.push(4),\n            'o|' =>\
    \ beats.push(2),\n            '.|' => beats.push(1),\n            _ => (),\n \
    \       }\n    });\n    beats", "    let mut beats = vec![];\n\n    let mut char_iter\
    \ = music_string.chars();\n    let mut i = 0;\n    let mut char = char_iter.next();\n\
    \    while let Some(&'|') = char {\n        let next_char = char_iter.next();\n\
    \        i += 1;\n\n        // We have hit the | - that means we can add the note\
    \ to the beats\n        // if we have not already added the note.\n        //\
    \ Otherwise we need to increment the note by one beat and add it to the beats\n\
    \        if !beats.contains(&i) {\n            beats.push(i);\n        } else\
    \ {\n            beats[i] = beats[i] + 1;\n        }\n        char = next_char;\n\
    \    }\n\n    return beats;", "    let mut beats_per_bar = vec![];\n    music_string.split(\"\
    \").for_each(|c| {\n        match c {\n            \"o\" => beats_per_bar.push(4),\n\
    \            \"o|\" => beats_per_bar.push(2),\n            \".|\" => beats_per_bar.push(1),\n\
    \            _ => panic!(\"Illegal character(s)\"),\n        }\n    });\n    beats_per_bar",
  "    let mut beats_taken = vec![];\n\n    // parse music string and set initial\
    \ value of each note\n    let mut notes = music_string.split(' ');\n    for note\
    \ in notes {\n        let mut note_length = 1; // default to whole note\n    \
    \    let mut current_note = note.chars().nth(1).unwrap();\n\n        // if first\
    \ character is a '.' or '|', it can be considered a half or quarter note\n   \
    \     if current_note == '.' || current_note == '|' {\n            note_length\
    \ = 2;\n            current_note = note.chars().nth(1).unwrap();\n        }\n\n\
    \        // if current character is not '.' or '|', it can be considered a whole\
    \ note\n        if current_note != 'o' {\n            note_length = 4;\n     \
    \       current_note = note.chars().nth(1).unwrap();\n        }\n\n        //\
    \ increment the counter for how many beats each note lasts\n        beats_taken.push((note_length\
    \ as isize) * ((note as String).len() as isize) / 4);\n    }\n\n    // return\
    \ note count for each note\n    return beats_taken;", "    let mut music_string\
    \ = music_string.to_lowercase();\n\n    let mut beats = Vec::new();\n\n    for\
    \ note in music_string.chars() {\n        if note == 'o' || note == 'o|' || note\
    \ == '.|' {\n            beats.push(4);\n        } else {\n            beats.push(1);\n\
    \        }\n    }\n\n    beats", "    music_string.chars().map(|c| match c {\n\
    \        'o' => 4,\n        'o|' => 2,\n        '.|' => 1,\n        _ => 0,\n\
    \    }).sum()", "    let mut beats = vec![];\n\n    for note in music_string.chars()\
    \ {\n        let mut beat = 0;\n\n        match note {\n            'o' => { beat\
    \ += 4; },\n            '.' => { beat += 1; },\n            'o|' => { beat +=\
    \ 2; },\n            _ => {}\n        }\n\n        beats.push(beat);\n    }\n\n\
    \    beats", "    // create container for output and place initial values\n  \
    \  let mut beats_vector: Vec<isize> = vec![0, 0, 0, 0];\n    // parse input by\
    \ putting each note in a vector\n    let mut current_note = String::new();\n \
    \   for note in music_string.split(\" \") {\n        let note_to_append = note.chars().collect();\n\
    \        if note_to_append[0] == '|' {\n            note_to_append[0] = 'o';\n\
    \        }\n        current_note.extend(note_to_append);\n    }\n    let note_to_append\
    \ = current_note.chars().collect();\n    note_to_append[0] = 'o';\n    // for\
    \ each note, append it to its corresponding beats vector\n    for i in 0..note_to_append.len()\
    \ {\n        let current_beat = note_to_append[i] - '0';\n        beats_vector.push(current_beat);\n\
    \    }\n    beats_vector", "    let mut note_count = music_string.chars().filter_map(|c|\n\
    \        if c == 'o' {\n            Some('o'.to_owned())\n        } else if c\
    \ == 'o|' {\n            Some('o'.to_owned())\n        } else if c == '.|' {\n\
    \            Some('.'.to_owned())\n        } else {\n            None\n      \
    \  }).count();\n    let mut beats = music_string.chars().filter_map(|c| {\n  \
    \      if c == 'o' {\n            Some('o'.to_owned())\n        } else if c ==\
    \ 'o|' {\n            Some('o'.to_owned())\n        } else if c == '.|' {\n  \
    \          Some('.'.to_owned())\n        } else {\n            None\n        }\n\
    \    }).count();\n    for i in 0..music_string.len() - 1 {\n        if note_count[i]\
    \ == 2 {\n            beats += 1;\n            note_count[i] = 0;\n        } else\
    \ if (note_count[i] == 1) {\n            beats += 1;\n            note_count[i]\
    \ = 0;\n        } else {\n            note_count[i] += 1;\n        }\n    }\n\
    \    return beats * note_count", "    let mut notes: Vec<isize> = music_string.split(|char|\
    \ char == ' ').collect();\n    let mut beats = Vec::new();\n    for note in &notes\
    \ {\n        beats.push(match note {\n            'o' => 0,\n            'o|'\
    \ => 1,\n            '.|' => 2,\n            _ => panic!(\"{} is not valid note!\"\
    , note)\n        });\n    }\n    beats.collect::<Vec<isize>>()", "    let mut\
    \ result = vec![];\n    let music_str = music_string.to_string();\n    let mut\
    \ music_chars = music_str.chars();\n    while let Some(music_char) = music_chars.next()\
    \ {\n        match music_char {\n            c @ _ if c != '|' => result.push(isize_from_char(c)),\n\
    \            c @ _ if c == '|' => result.push(isize_from_char(c)),\n         \
    \   _ => result.push(isize_from_char(c)),\n        }\n    }\n    result", "  \
    \  let mut music_vec: Vec<isize> = Vec::new();\n    let music_list = music_string.trim().chars().map(|c|\
    \ c.to_digit(10).unwrap()).collect();\n    for note in music_list {\n        music_vec.push((note\
    \ % 12) + 1);\n    }\n    return music_vec;", "    let mut beats_vec: Vec<isize>\
    \ = Vec::new();\n    let mut i = 0;\n    while i < music_string.len() {\n    \
    \    let mut beats = 0;\n        let mut current_char = music_string[i];\n   \
    \     while current_char != ' ' && current_char != '|' && current_char != ' '\
    \ && current_char != 'o' &&\n                current_char != 'o' && current_char\
    \ != '.' {\n            beats += 1;\n            i += 1;\n            current_char\
    \ = music_string[i];\n        }\n        if current_char == 'o' || current_char\
    \ == 'o|' {\n            beats_vec.push(beats);\n            i += 1;\n       \
    \ }\n    }\n    beats_vec", "    let mut music_notes: Vec<isize> = Vec::new();\n\
    \    let mut note_count = music_string.len();\n    let mut current_note_count\
    \ = 0;\n    let mut current_note = String::new();\n    let mut last_note = String::new();\n\
    \    let mut last_note_count = 0;\n    let mut first_note = String::new();\n \
    \   let mut first_note_count = 0;\n    let mut rest = music_string.chars().filter(|&c|\
    \ c != ' ');\n    let mut has_current_note = false;\n    while let Some(ch) =\
    \ rest.next() {\n        note_count = note_count - 1;\n        if let Some(note)\
    \ = get_note(ch) {\n            current_note = note;\n            has_current_note\
    \ = true;\n        } else {\n            current_note_count = current_note_count\
    \ - 1;\n        }\n        if note_count == 0 {\n            music_notes.push(current_note_count);\n\
    \        }\n    }\n    music_notes.push(current_note_count);\n    music_notes",
  "    let music_string_bytes = music_string.as_bytes();\n    let mut music_chars\
    \ = music_string_bytes.as_bytes();\n    let mut music_chars_len = music_string_bytes.len();\n\
    \    let mut beats = vec![];\n    // go through all symbols in music string\n\
    \    while music_chars_len > 0 {\n        debug_assert!(music_chars[0] != '.');\n\
    \        debug_assert!(music_chars[0] != 'o');\n        debug_assert!(music_chars[0]\
    \ != '|');\n        debug_assert!(music_chars[0] != ' ');\n\n        if music_chars[0]\
    \ == 'o' {\n            beats.push(4);\n            music_chars = &music_chars[1..];\n\
    \        }\n        if music_chars[0] == 'o|' {\n            beats.push(2);\n\
    \            music_chars = &music_chars[1..];\n        }\n        if music_chars[0]\
    \ == '.' {\n            beats.push(1);\n            music_chars = &music_chars[1..];\n\
    \        }\n        if music_chars[0] == ' ' {\n            music_chars = &music_chars[1..];\n\
    \        }\n        music_chars = &music_chars[1..];\n        music_chars_len\
    \ = music_string_bytes.len();\n    }\n    beats", "    let mut output_vec: Vec<isize>\
    \ = Vec::new();\n\n    for music_note in music_string.chars() {\n        if music_note\
    \ == 'o' {\n            output_vec.push(4);\n        } else if music_note == 'o|'\
    \ {\n            output_vec.push(2);\n        } else if music_note == '.|' {\n\
    \            output_vec.push(1);\n        } else {\n            println!(\"{:?}\
    \ is not a valid note\", music_note);\n        }\n    }\n\n    output_vec", " \
    \   let mut beats_per_note = Vec::new();\n    for note in music_string.chars().skip(1)\
    \ {\n        match note {\n            '.' => {\n                beats_per_note.push(0);\n\
    \            }\n            'o' => {\n                beats_per_note.push(4);\n\
    \            }\n            '|' => {\n                beats_per_note.push(2);\n\
    \            }\n            _ => (),\n        }\n    }\n    beats_per_note", " \
    \   let mut beats_count_vec: Vec<isize> = Vec::new();\n    for ch in music_string\
    \ {\n        match ch {\n            'o' => {\n                beats_count_vec.push(4);\n\
    \            }\n            'o|' => {\n                beats_count_vec.push(2);\n\
    \            }\n            '.|' => {\n                beats_count_vec.push(1);\n\
    \            }\n            _ => {\n                println!(\"Wrong music input.\
    \ Unknown character: {}\", ch);\n                break;\n            }\n     \
    \   }\n    }\n    beats_count_vec", "    let mut output_vector = vec![];\n   \
    \ let mut notes = music_string.chars();\n\n    for note in notes {\n        if\
    \ note == '|' {\n            output_vector.push(output_vector.len() / 2);\n  \
    \      } else if note == 'o' {\n            output_vector.push(4);\n        }\
    \ else {\n            output_vector.push(1);\n        }\n    }\n    output_vector",
  "    let mut beats = Vec::new();\n    let mut current: usize = 0;\n    let mut notes:\
    \ Vec<&str> = music_string.split_whitespace().collect();\n\n    loop {\n     \
    \   if notes.len() > 0 {\n            current = notes[0].as_str().parse().unwrap();\n\
    \            notes = notes[1..].collect();\n        } else {\n            break;\n\
    \        }\n\n        let mut multiplier: isize = 1;\n\n        match current\
    \ {\n            'o' => multiplier = 4,\n            'o|' => multiplier = 2,\n\
    \            '.|' => multiplier = 1,\n            _ => unreachable!(),\n     \
    \   }\n\n        beats.push(multiplier * 4);\n    }\n\n    beats", "    let mut\
    \ music_slice = music_string.as_bytes();\n    let music_length = music_slice.len();\n\
    \    let mut beats_array = Vec::with_capacity(music_length / 4);\n\n    for i\
    \ in 0..music_length {\n        let byte = music_slice[i * 4];\n        let is_whole_note\
    \ = (byte & 0xf0) == 0xf0;\n        let is_half_note = (byte & 0xc0) != 0xc0;\n\
    \        let is_quarter_note = (byte & 0x80) != 0x80;\n\n        if is_whole_note\
    \ {\n            beats_array.push(4);\n        }\n\n        if is_half_note {\n\
    \            beats_array.push(2);\n        }\n\n        if is_quarter_note {\n\
    \            beats_array.push(1);\n        }\n    }\n\n    return beats_array;",
  "    let mut notes = music_string\n        .chars()\n        .filter_map(|c| match\
    \ c {\n            'o' => true,\n            'o|' => true,\n            '.|' =>\
    \ true,\n            _ => false,\n        })\n        .collect();\n    notes.sort_by_key(|&c|\
    \ c.to_ascii_lowercase());\n    let mut beat_counts = Vec::new();\n    for note\
    \ in notes {\n        let mut note_count = 1;\n        if note == 'o' {\n    \
    \        note_count += 4;\n        }\n        if note == 'o|' {\n            note_count\
    \ += 2;\n        }\n        if note == '.|' {\n            note_count = 1;\n \
    \       }\n        beat_counts.push(note_count);\n    }\n    beat_counts", " \
    \   let mut beats_per_note = vec![];\n\n    for ch in music_string.chars() {\n\
    \        let mut next_note_count = 1;\n\n        if ch == 'o' {\n            next_note_count\
    \ = 4;\n        } else if ch == 'o|' {\n            next_note_count = 2;\n   \
    \     } else if ch == '.|' {\n            next_note_count = 1;\n        }\n\n\
    \        beats_per_note.push(*next_note_count);\n    }\n\n    beats_per_note",
  "    let music_str = music_string.to_owned();\n    let mut notes: Vec<isize> = music_str.chars().collect::<Vec<isize>>();\n\
    \    notes.sort();\n    let mut current = 0usize;\n    let mut beats: usize =\
    \ 0;\n\n    for note in notes {\n        match note {\n            'o' => beats\
    \ += 4,\n            'o|' => beats += 2,\n            '.|' => beats += 1,\n  \
    \          _ => continue,\n        }\n        current += 1;\n        if current\
    \ == 4 {\n            beats -= 1;\n        }\n    }\n    notes.clear();\n    notes.push(beats);\n\
    \    notes", "    let mut beats: Vec<isize> = Vec::new();\n    let music_chars\
    \ = music_string.chars().collect::<Vec<&str>>();\n    let mut notes: Vec<&str>\
    \ = Vec::new();\n\n    for music_char in music_chars.iter() {\n        let music_char\
    \ = music_char.expect(\"music_string contains invalid chars.\");\n        let\
    \ music_char_note = music_char.to_string();\n\n        if music_char_note == \"\
    o\" {\n            notes.push(music_char_note);\n        } else if music_char_note\
    \ == \"o|\" {\n            notes.push(music_char_note);\n        } else if music_char_note\
    \ == \".|\" {\n            notes.push(music_char_note);\n        } else {\n  \
    \          panic!(\"music_string contains invalid note.\");\n        }\n    }\n\
    \n    for note in notes.iter() {\n        let note_to_beat = note.chars().skip(1).count();\n\
    \n        if note_to_beat > beats.len() {\n            beats.push(note_to_beat);\n\
    \        }\n    }\n    return beats;", "    let mut beats: Vec<isize> = Vec::new();\n\
    \n    for (note, length) in music_string.chars().zip(music_string.chars().skip(music_string.len()))\
    \ {\n        match note {\n            'o' => { beats.extend_from_slice(&length);\
    \ break }\n            'o|' => { beats.extend_from_slice(&length / 2); break }\n\
    \            '.|' => { beats.extend_from_slice(&1); break }\n            _ =>\
    \ {}\n        }\n    }\n\n    beats", "    let mut music_string = music_string.chars().skip_while(|c|\
    \ c != '|').collect::<String>();\n    let mut music_notes: Vec<isize> = vec![];\n\
    \n    loop {\n        let last_note = music_string.chars().next().unwrap();\n\
    \        music_string = music_string.chars().skip_while(|c| c != last_note).collect::<String>();\n\
    \        if music_string.is_empty() {\n            break;\n        }\n       \
    \ let mut note_length = music_string.len() as isize;\n        let mut last_beat_length:\
    \ isize = 0;\n\n        let mut c = music_string.chars().next();\n        let\
    \ mut i = 1;\n\n        while let Some(x) = c.and_then(|c| c.to_digit(10)) {\n\
    \            if last_note == x {\n                let beat_length = i - 1;\n \
    \               last_beat_length += beat_length;\n                music_notes.push(beat_length);\n\
    \            }\n            c = music_string.chars().next();\n            i +=\
    \ 1;\n        }\n\n        music_notes.push(last_beat_length);\n    }\n\n    music_notes",
  "    let mut beats: Vec<isize> = vec![];\n\n    for note in music_string.chars().skip(1)\
    \ {\n        match note {\n            'o' => {\n                beats.push(4);\n\
    \            }\n            'o|' => {\n                beats.push(2);\n      \
    \      }\n            '.|' => {\n                beats.push(1);\n            }\n\
    \            _ => {\n                continue;\n            }\n        }\n   \
    \ }\n\n    beats", "    let mut result: Vec<isize> = vec![];\n    let music_string\
    \ = music_string.trim();\n    let music_char_iter = music_string.chars();\n  \
    \  while let Some(music_char) = music_char_iter.next() {\n        if music_char\
    \ == ' ' {\n            continue;\n        }\n        let music_char = music_char.to_string();\n\
    \        match music_char {\n            \"o\" => result.push(4),\n          \
    \  \"|\" => result.push(2),\n            \".\" => result.push(1),\n          \
    \  _ => panic!(\"Invalid note '{}' given.\", music_char),\n        }\n    }\n\
    \    result", "    let mut beats_vec: Vec<isize> = Vec::new();\n    \n    // parse\
    \ musical note\n    let mut musical_note = music_string.chars().next().unwrap();\n\
    \    let mut note_length = musical_note.len() as usize;\n    // count how many\
    \ beats does each note last\n    while note_length > 0 {\n        // if the note\
    \ is the dot it is a whole note\n        if note_length >= 4 && musical_note[note_length-3]\
    \ != '|' {\n            beats_vec.push(4);\n        }\n        // if the note\
    \ is the dot it is a half note\n        else if note_length >= 2 && musical_note[note_length-2]\
    \ != '|' {\n            beats_vec.push(2);\n        }\n        // if the note\
    \ is the dot it is a quater note\n        else if note_length == 1 && musical_note[note_length-1]\
    \ != '|' {\n            beats_vec.push(1);\n        }\n        \n        // if\
    \ the note is not a dot\n        else {\n            // if it is a note, it must\
    \ last N beats, where N is equal to the note length\n            if note_length\
    \ % 4 == 0 {\n                beats_vec.push(4 as usize);\n            }\n   \
    \         // if it is a half note, it must last N beats, where N is equal to the\
    \ note length/2\n            else if note_length % 2 == 0 {\n                beats_vec.push(2\
    \ as usize);\n            }\n            // if it is a quater note, it must last\
    \ N beats, where N is equal to the note length/2\n            else if note_length\
    \ == 1 {\n                beats_vec.push(1);\n            }\n            else\
    \ {\n                println!(\"Incorrect note, length of note {} is not a multiple\
    \ of 4 or 2\", note_length);\n            }\n        }\n        // count how many\
    \ beats does this note last\n        note_length -= 1;\n        musical_note =\
    \ music_string.chars().next().unwrap();\n    }\n    return beats_vec;", "    music_string.chars()\n\
    \        .filter_map(|c| match c {\n            'o' => Some(4),\n            'o|'\
    \ => Some(2),\n            '.|' => Some(1),\n            _ => None,\n        })\n\
    \        .collect()", "    let mut beats = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut last_note = String::new();\n    let mut notes_in_line = String::new();\n\
    \    for c in music_string.chars() {\n        if c == 'o' {\n            last_note\
    \ = notes_in_line;\n            notes_in_line = String::new();\n            current_beat\
    \ = 0;\n            beats.push(current_beat);\n        } else {\n            notes_in_line.push(c);\n\
    \            if c.is_whitespace() {\n                beats.push(current_beat);\n\
    \                current_beat = 0;\n            } else {\n                current_beat\
    \ += 1;\n            }\n        }\n    }\n    beats.push(current_beat);\n    beats",
  '    // Your code here', "    let mut notes = String::new();\n    music_string.split('\
    \ ').for_each(|note| {\n        if note.len() == 1 {\n            notes.push_str(&note);\n\
    \            return;\n        }\n        if note.len() == 2 {\n            notes.push_str(&note[0]);\n\
    \            notes.push_str(\"|\");\n            notes.push_str(&note[1]);\n \
    \           return;\n        }\n        if note.len() == 3 {\n            notes.push_str(&note[0]);\n\
    \            notes.push_str(\"||\");\n            notes.push_str(&note[1]);\n\
    \            return;\n        }\n        if note.len() == 4 {\n            notes.push_str(&note[0]);\n\
    \            notes.push_str(\"|\");\n            notes.push_str(&note[1]);\n \
    \           notes.push_str(\"|\");\n            return;\n        }\n    });\n\
    \    notes\n        .chars()\n        .filter(|c| c.is_ascii_alphanumeric())\n\
    \        .collect::<Vec<_>>()\n        .into_iter()\n        .map(|note| match\
    \ note {\n            'o' => 0,\n            'o|' => 1,\n            '.|' => 2,\n\
    \            _ => panic!(\"Invalid note '{}'\", note),\n        })\n        .collect()",
  "    music_string.chars().enumerate()\n        .filter_map(|(i, char)| {\n     \
    \       match char {\n                'o' => Some(i),\n                'o|' =>\
    \ Some(i - 4),\n                '.|' => Some(i - 2),\n                _ => None,\n\
    \            }\n        })\n        .collect()", "    let mut music_string = music_string.to_owned();\n\
    \    let mut beats = Vec::new();\n\n    loop {\n        let last_note = music_string.chars().nth(1).unwrap();\n\
    \n        let last_beat = music_string.chars().nth(music_string.chars().position(last_note).unwrap()).unwrap();\n\
    \n        if last_note == 'o' {\n            music_string.truncate(music_string.chars().position(last_beat).unwrap()\
    \ + 1);\n            beats.push(last_beat);\n        } else {\n            music_string.truncate(music_string.chars().position(last_beat).unwrap());\n\
    \        }\n\n        if music_string.chars().last() != '.' {\n            break;\n\
    \        }\n\n        music_string.push('|');\n    }\n\n    beats", '    // Your
    code here', "    music_string\n        .trim()\n        .chars()\n        .filter_map(|c|\
    \ match c {\n            c if c == 'o' =>\n                Some(c as isize - '0'\
    \ as isize - '0' as isize - '0' as isize - '0' as isize - '0' as isize - '0' as\
    \ isize - '0')\n            c if c == 'o|' =>\n                Some(c as isize\
    \ - '0' as isize - '0' as isize - '0' as isize - '0' as isize - '0')\n       \
    \     c if c == '.|' =>\n                Some(c as isize - '0' as isize - '0'\
    \ as isize - '0' as isize - '0')\n            c if c.is_whitespace() => None,\n\
    \            c => None,\n        })\n        .collect::<Vec<isize>>()"]
stop_tokens:
- "\n}"
