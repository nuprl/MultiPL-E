name: HumanEval_34_unique
language: rust
results:
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .enumerate()\n        .filter_map(|(i, x)|\
    \ {\n            if i > 0 && x != l[i-1] {\n                Some(x)\n        \
    \    } else {\n                None\n            }\n        })\n        .collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmp726bbbed.rs:8:27\n\
    \  |\n8 |             if i > 0 && x != l[i-1] {\n  |                         \
    \  ^^ no implementation for `&isize == isize`\n  |\n  = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            f32\n            f64\n            i128\n\
    \            i16\n            i32\n            i64\n            i8\n         \
    \   isize\n          and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp726bbbed.rs:5:5\n\
    \   |\n4  |   fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                 \
    \              ---------- expected `Vec<isize>` because of return type\n5  | /\
    \     l.iter()\n6  | |         .enumerate()\n7  | |         .filter_map(|(i, x)|\
    \ {\n8  | |             if i > 0 && x != l[i-1] {\n...  |\n13 | |         })\n\
    14 | |         .collect::<Vec<_>>()\n   | |____________________________^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .clone()\n        .sorted()\n        .dedup()\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpp62_pbbv.rs:7:10\n  |\n7 |         .sorted()\n\
    \  |          ^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut iter = l.iter();\n    loop {\n        let mut next\
    \ = iter.next();\n        if next.is_some() {\n            iter.push(*next);\n\
    \        }\n        else {\n            break;\n        }\n    }\n    iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpg94yr_hp.rs:9:18\n  |\n9 |             iter.push(*next);\n\
    \  |                  ^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n --> /tmp/tmpg94yr_hp.rs:9:23\n\
    \  |\n9 |             iter.push(*next);\n  |                       ^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg94yr_hp.rs:15:5\n   |\n4  | fn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |                             ---------- expected `Vec<isize>`\
    \ because of return type\n...\n15 |     iter.collect::<Vec<_>>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![];\n    let mut seen = vec![];\n    for\
    \ v in l.iter() {\n        if !seen.contains(&v) {\n            seen.push(v);\n\
    \            res.push(v);\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb2o89jxg.rs:13:5\n   |\n\
    4  | fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n13 |     res\n\
    \   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().unique().collect()\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unique` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpdi9v9ike.rs:5:23\n  |\n5 |     l.iter().cloned().unique().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.iter().cloned().collect();\n    l.sort();\n\
    \    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpyse5w9ht.rs:6:5\n \
    \ |\n5 |     let mut l = l.iter().cloned().collect();\n  |         ----- consider\
    \ giving `l` a type\n6 |     l.sort();\n  |     ^ cannot infer type\n  |\n  =\
    \ note: type must be known at this point\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmplku54z9k.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.dedup()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkh_j5jto.rs:5:5\n  |\n4 |\
    \ fn unique(l: Vec<isize>) -> Vec<isize> {\n  |                             ----------\
    \ expected `Vec<isize>` because of return type\n5 |     l.dedup()\n  |     ^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\nnote: method `dedup` modifies its receiver in-place\n\
    \ --> /tmp/tmpkh_j5jto.rs:5:7\n  |\n5 |     l.dedup()\n  |     - ^^^^^ this call\
    \ modifies `l` in-place\n  |     |\n  |     you probably want to use this value\
    \ after calling the method...\n  = note: ...instead of the `()` output of method\
    \ `dedup`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // sort ascending\n    std::sort_unstable_by(&l);\n    //\
    \ remove duplicate elements\n    std::unique::<isize>(&mut l);\n    l\n}\n\nfn\
    \ main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_unstable_by` in crate `std`\n\
    \ --> /tmp/tmpxdhtdye5.rs:6:10\n  |\n6 |     std::sort_unstable_by(&l);\n  | \
    \         ^^^^^^^^^^^^^^^^ not found in `std`\n\nerror[E0425]: cannot find function\
    \ `unique` in crate `std`\n --> /tmp/tmpxdhtdye5.rs:8:10\n  |\n8 |     std::unique::<isize>(&mut\
    \ l);\n  |          ^^^^^^ not found in `std`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    for i in l {\n        if\
    \ !set.contains(i) {\n            set.insert(i);\n        }\n    }\n    set.into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpi8rgrssl.rs:5:19\n  |\n5 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = vec![];\n    for i in l {\n        if !unique.contains(&i)\
    \ {\n            unique.push(i);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpl363d47h.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().chain(l.iter().cloned().cloned()).cloned().unique().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmpvx0z66b2.rs:5:47\n     |\n5    |  \
    \   l.iter().cloned().chain(l.iter().cloned().cloned()).cloned().unique().cloned().collect()\n\
    \     |                                               ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected reference `&&_`\n             \
    \   found reference `&isize`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_,\
    \ isize> as Iterator>::Item == &&isize`\n   --> /tmp/tmpvx0z66b2.rs:5:29\n   \
    \ |\n5   |     l.iter().cloned().chain(l.iter().cloned().cloned()).cloned().unique().cloned().collect()\n\
    \    |                       ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&isize`,\
    \ found `isize`\n    |                       |\n    |                       required\
    \ by a bound introduced by this call\n    |\n    = note: expected reference `&&isize`\n\
    \               found reference `&isize`\n    = note: required because of the\
    \ requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n\
    \    = note: 1 redundant requirement hidden\n    = note: required because of the\
    \ requirements on the impl of `Iterator` for `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\nnote: required by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]:\
    \ the method `cloned` exists for struct `std::iter::Chain<Cloned<std::slice::Iter<'_,\
    \ isize>>, Cloned<Cloned<std::slice::Iter<'_, isize>>>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpvx0z66b2.rs:5:57\n   |\n5  |       l.iter().cloned().chain(l.iter().cloned().cloned()).cloned().unique().cloned().collect()\n\
    \   |                                                           ^^^^^^ method\
    \ cannot be called on `std::iter::Chain<Cloned<std::slice::Iter<'_, isize>>, Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not s"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.iter().cloned().collect::<Vec<isize>>();\n \
    \   l.sort();\n    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut it = l.iter();\n    it.sort();\n    let mut seen =\
    \ Vec::new();\n    it\n        .fold(seen, |mut seen, &element| {\n          \
    \  if !seen.contains(&element) {\n                seen.push(element);\n      \
    \          element\n            } else {\n                let index = seen.iter().position(|x|\
    \ *x == element);\n                seen = seen.drain(index);\n               \
    \ seen.append(element);\n            }\n        })\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpmk8u8lv8.rs:6:8\n  |\n6 |     it.sort();\n\
    \  |        ^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmk8u8lv8.rs:12:17\n   |\n12 |              \
    \   element\n   |                 ^^^^^^^ expected struct `Vec`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror[E0277]: the trait bound `Option<usize>: RangeBounds<usize>` is not satisfied\n\
    \    --> /tmp/tmpmk8u8lv8.rs:15:35\n     |\n15   |                 seen = seen.drain(index);\n\
    \     |                             ----- ^^^^^ the trait `RangeBounds<usize>`\
    \ is not implemented for `Option<usize>`\n     |                             |\n\
    \     |                             required by a bound introduced by this call\n\
    \     |\n     = help: the following other types implement trait `RangeBounds<T>`:\n\
    \               (Bound<&'a T>, Bound<&'a T>)\n               (Bound<T>, Bound<T>)\n\
    \               RangeFrom<&T>\n               RangeFrom<T>\n               RangeFull\n\
    \               RangeInclusive<&T>\n               RangeInclusive<T>\n       \
    \        RangeTo<&T>\n             and 5 others\nnote: required by a bound in\
    \ `Vec::<T, A>::drain`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmk8u8lv8.rs:15:24\n\
    \   |\n9  |         .fold(seen, |mut seen, &element| {\n   |                 \
    \         ---- expected due to this parameter type\n...\n15 |                \
    \ seen = seen.drain(index);\n   |                        ^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `std::vec::Drain`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `std::vec::Drain<'_, isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmk8u8lv8.rs:16:29\n   |\n16 |              \
    \   seen.append(element);\n   |                             ^^^^^^^ expected `&mut\
    \ Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<isize>`\n                           found type `isize`\n\nerror[E0308]:\
    \ mismatched types"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.iter().filter(|x| seen.insert(x)).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpy293045u.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut u = vec![];\n    for i in l {\n        if !u.contains(i)\
    \ {\n            u.push(i);\n        }\n    }\n    u\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5mtry3b5.rs:7:24\n  |\n7 |\
    \         if !u.contains(i) {\n  |                        ^\n  |             \
    \           |\n  |                        expected reference, found `isize`\n\
    \  |                        help: consider borrowing here: `&i`\n  |\n  = note:\
    \ expected reference `&_`\n                  found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique: Vec<isize> = Vec::new();\n    l.iter().cloned().filter(|x|\
    \ unique.iter().all(|y| x == y)).cloned().collect::<Vec<isize>>().sort();\n  \
    \  unique\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n --> /tmp/tmpcqc8hx73.rs:6:65\n  |\n6 |     l.iter().cloned().filter(|x|\
    \ unique.iter().all(|y| x == y)).cloned().collect::<Vec<isize>>().sort();\n  |\
    \                                                                 ^^^^^^ expected\
    \ reference, found `isize`\n  |\n  = note: expected reference `&&_`\n        \
    \     found reference `&isize`\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n  = note:\
    \ 1 redundant requirement hidden\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpcqc8hx73.rs:6:30:\
    \ 6:63]>`\n\nerror[E0631]: type mismatch in closure arguments\n --> /tmp/tmpcqc8hx73.rs:6:65\n\
    \  |\n6 |     l.iter().cloned().filter(|x| unique.iter().all(|y| x == y)).cloned().collect::<Vec<isize>>().sort();\n\
    \  |                              ---------------------------------  ^^^^^^ expected\
    \ signature of `for<'r> fn(&'r &_) -> _`\n  |                              |\n\
    \  |                              found signature of `for<'r> fn(&'r isize) ->\
    \ _`\n  |\n  = note: required because of the requirements on the impl of `Iterator`\
    \ for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpcqc8hx73.rs:6:30:\
    \ 6:63]>`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpcqc8hx73.rs:6:30: 6:63]>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpcqc8hx73.rs:6:74\n   |\n6  |        l.iter().cloned().filter(|x|\
    \ unique.iter().all(|y| x == y)).cloned().collect::<Vec<isize>>().sort();\n  \
    \ |                                                                          \
    \   ^^^^^^^ method cannot be called on `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpcqc8hx73.rs:6:30: 6:63]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Filter<Cloned<std::slice::Iter<'_, isize>>"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut uniques = Vec::new();\n    l.iter().for_each(|x| {\n\
    \        if !uniques.contains(&x) {\n            uniques.push(x.clone());\n  \
    \      }\n    });\n    uniques\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa2fotbt4.rs:8:26\n  |\n8 |\
    \             uniques.push(x.clone());\n  |                          ^^^^^^^^^\n\
    \  |                          |\n  |                          expected `&isize`,\
    \ found `isize`\n  |                          help: consider borrowing here: `&x`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa2fotbt4.rs:11:5\n   |\n4  | fn\
    \ unique(l: Vec<isize>) -> Vec<isize> {\n   |                             ----------\
    \ expected `Vec<isize>` because of return type\n...\n11 |     uniques\n   |  \
    \   ^^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = Vec::new();\n    l.iter().cloned().fold(s, |mut\
    \ v, x| {\n        if !v.contains(&x) {\n            v.push(x);\n        }\n \
    \       v\n    })\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmprhzummo6.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for el in l {\n        if result.iter().any(|&e|\
    \ e == el) {\n            continue;\n        }\n        result.push(el);\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp0yc_qc58.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = Vec::new();\n    let mut i = 0;\n    let\
    \ mut j = l.len() - 1;\n    while i <= j {\n        while i <= j && l[i] == l[j]\
    \ {\n            i += 1;\n            j -= 1;\n        }\n        if i <= j {\n\
    \            unique.push(l[i]);\n            i += 1;\n            j -= 1;\n  \
    \      }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = unique;\n \
    \   assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmprtxmeg_1.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect().sort().collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp9s0jtuxz.rs:5:23\n\
    \  |\n5 |     l.iter().cloned().collect().sort().collect()\n  |              \
    \         ^^^^^^^ cannot infer type for type parameter `B` declared on the associated\
    \ function `collect`\n  |\n  = note: type must be known at this point\nhelp: consider\
    \ specifying the type argument in the method call\n  |\n5 |     l.iter().cloned().collect::<B>().sort().collect()\n\
    \  |                              +++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if\
    \ !result.contains(&i) {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpjutj4gpc.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::with_capacity(l.len());\n    for i in l\
    \ {\n        if !ret.contains(&i) {\n            ret.push(i);\n        }\n   \
    \ }\n    ret\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpaxxhr8mr.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = Vec::new();\n    for elt in l.iter() {\n\
    \        if !unique.contains(&elt) {\n            unique.push(elt);\n        }\n\
    \    }\n    unique\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwi09alax.rs:11:5\n   |\n\
    4  | fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n11 |     unique\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = HashSet::new();\n    for elt in l {\n        insert(elt,\
    \ s);\n    }\n    s.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpf7ybfu25.rs:5:17\n  |\n5 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0425]: cannot\
    \ find function `insert` in this scope\n --> /tmp/tmpf7ybfu25.rs:7:9\n  |\n7 |\
    \         insert(elt, s);\n  |         ^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut a = l.iter().cloned().collect::<Vec<isize>>();\n    a.sort_unstable();\n\
    \    a.dedup();\n    a\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = Vec::new();\n    for i in l.iter() {\n       \
    \ s.push(i);\n    }\n    s.remove_by()\n}\n\nfn main() {\n    let candidate =\
    \ unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `remove_by` found for struct `Vec<&isize>`\
    \ in the current scope\n --> /tmp/tmpyuhyxapw.rs:9:7\n  |\n9 |     s.remove_by()\n\
    \  |       ^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `remove`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = Vec::new();\n    for i in l {\n        if\
    \ !unique.contains(&i) {\n            unique.push(i);\n        }\n    }\n    unique\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpzant9wpl.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().sorted().collect()\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpk21g7yuz.rs:5:23\n  |\n5 |     l.iter().cloned().sorted().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut iter = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    iter.sort_unstable();\n    iter\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 3, 3, 3, 5, 5, 9, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp4ilabsw7.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut d = HashSet::new();\n    let mut v = l;\n    while\
    \ !v.is_empty() {\n        d.insert(v.last().unwrap());\n        v.remove(0);\n\
    \    }\n    d.into_iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpst5n5nvo.rs:5:17\n  |\n5 |     let mut d = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.iter().cloned().collect::<Vec<isize>>();\n \
    \   std::mem::swap(&mut l, &mut l);\n    l.sort_unstable();\n    l\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0499]: cannot borrow `l` as mutable more than once at a time\n -->\
    \ /tmp/tmpq2h70eeh.rs:6:28\n  |\n6 |     std::mem::swap(&mut l, &mut l);\n  |\
    \     -------------- ------  ^^^^^^ second mutable borrow occurs here\n  |   \
    \  |              |\n  |     |              first mutable borrow occurs here\n\
    \  |     first borrow later used by call\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0499`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<_> = HashSet::new();\n    seen.insert(l.iter().cloned().collect::<Vec<_>>());\n\
    \    l.iter().filter(|x| seen.insert(x).is_some()).collect()\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpiix3djo4.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpiix3djo4.rs:5:32\n  |\n5 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmpiix3djo4.rs:7:51\n     |\n7    |     l.iter().filter(|x| seen.insert(x).is_some()).collect()\n\
    \     |                                                   ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    l.iter().cloned().for_each(|i|\
    \ {\n        if !set.insert(i) {\n            set.insert(*i);\n        }\n   \
    \ });\n    set.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmprhzs1ir_.rs:5:19\n  |\n5 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n --> /tmp/tmprhzs1ir_.rs:8:24\n  |\n8 |    \
    \         set.insert(*i);\n  |                        ^^\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0614.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().cloned().chain(l.iter().cloned().cloned().cloned().cloned().cloned()).cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned().cloned\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmpe9xv3qda.rs:5:23\n     |\n5    |  \
    \   l.iter().cloned().cloned().chain(l.iter().cloned().cloned().cloned().cloned().cloned()).cloned().cloned().cloned().cloned().cloned()....\n\
    \     |                       ^^^^^^ expected reference, found `isize`\n     |\n\
    \     = note: expected reference `&&_`\n                found reference `&isize`\n\
    \     = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `chain` exists for struct `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpe9xv3qda.rs:5:32\n\
    \   |\n5  |   ...().cloned().chain(l.iter().cloned().cloned().cloned().cloned().cloned()).cloned().cloned().cloned().cloned().cloned().cloned().cloned(...\n\
    \   |                  ^^^^^ method cannot be called on `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Cloned<std::slice::Iter<'_, isize>>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n           `Cloned<Cloned<std::slice::Iter<'_, isize>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_,\
    \ isize> as Iterator>::Item == &&_`\n    --> /tmp/tmpe9xv3qda.rs:5:56\n     |\n\
    5    |     l.iter().cloned().cloned().chain(l.iter().cloned().cloned().cloned().cloned().cloned()).cloned().cloned().cloned().cloned().cloned()....\n\
    \     |                                                        ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&&_`\n  \
    \              found reference `&isize`\n     = note: required because of the\
    \ requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n\
    note: required by a b"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<_>>().sort().collect()\n}\n\
    \nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpj1jnrhln.rs:5:50\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<_>>().sort().collect()\n  |    \
    \                                              ^^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.iter().cloned().filter(|&x|\
    \ !seen.insert(x).unwrap()).collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1ov9dw22.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for i in l {\n        if !result.contains(&i)\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpzsjilmh9.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpetee_nnl.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.sort_unstable();\n    l.iter().cloned().collect()\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpqh_t9fs_.rs:5:5\n  |\n4 | fn unique(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |           - help: consider changing this to be mutable: `mut l`\n5 |\
    \     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut r = vec![];\n    for i in l.iter() {\n        if r.contains(&i)\
    \ {\n            continue;\n        }\n        r.push(i);\n    }\n    r\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph49jpk5e.rs:12:5\n   |\n\
    4  | fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n12 |     r\n\
    \   |     ^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<isize>>().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Vec<isize>` in\
    \ the current scope\n --> /tmp/tmpwgq3g437.rs:5:47\n  |\n5 |     l.iter().cloned().collect::<Vec<isize>>().sorted().collect()\n\
    \  |                                               ^^^^^^ help: there is an associated\
    \ function with a similar name: `is_sorted`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<_>>().dedup()\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptwaaabk_.rs:5:5\n  |\n4 |\
    \ fn unique(l: Vec<isize>) -> Vec<isize> {\n  |                             ----------\
    \ expected `Vec<isize>` because of return type\n5 |     l.iter().cloned().collect::<Vec<_>>().dedup()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found unit\
    \ type `()`\nnote: method `dedup` modifies its receiver in-place\n --> /tmp/tmptwaaabk_.rs:5:43\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<_>>().dedup()\n  |     -------------------------------------\
    \ ^^^^^ this call modifies its receiver in-place\n  |     |\n  |     you probably\
    \ want to use this value after calling the method...\n  = note: ...instead of\
    \ the `()` output of method `dedup`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.into_iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpsmfx0t23.rs:5:19\n     |\n5    |     l.into_iter().cloned().collect()\n\
    \     |                   ^^^^^^ expected reference, found `isize`\n     |\n \
    \    = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpsmfx0t23.rs:5:28\n   |\n5  |       l.into_iter().cloned().collect()\n\
    \   |                              ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<_>>().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Vec<isize>` in\
    \ the current scope\n --> /tmp/tmp6_fbwcjh.rs:5:43\n  |\n5 |     l.iter().cloned().collect::<Vec<_>>().sorted().collect()\n\
    \  |                                           ^^^^^^ help: there is an associated\
    \ function with a similar name: `is_sorted`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpa7atgck1.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.clone();\n    std::mem::swap(&mut v, &mut v.iter().cloned());\n\
    \    v.sort_unstable();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpblddlfut.rs:6:28\n  |\n6 |\
    \     std::mem::swap(&mut v, &mut v.iter().cloned());\n  |                   \
    \         ^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Cloned`\n\
    \  |\n  = note: expected mutable reference `&mut Vec<isize>`\n             found\
    \ mutable reference `&mut Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for e in l {\n        if !res.contains(e)\
    \ {\n            res.push(e);\n        }\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi193z3yr.rs:7:26\n  |\n7 |\
    \         if !res.contains(e) {\n  |                          ^\n  |         \
    \                 |\n  |                          expected reference, found `isize`\n\
    \  |                          help: consider borrowing here: `&e`\n  |\n  = note:\
    \ expected reference `&_`\n                  found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for ele in l {\n        if result.iter().any(|&x|\
    \ x == ele) {\n            continue;\n        }\n        result.push(ele);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp2tsta64y.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for i in l.iter() {\n     \
    \   if !res.contains(&i) {\n            res.push(i);\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1yd82ji3.rs:11:5\n   |\n\
    4  | fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n11 |     res\n\
    \   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n\n    for x in l {\n        if seen.insert(x).is_none() {\n\
    \            result.push(x);\n        }\n    }\n\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp2erjiuwj.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp2erjiuwj.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp6u28gb45.rs:5:23\n  |\n5 |     l.iter().cloned().dedup()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut i = l;\n    loop {\n        if i.len() == 1 {\n  \
    \          return i;\n        }\n        for i in i.iter().cloned().rev() {\n\
    \            if i.contains(i) {\n                i.remove(i);\n              \
    \  break;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `contains` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpiondikkd.rs:11:18\n   |\n11 |             if i.contains(i)\
    \ {\n   |                  ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `remove` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpiondikkd.rs:12:19\n   |\n12 |                 i.remove(i);\n   |   \
    \                ^^^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    l.iter().cloned().filter(|&x|\
    \ *x != *x).filter(|&x| !seen.insert(*x)).cloned()\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpa1iovpf9.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpa1iovpf9.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n --> /tmp/tmpa1iovpf9.rs:6:35\n  |\n6 |    \
    \ l.iter().cloned().filter(|&x| *x != *x).filter(|&x| !seen.insert(*x)).cloned()\n\
    \  |                                   ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n --> /tmp/tmpa1iovpf9.rs:6:41\n  |\n6 |     l.iter().cloned().filter(|&x|\
    \ *x != *x).filter(|&x| !seen.insert(*x)).cloned()\n  |                      \
    \                   ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \ --> /tmp/tmpa1iovpf9.rs:6:70\n  |\n6 |     l.iter().cloned().filter(|&x| *x\
    \ != *x).filter(|&x| !seen.insert(*x)).cloned()\n  |                         \
    \                                             ^^\n\nerror[E0271]: type mismatch\
    \ resolving `<std::slice::Iter<'_, isize> as Iterator>::Item == &&_`\n --> /tmp/tmpa1iovpf9.rs:6:75\n\
    \  |\n6 |     l.iter().cloned().filter(|&x| *x != *x).filter(|&x| !seen.insert(*x)).cloned()\n\
    \  |                                                                         \
    \  ^^^^^^ expected reference, found `isize`\n  |\n  = note: expected reference\
    \ `&&_`\n             found reference `&isize`\n  = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n  = note: 2 redundant requirements hidden\n  = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpa1iovpf9.rs:6:30: 6:43]>, [closure@/tmp/tmpa1iovpf9.rs:6:52"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    let mut iter = l.iter().cloned();\n\
    \    for e in iter {\n        set.insert(e);\n    }\n    set.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpirbavwpr.rs:5:19\n  |\n5 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = vec![];\n    for x in l {\n        if !seen.contains(&x)\
    \ {\n            seen.push(x);\n        }\n    }\n    seen\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpd9e1erru.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut a = l.iter().cloned().collect::<Vec<isize>>();\n \
    \   a.sort();\n    a.dedup();\n    a\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .cloned()\n        .filter(|&x| l.iter().count(|&x|\
    \ x == x) == l.len() - 1)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp38ga73tc.rs:7:31\n    |\n7   |         .filter(|&x| l.iter().count(|&x|\
    \ x == x) == l.len() - 1)\n    |                               ^^^^^ -----------\
    \ supplied 1 argument\n    |                               |\n    |          \
    \                     expected 0 arguments\n    |\nnote: associated function defined\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = HashSet::new();\n    for i in l {\n        v.insert(i);\n\
    \    }\n    v.into_iter().collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp6gijeru7.rs:5:17\n  |\n5 |     let mut v = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.clone();\n    l.sort();\n    let mut last =\
    \ &l[0];\n    loop {\n        let mut i = 1;\n        let mut last2 = last;\n\
    \        while i < l.len() {\n            if l[i..].contains(&last2) {\n     \
    \           last2 = &l[i];\n                i += 1;\n            } else {\n  \
    \              break;\n            }\n        }\n        if last2 == last {\n\
    \            break;\n        }\n        last = last2;\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 3, 3, 3, 5, 5, 9, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp2p7g9f1e.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpn1kf_s9a.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique = Vec::new();\n    let mut seen = HashSet::new();\n\
    \n    for v in l.iter() {\n        if !seen.insert(v).unwrap() {\n           \
    \ unique.push(v);\n        }\n    }\n\n    unique\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpvddtnypd.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvddtnypd.rs:14:5\n   |\n4  | fn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n   |                             ---------- expected `Vec<isize>`\
    \ because of return type\n...\n14 |     unique\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().filter(|x| *x != *x.clone()).collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmptam50mh7.rs:5:40\n\
    \  |\n5 |     l.iter().cloned().filter(|x| *x != *x.clone()).collect()\n  |  \
    \                                      ^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpa3mt6cws.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    let mut res = vec![];\n    while let Some(item)\
    \ = l.iter().min() {\n        if !res.contains(item) {\n            l.push(item);\n\
    \            res.push(item);\n        }\n    }\n    return res;\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp43r1xvb3.rs:9:20\n  |\n9 |\
    \             l.push(item);\n  |                    ^^^^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |           \
    \  l.push(*item);\n  |                    +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp43r1xvb3.rs:10:22\n   |\n10 |             res.push(item);\n   |\
    \                      ^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n10 |             res.push(*item);\n   |    \
    \                  +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut c = vec![];\n    for i in l {\n        if c.iter().any(|&x|\
    \ x == i) {\n            continue;\n        }\n        c.push(i);\n    }\n   \
    \ c.sort_unstable();\n    c\n}\n\nfn main() {\n    let candidate = unique;\n \
    \   assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<_> = HashSet::new();\n    for x in l\
    \ {\n        if !seen.insert(x).is_ok() {\n            continue;\n        }\n\
    \        seen.insert(x);\n    }\n    seen.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp53jwd5lf.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp53jwd5lf.rs:5:32\n  |\n5 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for x in l {\n        if !result.contains(&x)\
    \ {\n            result.push(x);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp3ssr5t_g.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().sorted().dedup().collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp12kx4hcf.rs:5:23\n  |\n5 |     l.iter().cloned().sorted().dedup().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<isize>>().sort().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmp81q_7kc9.rs:5:54\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<isize>>().sort().collect()\n  |\
    \                                                      ^^^^^^^ `()` is not an\
    \ iterator\n  |\n  = note: the following trait bounds were not satisfied:\n  \
    \        `(): Iterator`\n          which is required by `&mut (): Iterator`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut r = l;\n    r.sort();\n    let mut seen: Vec<isize>\
    \ = vec![];\n    for el in &r {\n        if !seen.contains(el) {\n           \
    \ seen.push(el);\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9le2_ka1.rs:10:23\n   |\n\
    10 |             seen.push(el);\n   |                       ^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \           seen.push(*el);\n   |                       +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = vec![];\n    for i in l {\n        if !ret.contains(&i)\
    \ {\n            ret.push(i);\n        }\n    }\n    ret\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp7pq26chr.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    l.iter().cloned().collect::<Vec<_>>().sort_unstable().dedup();\n\
    \    l.iter().cloned().collect::<Vec<_>>().filter(|x| seen.insert(*x).unwrap_or(false)).collect();\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmprfs6mnla.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmprfs6mnla.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: no\
    \ method named `dedup` found for unit type `()` in the current scope\n --> /tmp/tmprfs6mnla.rs:6:59\n\
    \  |\n6 |     l.iter().cloned().collect::<Vec<_>>().sort_unstable().dedup();\n\
    \  |                                                           ^^^^^ method not\
    \ found in `()`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmprfs6mnla.rs:7:43\n\
    \    |\n7   |       l.iter().cloned().collect::<Vec<_>>().filter(|x| seen.insert(*x).unwrap_or(false)).collect();\n\
    \    |                                             ^^^^^^ `Vec<isize>` is not\
    \ an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprfs6mnla.rs:4:29\n\
    \  |\n4 | fn unique(l: Vec<isize>) -> Vec<isize> {\n  |    ------            \
    \       ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0412,\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp5t3md9kj.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut cur = vec![];\n    for\
    \ n in l.iter().cloned() {\n        if cur.contains(&n) {\n            continue;\n\
    \        }\n        result.push(n);\n        cur.push(n);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpxg6s6ldy.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpznnuv7h8.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpgz4_mi3a.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().copied().collect::<Vec<isize>>()\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmph82chipz.rs:5:23\n     |\n5    |  \
    \   l.iter().cloned().copied().collect::<Vec<isize>>()\n     |               \
    \        ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&&_`\n                found reference `&isize`\n     = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\nnote: required by a bound in `copied`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Copied<Cloned<std::slice::Iter<'_, isize>>>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmph82chipz.rs:5:32\n   |\n\
    5  |       l.iter().cloned().copied().collect::<Vec<isize>>()\n   |          \
    \                        ^^^^^^^ method cannot be called on `Copied<Cloned<std::slice::Iter<'_,\
    \ isize>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Cloned<std::slice::Iter<'_, isize>>\
    \ as Iterator>::Item = &_`\n           which is required by `Copied<Cloned<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n           `Copied<Cloned<std::slice::Iter<'_, isize>>>:\
    \ Iterator`\n           which is required by `&mut Copied<Cloned<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().sorted().collect()\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpzp350bam.rs:5:23\n  |\n5 |     l.iter().cloned().sorted().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().dedup().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp1wxzgjxj.rs:5:14\n  |\n5 |     l.iter().dedup().collect()\n\
    \  |              ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect().dedup()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp7tv8llma.rs:5:23\n\
    \  |\n5 |     l.iter().cloned().collect().dedup()\n  |                       ^^^^^^^\
    \ cannot infer type for type parameter `B` declared on the associated function\
    \ `collect`\n  |\n  = note: type must be known at this point\nhelp: consider specifying\
    \ the type argument in the method call\n  |\n5 |     l.iter().cloned().collect::<B>().dedup()\n\
    \  |                              +++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp6xxkfbxy.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .zip(l.iter().cloned())\n        .collect::<Vec<_>>()\n\
    \        .sort_by_key(|&a, &b| a.cmp(&b))\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0593]: closure is expected to take 1 argument, but it takes 2 arguments\n\
    \ --> /tmp/tmprn_8opie.rs:8:10\n  |\n8 |         .sort_by_key(|&a, &b| a.cmp(&b))\n\
    \  |          ^^^^^^^^^^^ -------- takes 2 arguments\n  |          |\n  |    \
    \      expected closure that takes 1 argument\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmprn_8opie.rs:5:5\n  |\n4 |   fn unique(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |                               ---------- expected `Vec<isize>` because\
    \ of return type\n5 | /     l.iter()\n6 | |         .zip(l.iter().cloned())\n\
    7 | |         .collect::<Vec<_>>()\n8 | |         .sort_by_key(|&a, &b| a.cmp(&b))\n\
    \  | |________________________________________^ expected struct `Vec`, found `()`\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0593.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.to_vec();\n    v.sort();\n    v.dedup();\n \
    \   v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut result = vec![];\n\
    \    for (i, v) in l.into_iter().enumerate() {\n        if seen.insert(*v).is_some()\
    \ {\n            result.push(v);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp2ffajkej.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n --> /tmp/tmp2ffajkej.rs:8:24\n  |\n8 |    \
    \     if seen.insert(*v).is_some() {\n  |                        ^^\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0614.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.sort_unstable();\n \
    \   let mut u: Vec<isize> = Vec::new();\n    for i in l.iter() {\n        if !seen.insert(i)\
    \ {\n            u.push(i);\n        }\n    }\n    u\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp_qr_tivo.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_qr_tivo.rs:10:20\n   |\n10 |             u.push(i);\n\
    \   |                    ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n10 |             u.push(*i);\n   |         \
    \           +\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp1awz8isn.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for e in l.iter() {\n        if seen.insert(e).is_none() {\n            ret.push(e);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = unique;\n  \
    \  assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9,\
    \ 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpdo4u_gm7.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdo4u_gm7.rs:12:5\n   |\n4  | fn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n   |                             ---------- expected `Vec<isize>`\
    \ because of return type\n...\n12 |     ret\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<isize>>().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Vec<isize>` in\
    \ the current scope\n --> /tmp/tmp05b_hj2d.rs:5:47\n  |\n5 |     l.iter().cloned().collect::<Vec<isize>>().sorted().collect()\n\
    \  |                                               ^^^^^^ help: there is an associated\
    \ function with a similar name: `is_sorted`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    set.insert(l.iter().cloned().collect::<Vec<_>>());\n\
    \    set.into_iter().cloned().collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp965tbzbs.rs:5:19\n  |\n5 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.sort_unstable();\n\
    \    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() == 0 {\n        return vec![];\n    }\n\n    let\
    \ mut s = l.iter().cloned().collect::<Vec<_>>();\n    s.sort();\n    let mut seen:\
    \ Vec<usize> = vec![];\n    for e in s.iter() {\n        if !seen.contains(&e)\
    \ {\n            seen.push(e);\n        }\n    }\n\n    if seen.len() == 0 {\n\
    \        return vec![];\n    }\n\n    let mut last = seen[0];\n    for i in 1..seen.len()\
    \ {\n        if seen[i] != last {\n            s.swap(0, i);\n            break;\n\
    \        }\n    }\n\n    vec![e for e in s { if e != last { last = e; } else {\
    \ last = std::i32::MAX; break; } }]\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error: no rules expected the token `for`\n  --> /tmp/tmpzy2qn3gw.rs:30:12\n\
    \   |\n30 |     vec![e for e in s { if e != last { last = e; } else { last = std::i32::MAX;\
    \ break; } }]\n   |            ^^^ no rules expected this token in macro call\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzy2qn3gw.rs:13:27\n   |\n13 |\
    \         if !seen.contains(&e) {\n   |                           ^^ expected\
    \ `usize`, found `&isize`\n   |\n   = note: expected reference `&usize`\n    \
    \          found reference `&&isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzy2qn3gw.rs:14:23\n   |\n14 |             seen.push(e);\n   |      \
    \                 ^ expected `usize`, found `&isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if !seen.insert(i) {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpljq8d9a5.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = Vec::new();\n    let mut l = l.to_owned();\n \
    \   loop {\n        if let Some(i) = l.iter().min_by_key(|&x| x.partial_cmp(&s.last())).cloned()\
    \ {\n            s.push(i);\n        } else {\n            break;\n        }\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpla8ahud8.rs:8:65\n  |\n8 |\
    \         if let Some(i) = l.iter().min_by_key(|&x| x.partial_cmp(&s.last())).cloned()\
    \ {\n  |                                                                 ^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \             found reference `&Option<&_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut unique_vec = Vec::new();\n    for elt in l {\n   \
    \     if !unique_vec.contains(&elt) {\n            unique_vec.push(elt);\n   \
    \     }\n    }\n    unique_vec\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp2rg_bgw0.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![];\n    for i in l.iter().cloned() {\n\
    \        if !res.contains(&i) {\n            res.push(i);\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpvl_vdqev.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().sort_unstable().collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Cloned`\
    \ in the current scope\n --> /tmp/tmp8yvo1sz6.rs:5:23\n  |\n5 |     l.iter().cloned().sort_unstable().collect()\n\
    \  |                       ^^^^^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp9a3gqv9m.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().sorted().collect()\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpb4p31q0d.rs:5:23\n  |\n5 |     l.iter().cloned().sorted().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpxq5lsfg6.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpp_6krp2l.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<isize>>().sorted().dedup()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Vec<isize>` in\
    \ the current scope\n --> /tmp/tmp9k30plwa.rs:5:47\n  |\n5 |     l.iter().cloned().collect::<Vec<isize>>().sorted().dedup()\n\
    \  |                                               ^^^^^^ help: there is an associated\
    \ function with a similar name: `is_sorted`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<_>>().sort().collect()\n}\n\
    \nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpy44lb8oj.rs:5:50\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<_>>().sort().collect()\n  |    \
    \                                              ^^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = vec![];\n    for i in l {\n        match ret.binary_search_by(|&x|\
    \ x as usize) {\n            Ok(_) => {\n                ret.append(i);\n    \
    \            Ok(i)\n            }\n            Err(idx) => {\n               \
    \ ret.append(i);\n                Ok(i)\n            }\n        }\n    }\n   \
    \ ret\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaxtqpntz.rs:7:41\n  |\n7 |\
    \         match ret.binary_search_by(|&x| x as usize) {\n  |                 \
    \                        ^^^^^^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaxtqpntz.rs:9:28\n \
    \ |\n9 |                 ret.append(i);\n  |                            ^ expected\
    \ `&mut Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut\
    \ Vec<_>`\n                          found type `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaxtqpntz.rs:10:17\n   |\n7  | /         match ret.binary_search_by(|&x|\
    \ x as usize) {\n8  | |             Ok(_) => {\n9  | |                 ret.append(i);\n\
    10 | |                 Ok(i)\n   | |                 ^^^^^ expected `()`, found\
    \ enum `Result`\n...  |\n15 | |             }\n16 | |         }\n   | |_________-\
    \ expected this to be `()`\n   |\n   = note: expected unit type `()`\n       \
    \            found enum `Result<isize, _>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpaxtqpntz.rs:13:28\n   |\n13 |                 ret.append(i);\n\
    \   |                            ^ expected `&mut Vec<_>`, found `isize`\n   |\n\
    \   = note: expected mutable reference `&mut Vec<_>`\n                       \
    \    found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaxtqpntz.rs:14:17\n\
    \   |\n7  | /         match ret.binary_search_by(|&x| x as usize) {\n8  | |  \
    \           Ok(_) => {\n9  | |                 ret.append(i);\n10 | |        \
    \         Ok(i)\n...  |\n14 | |                 Ok(i)\n   | |                \
    \ ^^^^^ expected `()`, found enum `Result`\n15 | |             }\n16 | |     \
    \    }\n   | |_________- expected this to be `()`\n   |\n   = note: expected unit\
    \ type `()`\n                   found enum `Result<isize, _>`\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut a = l.iter().cloned().collect::<Vec<_>>();\n    a.sort();\n\
    \    a.dedup();\n    a\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = l.to_vec();\n    loop {\n        let last =\
    \ res.last();\n        if !l.contains(last) {\n            break;\n        }\n\
    \        res.truncate(last);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwngmqvwy.rs:8:24\n  |\n8 |\
    \         if !l.contains(last) {\n  |                        ^^^^ expected `&isize`,\
    \ found enum `Option`\n  |\n  = note: expected reference `&isize`\n          \
    \        found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpwngmqvwy.rs:11:22\n   |\n11 |         res.truncate(last);\n   |    \
    \                  ^^^^ expected `usize`, found enum `Option`\n   |\n   = note:\
    \ expected type `usize`\n              found enum `Option<&isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for el in l {\n        if\
    \ !result.contains(&el) {\n            result.push(el);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpuxtmhdy3.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    set.insert(l.iter().cloned().collect());\n\
    \    set.values().cloned().collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpv39lo15a.rs:5:19\n  |\n5 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    set.insert(l.iter().cloned());\n\
    \    let mut v = Vec::new();\n    set.into_iter().for_each(|x| v.push(x));\n \
    \   v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp8b38o8g9.rs:5:19\n  |\n5 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpepnmaqc8.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut i = l.iter().position(|&x| x == l.iter().next());\n\
    \    l.sort_unstable();\n    l = l.iter().skip(i).cloned().collect();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2po4ifwu.rs:5:45\n  |\n5 |\
    \     let mut i = l.iter().position(|&x| x == l.iter().next());\n  |         \
    \                                    ^^^^^^^^^^^^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp2po4ifwu.rs:7:23\n  |\n7 |    \
    \ l = l.iter().skip(i).cloned().collect();\n  |                       ^ expected\
    \ `usize`, found enum `Option`\n  |\n  = note: expected type `usize`\n       \
    \      found enum `Option<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpzh4fn8a_.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    result.push(*l.iter().cloned().collect::<Vec<isize>>());\n\
    \    result.sort_unstable();\n    for i in 0..result.len() {\n        if i > 0\
    \ && result[i] != result[i-1] {\n            result.swap(i-1, i);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmp0da959tq.rs:6:17\n    |\n6   |     result.push(*l.iter().cloned().collect::<Vec<isize>>());\n\
    \    |            ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have\
    \ a size known at compile-time\n    |            |\n    |            required\
    \ by a bound introduced by this call\n    |\n    = help: the trait `Sized` is\
    \ not implemented for `[isize]`\nnote: required by a bound in `Vec::<T, A>::push`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n   --> /tmp/tmp0da959tq.rs:5:22\n    |\n5   |     let mut result = Vec::new();\n\
    \    |                      ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `[isize]`\nnote:\
    \ required by a bound in `Vec::<T>::new`\n\nerror[E0277]: the size for values\
    \ of type `[isize]` cannot be known at compilation time\n   --> /tmp/tmp0da959tq.rs:5:22\n\
    \    |\n5   |     let mut result = Vec::new();\n    |                      ^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `[isize]`\nnote: required by a bound in `Vec`\n\nerror[E0599]:\
    \ no method named `sort_unstable` found for struct `Vec` in the current scope\n\
    \ --> /tmp/tmp0da959tq.rs:7:12\n  |\n7 |     result.sort_unstable();\n  |    \
    \        ^^^^^^^^^^^^^ method not found in `Vec<[isize]>`\n\nerror[E0599]: the\
    \ method `len` exists for struct `Vec<[isize]>`, but its trait bounds were not\
    \ satisfied\n --> /tmp/tmp0da959tq.rs:8:24\n  |\n8 |     for i in 0..result.len()\
    \ {\n  |                        ^^^ private field, not a method\n  |\n  = note:\
    \ the following trait bounds were not satisfied:\n          `[isize]: Sized`\n\
    \nerror[E0608]: cannot index into a value of type `Vec<[isize]>`\n --> /tmp/tmp0da959tq.rs:9:21\n\
    \  |\n9 |         if i > 0 && result[i] != result[i-1] {\n  |                \
    \     ^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `Vec<[isize]>`\n\
    \ --> /tmp/tmp0da959tq.rs:9:34\n  |\n9 |         if i > 0 && r"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().cloned().chain(l.iter()).cloned().filter(|x|\
    \ l.iter().find(|&y| y != x).is_none()).cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp8x3x33z3.rs:5:23\n     |\n5    |  \
    \   l.iter().cloned().cloned().chain(l.iter()).cloned().filter(|x| l.iter().find(|&y|\
    \ y != x).is_none()).cloned().collect()\n     |                       ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&&_`\n  \
    \              found reference `&isize`\n     = note: required because of the\
    \ requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `chain` exists\
    \ for struct `Cloned<Cloned<std::slice::Iter<'_, isize>>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmp8x3x33z3.rs:5:32\n   |\n5  |       l.iter().cloned().cloned().chain(l.iter()).cloned().filter(|x|\
    \ l.iter().find(|&y| y != x).is_none()).cloned().collect()\n   |             \
    \                     ^^^^^ method cannot be called on `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Cloned<std::slice::Iter<'_, isize>>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n           `Cloned<Cloned<std::slice::Iter<'_, isize>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().sorted().collect()\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp9rq_8gtd.rs:5:23\n  |\n5 |     l.iter().cloned().sorted().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: Vec<usize> = Vec::new();\n    l.iter().cloned().filter(|&i|\
    \ seen.contains(&i)).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdr__lx7u.rs:6:49\n  |\n6 |\
    \     l.iter().cloned().filter(|&i| seen.contains(&i)).collect::<Vec<_>>()\n \
    \ |                                                 ^^ expected `usize`, found\
    \ `isize`\n  |\n  = note: expected reference `&usize`\n             found reference\
    \ `&isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = Vec::new();\n    for (i, e) in l.iter().enumerate()\
    \ {\n        if v.iter().any(|v| *v == e) {\n            continue;\n        }\n\
    \        v.push(e);\n    }\n    v.sort_unstable();\n    v\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9dvhrdrj.rs:13:5\n   |\n\
    4  | fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n13 |     v\n\
    \   |     ^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    let mut cur = l;\n    while\
    \ let Some(elem) = cur.iter().cloned().peekable().next() {\n        match res.iter().position(|&a|\
    \ a == elem) {\n            Some(index) => {\n                res.remove(index);\n\
    \                cur.next()\n            }\n            None => {\n          \
    \      res.push(elem);\n                cur = Vec::new();\n            }\n   \
    \     }\n    }\n    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `next` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmpoka4djek.rs:11:21\n   |\n11 |                 cur.next()\n\
    \   |                     ^^^^ method not found in `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n    v.sort();\n\
    \    v.dedup();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = vec![];\n    l.sort_unstable();\n    for v in\
    \ l {\n        if v.is_unique() {\n            v.push(i);\n        }\n    }\n\
    \    v.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n --> /tmp/tmp6d3j6ptz.rs:9:20\n\
    \  |\n9 |             v.push(i);\n  |                    ^ help: a local variable\
    \ with a similar name exists: `l`\n\nerror[E0599]: no method named `is_unique`\
    \ found for type `isize` in the current scope\n --> /tmp/tmp6d3j6ptz.rs:8:14\n\
    \  |\n8 |         if v.is_unique() {\n  |              ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `push` found for type `isize` in\
    \ the current scope\n --> /tmp/tmp6d3j6ptz.rs:9:15\n  |\n9 |             v.push(i);\n\
    \  |               ^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = HashSet::new();\n    let mut i = 0;\n    let mut\
    \ out = Vec::with_capacity(l.len());\n    while i < l.len() {\n        if !s.insert(l[i])\
    \ {\n            i += 1;\n            continue;\n        }\n        out.push(l[i]);\n\
    \        i += 1;\n    }\n    out\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpkcoxm14f.rs:5:17\n  |\n5 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n\n    let mut seen = HashSet::new();\n\
    \    loop {\n        if l.len() == 0 {\n            break;\n        }\n      \
    \  let mut el = l.remove(0);\n\n        while !seen.contains(&el) {\n        \
    \    seen.insert(el);\n            el = l.remove(0);\n        }\n\n        l.push(el);\n\
    \    }\n\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplfhoiqrc.rs:8:20\n  |\n8 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp5ah88uh9.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut x = l.clone();\n    x.sort();\n    x.unique();\n \
    \   x\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unique` found for struct `Vec<isize>` in\
    \ the current scope\n --> /tmp/tmpv_z8822j.rs:7:7\n  |\n7 |     x.unique();\n\
    \  |       ^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpvcex59cj.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    for e in l {\n  \
    \      v.push(*e);\n    }\n    v.sort_unstable();\n    v\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpqgp23xg1.rs:7:16\n\
    \  |\n7 |         v.push(*e);\n  |                ^^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<_>>().sort_unstable().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpvj5edzk0.rs:5:59\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<_>>().sort_unstable().collect()\n\
    \  |                                                           ^^^^^^^ `()` is\
    \ not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmphufnaxdy.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut set = HashSet::new();\n    set.extend(l);\n    set.into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp49jsz3mv.rs:5:19\n  |\n5 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp9chwqvfz.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .cloned()\n        .group_by(|&i| i)\n \
    \       .map(|(_, list)| list.iter().cloned().collect::<Vec<_>>())\n        .flatten(1)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `group_by` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp60dgm52i.rs:7:10\n  |\n7 |         .group_by(|&i|\
    \ i)\n  |          ^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for e in l {\n        if\
    \ !result.contains(&e) {\n            result.push(e);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpjnjq6tgc.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpj3flm88o.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpezy2i_5a.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for (i, e) in l.iter().enumerate()\
    \ {\n        if !result.contains(&e) {\n            result.push(e);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvwnc2tnt.rs:11:5\n   |\n\
    4  | fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n11 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() == 0 {\n        return vec![];\n    }\n    let\
    \ mut seen = vec![];\n    for &n in l {\n        if !seen.contains(&n) {\n   \
    \         seen.push(&n);\n        }\n    }\n    seen\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7phhaf6c.rs:9:9\n  |\n9 |\
    \     for &n in l {\n  |         ^^    - this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7phhaf6c.rs:11:23\n   |\n11 |             seen.push(&n);\n   |\
    \                       ^^ cyclic type of infinite size\n   |\nhelp: consider\
    \ removing the borrow\n   |\n11 -             seen.push(&n);\n11 +           \
    \  seen.push(n);\n   | \n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::new();\n    for e in l {\n        if !ret.contains(e)\
    \ {\n            ret.append(e);\n        }\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfylmsatf.rs:7:26\n  |\n7 |\
    \         if !ret.contains(e) {\n  |                          ^\n  |         \
    \                 |\n  |                          expected reference, found `isize`\n\
    \  |                          help: consider borrowing here: `&e`\n  |\n  = note:\
    \ expected reference `&_`\n                  found type `isize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpfylmsatf.rs:8:24\n  |\n8 |             ret.append(e);\n\
    \  |                        ^ expected `&mut Vec<_>`, found `isize`\n  |\n  =\
    \ note: expected mutable reference `&mut Vec<_>`\n                          found\
    \ type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = Vec::new();\n    for &elt in l {\n        if !s.contains(&elt)\
    \ {\n            s.push(elt);\n        }\n    }\n    s\n}\n\nfn main() {\n   \
    \ let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkbm3m9sy.rs:6:9\n  |\n6 |\
    \     for &elt in l {\n  |         ^^^^    - this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `elt`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    seen.insert(0);\n\
    \    seen.insert(l.clone());\n    for &v in seen.iter() {\n        if v.is_empty()\
    \ {\n            break;\n        }\n        if let Some(i) = l.iter().position(|&v|\
    \ *v == *v) {\n            l.swap(l, i);\n        }\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpf9tl0wt9.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpf9tl0wt9.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpf9tl0wt9.rs:12:49\n   |\n12 |\
    \         if let Some(i) = l.iter().position(|&v| *v == *v) {\n   |          \
    \                                       ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpf9tl0wt9.rs:12:55\n   |\n12 |         if let\
    \ Some(i) = l.iter().position(|&v| *v == *v) {\n   |                         \
    \                              ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf9tl0wt9.rs:13:20\n\
    \   |\n13 |             l.swap(l, i);\n   |                    ^ expected `usize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `usize`\n            found\
    \ struct `Vec<isize>`\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0412, E0433, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.to_owned();\n    l.sort();\n\n    let mut unique\
    \ = vec![l.first().unwrap()];\n    for el in l.iter().skip(1) {\n        if !unique.contains(el)\
    \ {\n            unique.push(el);\n        }\n    }\n    unique\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo0ckuh1i.rs:10:29\n   |\n\
    10 |         if !unique.contains(el) {\n   |                             ^^ expected\
    \ `&isize`, found `isize`\n   |\n   = note: expected reference `&&isize`\n   \
    \           found reference `&isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpo0ckuh1i.rs:14:5\n   |\n4  | fn unique(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |                             ---------- expected `Vec<isize>` because\
    \ of return type\n...\n14 |     unique\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp_h6yjqg5.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: Vec<isize> = vec![];\n    for i in l.iter().cloned().uniq(|&x|\
    \ *x != i).cloned() {\n        if !seen.contains(&i) {\n            seen.push(i);\n\
    \        }\n    }\n    seen\n}\n\nfn main() {\n    let candidate = unique;\n \
    \   assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n --> /tmp/tmpt2ubqjkz.rs:6:48\n\
    \  |\n6 |     for i in l.iter().cloned().uniq(|&x| *x != i).cloned() {\n  |  \
    \                                              ^ help: a local variable with a\
    \ similar name exists: `l`\n\nerror[E0599]: no method named `uniq` found for struct\
    \ `Cloned` in the current scope\n --> /tmp/tmpt2ubqjkz.rs:6:32\n  |\n6 |     for\
    \ i in l.iter().cloned().uniq(|&x| *x != i).cloned() {\n  |                  \
    \              ^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = Set::new();\n    l.iter().cloned().filter(|&x|\
    \ seen.insert(x)).collect()\n}\n\nfn main() {\n    let candidate = unique;\n \
    \   assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Set`\n --> /tmp/tmp8zx1ab75.rs:5:20\n\
    \  |\n5 |     let mut seen = Set::new();\n  |                    ^^^ use of undeclared\
    \ type `Set`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpc9yw3rq_.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::with_capacity(l.len());\n    let mut\
    \ seen = HashSet::new();\n    for x in l.iter() {\n        if !seen.insert(x).unwrap()\
    \ {\n            result.push(x);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpt0i64zws.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt0i64zws.rs:12:5\n   |\n4  | fn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n   |                             ---------- expected `Vec<isize>`\
    \ because of return type\n...\n12 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.iter().cloned().collect();\n    l.sort();\n\
    \    let mut res = vec![];\n    for i in l {\n        match res {\n          \
    \  vec![None] => res.push(i),\n            x => {\n                if i != *x.as_ptr()\
    \ {\n                    res.push(i);\n                }\n            }\n    \
    \    }\n    }\n    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpp_q46aem.rs:10:13\n\
    \   |\n10 |             vec![None] => res.push(i),\n   |             ^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0282]: type annotations\
    \ needed\n --> /tmp/tmpp_q46aem.rs:6:5\n  |\n5 |     let mut l = l.iter().cloned().collect();\n\
    \  |         ----- consider giving `l` a type\n6 |     l.sort();\n  |     ^ cannot\
    \ infer type\n  |\n  = note: type must be known at this point\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.dedup_by(|&i| seen.insert(i));\n\
    \    seen\n        .into_iter()\n        .cloned()\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpd68cd0ar.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0593]: closure\
    \ is expected to take 2 arguments, but it takes 1 argument\n --> /tmp/tmpd68cd0ar.rs:6:7\n\
    \  |\n6 |     l.dedup_by(|&i| seen.insert(i));\n  |       ^^^^^^^^ ---- takes\
    \ 1 argument\n  |       |\n  |       expected closure that takes 2 arguments\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0593.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmph10kc7xe.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<isize> = l.iter().cloned().collect();\n   \
    \ v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 2, 3, 3, 3, 5, 5, 9, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp1c5d5lri.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().sorted().dedup()\n}\n\nfn main() {\n   \
    \ let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpaqoz138j.rs:5:23\n  |\n5 |     l.iter().cloned().sorted().dedup()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp8e63kju8.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpe77j_f8q.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut x = HashSet::new();\n    for elt in l {\n        if\
    \ !x.contains(&elt) {\n            x.insert(elt);\n        }\n    }\n    x.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp0agrc06s.rs:5:17\n  |\n5 |     let mut x = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.iter().cloned().filter(|x|\
    \ seen.insert(x)).collect()\n}\n\nfn main() {\n    let candidate = unique;\n \
    \   assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp8fparrtx.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.iter().cloned().filter(|&x|\
    \ seen.insert(x).unwrap()).collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp3dcc5gv1.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<isize> = vec![];\n    v.extend(l.iter().cloned());\n\
    \    v.dedup();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp_8h_f2u1.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = vec![false; l.len()];\n    l.sort_unstable_by(|a,\
    \ b| a.cmp(b).unwrap());\n    seen.reverse();\n    seen\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for enum `std::cmp::Ordering`\
    \ in the current scope\n --> /tmp/tmplbach6zb.rs:6:40\n  |\n6 |     l.sort_unstable_by(|a,\
    \ b| a.cmp(b).unwrap());\n  |                                        ^^^^^^ method\
    \ not found in `std::cmp::Ordering`\n\nerror[E0308]: mismatched types\n --> /tmp/tmplbach6zb.rs:8:5\n\
    \  |\n4 | fn unique(l: Vec<isize>) -> Vec<isize> {\n  |                      \
    \       ---------- expected `Vec<isize>` because of return type\n...\n8 |    \
    \ seen\n  |     ^^^^ expected `isize`, found `bool`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `Vec<bool>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n    l.sort_unstable();\n\
    \    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    l.iter().for_each(|&x|\
    \ *seen.add(x));\n    l.iter().filter(|&x| *seen.add(x)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpoqamijrn.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpoqamijrn.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0277]: a\
    \ value of type `Vec<isize>` cannot be built from an iterator over elements of\
    \ type `&isize`\n    --> /tmp/tmpoqamijrn.rs:7:40\n     |\n7    |     l.iter().filter(|&x|\
    \ *seen.add(x)).collect()\n     |                                        ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<isize>>().sort_unstable().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmp8ccvw_hf.rs:5:63\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<isize>>().sort_unstable().collect()\n\
    \  |                                                               ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut u: Vec<isize> = Vec::new();\n    for x in l {\n  \
    \      if !u.contains(&x) {\n            u.push(x);\n        }\n    }\n    u\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpodhy1p4n.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_list = l;\n    sorted_list.sort();\n    sorted_list.dedup();\n\
    \    sorted_list\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for e in l {\n        if\
    \ !result.contains(&e) {\n            result.push(e);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpwayta0th.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<_>>().sort().collect()\n}\n\
    \nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpsd0uumjx.rs:5:50\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<_>>().sort().collect()\n  |    \
    \                                              ^^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<isize>>().sort_unstable().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmptr2o7vlv.rs:5:63\n\
    \  |\n5 |     l.iter().cloned().collect::<Vec<isize>>().sort_unstable().collect()\n\
    \  |                                                               ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.to_vec();\n    v.sort_unstable();\n    v.into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpmj1gc318.rs:7:19\n     |\n7    |     v.into_iter().cloned().collect()\n\
    \     |                   ^^^^^^ expected reference, found `isize`\n     |\n \
    \    = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpmj1gc318.rs:7:28\n   |\n7  |       v.into_iter().cloned().collect()\n\
    \   |                              ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<_> = HashSet::new();\n    l.iter().filter(|&v|\
    \ !seen.insert(v).unwrap()).collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp9i81gbdt.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp9i81gbdt.rs:5:32\n  |\n5 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmp9i81gbdt.rs:6:52\n     |\n6    |     l.iter().filter(|&v| !seen.insert(v).unwrap()).collect()\n\
    \     |                                                    ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.dedup().collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpsemvqkbz.rs:5:15\n\
    \  |\n5 |     l.dedup().collect()\n  |               ^^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.iter().cloned().filter(|&x|\
    \ seen.insert(x).is_some()).collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpap9_ta_w.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp1574goxg.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = l;\n    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for i in ret {\n        if seen.contains(i) {\n            continue;\n  \
    \      } else {\n            seen.insert(i);\n            ret.retain(|i| i ==\
    \ i);\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpaswfsnvp.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpaswfsnvp.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_l = l;\n    sorted_l.sort();\n    sorted_l.dedup();\n\
    \    sorted_l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    for e in l {\n  \
    \      if v.contains(&e) {\n            continue;\n        }\n        v.push(e);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpn988uaiq.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp_lb01u4c.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    // Using unique set can save us some time and space\n    let\
    \ mut unique_set = std::collections::HashSet::new();\n    for ele in l {\n   \
    \     if !unique_set.insert(ele).is_included() {\n            unique_set.insert(ele);\n\
    \        }\n    }\n    unique_set.into_iter().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_included` found for type `bool` in the\
    \ current scope\n --> /tmp/tmp4hpjxfco.rs:8:36\n  |\n8 |         if !unique_set.insert(ele).is_included()\
    \ {\n  |                                    ^^^^^^^^^^^ method not found in `bool`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect::<Vec<_>>().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Vec<isize>` in\
    \ the current scope\n --> /tmp/tmpeueacipn.rs:5:43\n  |\n5 |     l.iter().cloned().collect::<Vec<_>>().sorted().collect()\n\
    \  |                                           ^^^^^^ help: there is an associated\
    \ function with a similar name: `is_sorted`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = l;\n    ret .sort();\n    let mut idx = 1;\n\
    \    while idx < ret.len() {\n        if ret[idx] == ret[idx-1] {\n          \
    \  ret.remove_index(idx);\n        } else {\n            idx += 1;\n        }\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `remove_index` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpq0pzvl16.rs:10:17\n   |\n10 |          \
    \   ret.remove_index(idx);\n   |                 ^^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `remove`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.iter().cloned().filter(|&el|\
    \ seen.insert(el).is_some()).collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmppn7e59_r.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut vec = l.to_vec();\n    std::mem::swap(vec.as_mut_slice(),\
    \ vec.as_mut_slice().to_owned());\n    vec.sort();\n    vec\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmpns_xc_i_.rs:6:5\n    |\n6   |     std::mem::swap(vec.as_mut_slice(),\
    \ vec.as_mut_slice().to_owned());\n    |     ^^^^^^^^^^^^^^ doesn't have a size\
    \ known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `[isize]`\nnote: required by a bound in `std::mem::swap`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpns_xc_i_.rs:6:40\n  |\n6 |     std::mem::swap(vec.as_mut_slice(),\
    \ vec.as_mut_slice().to_owned());\n  |                                       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |                                        |\n\
    \  |                                        expected `&mut [isize]`, found struct\
    \ `Vec`\n  |                                        help: consider mutably borrowing\
    \ here: `&mut vec.as_mut_slice().to_owned()`\n  |\n  = note: expected mutable\
    \ reference `&mut [isize]`\n                        found struct `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = l.to_vec();\n    std::iter::UniqueEq.sort_unstable(&mut\
    \ result);\n    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `UniqueEq` in module `std::iter`\n -->\
    \ /tmp/tmpza0yhj4a.rs:6:16\n  |\n6 |     std::iter::UniqueEq.sort_unstable(&mut\
    \ result);\n  |                ^^^^^^^^ not found in `std::iter`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.dedup().copied().into_iter().filter_map(move\
    \ |v| {\n        if seen.contains(&v) {\n            None\n        } else {\n\
    \            Some(v)\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp6j2j2r92.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: `()`\
    \ is not an iterator\n --> /tmp/tmp6j2j2r92.rs:6:15\n  |\n6 |     l.dedup().copied().into_iter().filter_map(move\
    \ |v| {\n  |               ^^^^^^ `()` is not an iterator\n  |\n  = note: the\
    \ following trait bounds were not satisfied:\n          `(): Iterator`\n     \
    \     which is required by `&mut (): Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp6pda8y2c.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for el in l.iter() {\n \
    \       if !result.contains(&el) {\n            result.push(el);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp26w9zot_.rs:11:5\n   |\n\
    4  | fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                          \
    \   ---------- expected `Vec<isize>` because of return type\n...\n11 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.dedup_by(|&x, &y| x.cmp(&y))\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpev18y20z.rs:5:17\n  |\n5 |\
    \     l.dedup_by(|&x, &y| x.cmp(&y))\n  |                 ^--\n  |           \
    \      ||\n  |                 |expected due to this\n  |                 types\
    \ differ in mutability\n  |                 help: did you mean `x`: `&&mut isize`\n\
    \  |\n  = note: expected mutable reference `&mut isize`\n                    \
    \ found reference `&_`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpev18y20z.rs:5:21\n\
    \  |\n5 |     l.dedup_by(|&x, &y| x.cmp(&y))\n  |                     ^--\n  |\
    \                     ||\n  |                     |expected due to this\n  | \
    \                    types differ in mutability\n  |                     help:\
    \ did you mean `y`: `&&mut isize`\n  |\n  = note: expected mutable reference `&mut\
    \ isize`\n                     found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpev18y20z.rs:5:5\n  |\n4 | fn unique(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |                             ---------- expected `Vec<isize>` because\
    \ of return type\n5 |     l.dedup_by(|&x, &y| x.cmp(&y))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\nnote: method `dedup_by` modifies its receiver\
    \ in-place\n --> /tmp/tmpev18y20z.rs:5:7\n  |\n5 |     l.dedup_by(|&x, &y| x.cmp(&y))\n\
    \  |     - ^^^^^^^^ this call modifies `l` in-place\n  |     |\n  |     you probably\
    \ want to use this value after calling the method...\n  = note: ...instead of\
    \ the `()` output of method `dedup_by`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().dedup().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp_3zdx60n.rs:5:23\n  |\n5 |     l.iter().cloned().dedup().collect()\n\
    \  |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::new();\n    let mut seen = HashSet::new();\n\
    \    for el in l {\n        if seen.insert(el).is_none() {\n            ret.push(el);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = unique;\n  \
    \  assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9,\
    \ 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp3h8i4jir.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpctzaxrkb.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().sorted().collect()\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp8qgampsz.rs:5:23\n  |\n5 |     l.iter().cloned().sorted().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen: HashSet<isize> = HashSet::new();\n    l.sort();\n\
    \    l.dedup();\n    l.iter().cloned().filter(|&x| !seen.insert(x).unwrap_or(false)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3l8uae99.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp3l8uae99.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut seen = HashSet::new();\n    l.iter().cloned().map(|&x|\
    \ {\n        if !seen.contains(x) {\n            seen.insert(x);\n           \
    \ x\n        } else {\n            0\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp2pvdwuvx.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp2pvdwuvx.rs:6:28\n  |\n6 |     l.iter().cloned().map(|&x|\
    \ {\n  |                            ^--\n  |                            ||\n \
    \ |                            |expected due to this\n  |                    \
    \        expected `isize`, found reference\n  |                            help:\
    \ did you mean `x`: `&isize`\n  |\n  = note:   expected type `isize`\n       \
    \   found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut d = HashSet::new();\n    d.insert(l);\n    let mut\
    \ l = vec![];\n    for (el) in d {\n        l.push(el);\n    }\n    l\n}\n\nfn\
    \ main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp1qsrtpe_.rs:5:17\n  |\n5 |     let mut d = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nwarning: unnecessary\
    \ parentheses around pattern\n --> /tmp/tmp1qsrtpe_.rs:8:9\n  |\n8 |     for (el)\
    \ in d {\n  |         ^  ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n  |\n8 -     for (el) in d {\n8 +     for el in\
    \ d {\n  | \n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut list = Vec::new();\n    for x in l {\n        if !list.contains(&x)\
    \ {\n            list.push(x);\n        }\n    }\n    list\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp72ggwpcr.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.to_owned();\n    l.sort();\n    let mut i =\
    \ 1;\n    let mut j = l.len() - 1;\n    while i <= j {\n        if l[i] == l[j]\
    \ {\n            i += 1;\n            j -= 1;\n        } else {\n            l.swap(i,\
    \ j);\n            i += 1;\n            j -= 1;\n        }\n    }\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 123, 9, 5, 5, 3, 3, 3, 2]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp17e5riik.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = vec![];\n    v.extend(l);\n\n    v.dedup();\n\n\
    \    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpi84gj2_b.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpj8udc9y1.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpndy9grgr.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for i in l {\n        if !result.contains(&i)\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmph_d1rx8i.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
