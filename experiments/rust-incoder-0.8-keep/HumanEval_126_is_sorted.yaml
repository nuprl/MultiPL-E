name: HumanEval_126_is_sorted
language: rust
prompt: "/// Given a list of numbers, return whether or not they are sorted\n/// in\
  \ ascending order. If list has more than 1 duplicate of the same\n/// number, return\
  \ False. Assume no negative numbers and only integers.\n/// Examples\n/// is_sorted([5])\
  \ \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n/// is_sorted([1, 3,\
  \ 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n/// is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
  /// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n/// is_sorted([1, 2, 2, 2, 3, 4])\
  \ \u279E False\nfn is_sorted(lst: Vec<isize>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]),\
  \ true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1,\
  \ 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n\
  \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1,\
  \ 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n\
  \    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2,\
  \ 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n\
  \    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n"
completions: []
stop_tokens:
- "\n}"
