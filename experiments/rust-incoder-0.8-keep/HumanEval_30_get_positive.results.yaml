name: HumanEval_30_get_positive
language: rust
results:
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_list = l;\n    new_list.sort();\n    new_list.iter().filter_map(|&i|\
    \ if i < 0 {\n        None\n    } else {\n        Some(i)\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 3, 3, 5, 9, 123]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpw2et072n.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_list = l.to_owned();\n    new_list.sort();\n \
    \   new_list.dedup();\n    new_list.dedup();\n    new_list\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpfgjhhbwk.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa3emgb3e.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpa3emgb3e.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcxpx8o3t.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpcxpx8o3t.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut neg: Vec<isize> = Vec::new();\n    let mut neg_included:\
    \ Vec<isize> = Vec::new();\n\n    for v in l {\n        if v < 0 {\n         \
    \   neg.push(v);\n        } else {\n            neg_included.push(v);\n      \
    \  }\n    }\n\n    if neg.len() > 0 {\n        neg.sort();\n        neg_included.sort();\n\
    \        neg.reverse();\n        neg_included.reverse();\n    }\n\n    neg.extend(neg_included);\n\
    \n    neg\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2, 6, 5, 4]`,\n right: `[4, 5, 6]`', /tmp/tmpgxfbv0jr.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0bhd71da.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp0bhd71da.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![0; l.len()];\n    for i in l.iter() {\n\
    \        if i < 0 {\n            i += 2;\n        } else {\n            i += 1;\n\
    \        }\n        res[i - 1] = i;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr7l2upi3.rs:9:16\n  |\n9 |\
    \         if i < 0 {\n  |                ^\n  |                |\n  |        \
    \        expected `&isize`, found integer\n  |                help: consider borrowing\
    \ here: `&0`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `&isize`\n  --> /tmp/tmpr7l2upi3.rs:10:13\n   |\n10 |             i\
    \ += 2;\n   |             -^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `&isize`\n   |\nhelp: `+=` can be used on `isize`, you can\
    \ dereference `i`\n   |\n10 |             *i += 2;\n   |             +\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&isize`\n  --> /tmp/tmpr7l2upi3.rs:12:13\n\
    \   |\n12 |             i += 1;\n   |             -^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `&isize`\n   |\nhelp: `+=` can be used\
    \ on `isize`, you can dereference `i`\n   |\n12 |             *i += 1;\n   | \
    \            +\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpr7l2upi3.rs:14:9\n   |\n14 |         res[i - 1] = i;\n   |    \
    \     ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .cloned()\n        .filter(|&x| x > 0isize)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n   \
    \ assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_3atrb01.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp_3atrb01.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgr28ylak.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpgr28ylak.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptkrfwbwm.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmptkrfwbwm.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positives = Vec::new();\n    for x in l {\n      \
    \  if x > 0 {\n            positives.push(x);\n        }\n    }\n    positives\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect::<Vec<isize>>()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2zpi0gzk.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect::<Vec<isize>>()\n  |               \
    \               ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmp2zpi0gzk.rs:7:33\n     |\n7    |     l.iter().filter(|x| x >=\
    \ 0).collect::<Vec<isize>>()\n     |                                 ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pos = 0;\n    for x in l {\n        if x >= 0 {\n\
    \            pos += 1;\n        }\n    }\n    vec![pos]\n}\n\nfn main() {\n  \
    \  let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[4, 5, 6]`', /tmp/tmpwz37m8_r.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = l.clone();\n    for value in &l {\n     \
    \   if value >= 0 {\n            result.push(value);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppiz7viv4.rs:9:21\n  |\n9 |\
    \         if value >= 0 {\n  |                     ^\n  |                    \
    \ |\n  |                     expected `&isize`, found integer\n  |           \
    \          help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppiz7viv4.rs:10:25\n   |\n10 |             result.push(value);\n\
    \   |                         ^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n10 |             result.push(*value);\n\
    \   |                         +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdit9pizk.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpdit9pizk.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.clone();\n    v.sort();\n    let mut result\
    \ = vec![];\n    for i in v {\n        if i < 0 {\n            continue;\n   \
    \     }\n        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 2, 3, 3, 3, 5, 9, 123]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmp5ed8lr72.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.is_empty() {\n        return l;\n    }\n    l.iter().filter(|&x|\
    \ x > 0).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwy_go34j.rs:10:30\n   |\n\
    10 |     l.iter().filter(|&x| x > 0).collect::<Vec<isize>>()\n   |           \
    \                   ^\n   |                              |\n   |             \
    \                 expected `&isize`, found integer\n   |                     \
    \         help: consider borrowing here: `&0`\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmpwy_go34j.rs:10:33\n     |\n10   |     l.iter().filter(|&x| x\
    \ > 0).collect::<Vec<isize>>()\n     |                                 ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() <= 0 {\n        return l;\n    }\n    let mut n\
    \ = l.len();\n    let mut v1 = vec![];\n    let mut v2 = vec![];\n    while n\
    \ > 0 {\n        let mut min = i32::MAX;\n        for i in 0..n {\n          \
    \  if l[i] < min {\n                min = l[i];\n            }\n        }\n  \
    \      v1.push(min);\n        n -= 1;\n    }\n    while n >= 0 {\n        let\
    \ mut max = i32::MIN;\n        for i in 0..n {\n            if l[i] > max {\n\
    \                max = l[i];\n            }\n        }\n        v2.push(max);\n\
    \        n -= 1;\n    }\n    vec![v1, v2]\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpniwqsana.rs:16:23\n   |\n\
    16 |             if l[i] < min {\n   |                       ^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n16 |             if l[i] < min.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpniwqsana.rs:17:23\n   |\n14 |         let mut min = i32::MAX;\n\
    \   |                       -------- expected due to this value\n...\n17 |   \
    \              min = l[i];\n   |                       ^^^^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpniwqsana.rs:26:23\n\
    \   |\n26 |             if l[i] > max {\n   |                       ^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n26 |             if l[i] > max.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpniwqsana.rs:27:23\n   |\n24 |         let mut max = i32::MIN;\n\
    \   |                       -------- expected due to this value\n...\n27 |   \
    \              max = l[i];\n   |                       ^^^^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpniwqsana.rs:33:10\n\
    \   |\n33 |     vec![v1, v2]\n   |          ^^ expected `isize`, found struct\
    \ `Vec`\n   |\n   = note: expected type `isize`\n            found struct `Vec<i32>`\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut list = l.to_vec();\n    list.sort();\n    list\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp_2_g0mr5.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    for e in l {\n\
    \        if e > 0 {\n            ret.push(e);\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.is_empty() {\n        return Vec::new();\n    }\n   \
    \ let mut l = l.to_vec();\n    l.sort();\n    let mut positive = Vec::new();\n\
    \    positive.push(l.iter().max().unwrap());\n    for v in l {\n        if v >=\
    \ 0 {\n            positive.push(v);\n        }\n    }\n    positive\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lekftrq.rs:16:27\n   |\n\
    16 |             positive.push(v);\n   |                           ^\n   |   \
    \                        |\n   |                           expected `&isize`,\
    \ found `isize`\n   |                           help: consider borrowing here:\
    \ `&v`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4lekftrq.rs:19:5\n   |\n\
    6  | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    19 |     positive\n   |     ^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive: Vec<isize> = l.iter().filter_map(|x| if\
    \ x > 0 { Some(x) } else { None }).collect();\n    positive.sort();\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw9rr510t.rs:7:67\n  |\n7 |\
    \     let mut positive: Vec<isize> = l.iter().filter_map(|x| if x > 0 { Some(x)\
    \ } else { None }).collect();\n  |                                           \
    \                        ^\n  |                                              \
    \                     |\n  |                                                 \
    \                  expected `&isize`, found integer\n  |                     \
    \                                              help: consider borrowing here:\
    \ `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpw9rr510t.rs:7:96\n     |\n7\
    \    |     let mut positive: Vec<isize> = l.iter().filter_map(|x| if x > 0 { Some(x)\
    \ } else { None }).collect();\n     |                                        \
    \                                                        ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_list = l;\n    let mut pos = 0;\n    let mut neg\
    \ = 0;\n    let mut zero = 0;\n    for elt in new_list.iter() {\n        if elt\
    \ < 0 {\n            neg += elt as isize;\n        } else {\n            pos +=\
    \ elt as isize;\n        }\n    }\n    while pos > 0 {\n        new_list.push(zero);\n\
    \        pos += zero;\n    }\n    while neg > 0 {\n        new_list.push(-zero);\n\
    \        neg += -zero;\n    }\n    new_list\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp57vykaiu.rs:12:18\n   |\n\
    12 |         if elt < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `&isize`, found integer\n   |                \
    \  help: consider borrowing here: `&0`\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n  --> /tmp/tmp57vykaiu.rs:13:20\n   |\n13 |             neg += elt\
    \ as isize;\n   |                    ---^^^^^^^^^\n   |                    |\n\
    \   |                    cannot cast `&isize` as `isize`\n   |               \
    \     help: dereference the expression: `*elt`\n\nerror[E0606]: casting `&isize`\
    \ as `isize` is invalid\n  --> /tmp/tmp57vykaiu.rs:15:20\n   |\n15 |         \
    \    pos += elt as isize;\n   |                    ---^^^^^^^^^\n   |        \
    \            |\n   |                    cannot cast `&isize` as `isize`\n   |\
    \                    help: dereference the expression: `*elt`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0606.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.clone();\n    v.sort();\n    v.dedup();\n  \
    \  v\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmppxb9wm0d.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.iter().any(|&x| x > 0) || l.iter().any(|&x| x < 0) {\n\
    \        panic!(\"Can't get positive numbers: non-positive numbers\");\n    }\n\
    \    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpofocqshw.rs:10:30\n   |\n\
    10 |     l.iter().filter(|&x| x > 0).collect()\n   |                         \
    \     ^\n   |                              |\n   |                           \
    \   expected `&isize`, found integer\n   |                              help:\
    \ consider borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpofocqshw.rs:10:33\n\
    \     |\n10   |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc6_g36u5.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpc6_g36u5.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz4vo_4ov.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpz4vo_4ov.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = l;\n    s.sort_unstable();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s[i].is_positive() {\n            if i ==\
    \ 0 {\n                return vec![];\n            }\n            s.retain(|&x|\
    \ x != s[i-1]);\n            return vec![s[i-1]];\n        }\n        i += 1;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `s` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpeeb0jihi.rs:15:13\n   |\n15 |             s.retain(|&x|\
    \ x != s[i-1]);\n   |             ^^------^----^^^^^^-^^^^^^\n   |           \
    \  | |      |         |\n   |             | |      |         first borrow occurs\
    \ due to use of `s` in closure\n   |             | |      immutable borrow occurs\
    \ here\n   |             | immutable borrow later used by call\n   |         \
    \    mutable borrow occurs here\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|v| v >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvmckh62i.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|v| v >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpvmckh62i.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|v| v >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut out = l;\n    let mut i = 0;\n    while i < out.len()\
    \ {\n        if out[i] < 0 {\n            // Swap the first element with last\
    \ and copy the rest\n            let tmp = out.swap(i);\n            out.truncate(i);\n\
    \            out.push(*tmp);\n            break;\n        }\n        i += 1;\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp0sj6vox2.rs:12:27\n    |\n12  |             let tmp = out.swap(i);\n\
    \    |                           ^^^^ - supplied 1 argument\n    |           \
    \                |\n    |                           expected 2 arguments\n   \
    \ |\nnote: associated function defined here\n\nerror[E0614]: type `()` cannot\
    \ be dereferenced\n  --> /tmp/tmp0sj6vox2.rs:14:22\n   |\n14 |             out.push(*tmp);\n\
    \   |                      ^^^^\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0061, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| *x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpie3lj364.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| *x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpie3lj364.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| *x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect::<Vec<_>>()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp67ouwgev.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect::<Vec<_>>()\n  |                   \
    \           ^\n  |                              |\n  |                       \
    \       expected `&isize`, found integer\n  |                              help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp67ouwgev.rs:7:5\n\
    \  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    7 |     l.iter().filter(|&x| x > 0).collect::<Vec<_>>()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n    v.sort_unstable();\n\
    \    v.dedup();\n    v\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmppgj_kipj.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.iter().any(|x| x < 0) {\n        l.iter().filter(|x|\
    \ x >= 0).collect()\n    } else {\n        l\n    }\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4u27hbcw.rs:7:29\n  |\n7 |\
    \     if l.iter().any(|x| x < 0) {\n  |                             ^\n  |   \
    \                          |\n  |                             expected `&isize`,\
    \ found integer\n  |                             help: consider borrowing here:\
    \ `&0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4u27hbcw.rs:8:34\n  |\n\
    8 |         l.iter().filter(|x| x >= 0).collect()\n  |                       \
    \           ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmp4u27hbcw.rs:8:37\n     |\n8    |         l.iter().filter(|x|\
    \ x >= 0).collect()\n     |                                     ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![];\n    for i in l {\n        if i < 0\
    \ {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2]`,\n right: `[4, 5, 6]`', /tmp/tmpqle5zosz.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| *x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpek9gt2m7.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|x| *x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpek9gt2m7.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|x| *x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = Vec::new();\n    for i in l {\n       \
    \ if i > 0 {\n            positive.push(i);\n        }\n    }\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut m = l.iter().min();\n    l.retain(|&x| x >= m);\n\
    \    l\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxesxoqu3.rs:8:24\n  |\n8 |\
    \     l.retain(|&x| x >= m);\n  |                        ^ expected `isize`, found\
    \ enum `Option`\n  |\n  = note: expected type `isize`\n             found enum\
    \ `Option<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptzovuhi7.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmptzovuhi7.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpei93q08e.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpei93q08e.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_list = l;\n    new_list.sort();\n    new_list.dedup();\n\
    \    new_list\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp8ci5ra9w.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = Vec::new();\n    for x in l {\n       \
    \ if x >= 0 {\n            positive.push(x);\n        }\n    }\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmp9c4pw8sj.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = vec![];\n    let mut neg = false;\n    for ele\
    \ in l {\n        if ele < 0 {\n            if neg {\n                continue;\n\
    \            }\n            neg = true;\n        }\n        ret.push(ele);\n \
    \   }\n    if neg {\n        ret.push(-elem);\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `elem` in this scope\n  --> /tmp/tmprb20ms19.rs:19:19\n\
    \   |\n19 |         ret.push(-elem);\n   |                   ^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = vec![0; l.len()];\n    for i in 0..l.len()\
    \ {\n        if l[i] > 0 {\n            positive[i] = l[i];\n        }\n    }\n\
    \    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpy6_neqv3.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n    v.sort();\n\
    \    v.dedup();\n    v.filter(|x| *x >= 0);\n    v\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp19wsxlg0.rs:10:7\n\
    \    |\n10  |       v.filter(|x| *x >= 0);\n    |         ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if\
    \ i <= 0 {\n            continue;\n        }\n        result.push(i);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .filter(|&x| x >= 0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxqfwihaj.rs:8:27\n  |\n8 |\
    \         .filter(|&x| x >= 0)\n  |                           ^\n  |         \
    \                  |\n  |                           expected `&isize`, found integer\n\
    \  |                           help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpxqfwihaj.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvdmk41uo.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpvdmk41uo.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = l.clone();\n    for n in &mut ret\
    \ {\n        if n >= 0 {\n            *n = n;\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp889fsfz.rs:9:17\n  |\n9 |\
    \         if n >= 0 {\n  |                 ^\n  |                 |\n  |     \
    \            expected `&mut isize`, found integer\n  |                 help: consider\
    \ mutably borrowing here: `&mut 0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp889fsfz.rs:10:18\n\
    \   |\n10 |             *n = n;\n   |             --   ^ expected `isize`, found\
    \ `&mut isize`\n   |             |\n   |             expected due to the type\
    \ of this binding\n   |\nhelp: consider dereferencing the borrow\n   |\n10 | \
    \            *n = *n;\n   |                  +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut negative = false;\n    l.sort_unstable_by_key(|x|\
    \ if x < 0 { negative } else { x = x - 1 });\n    let mut new_vec = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    new_vec.sort_unstable_by_key(|x| x);\n    if negative {\n        new_vec.reverse();\n\
    \    }\n    new_vec\n}\n\nfn main() {\n    let candidate = get_positive;\n   \
    \ assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9zffm4gr.rs:8:39\n  |\n8 |\
    \     l.sort_unstable_by_key(|x| if x < 0 { negative } else { x = x - 1 });\n\
    \  |                                       ^\n  |                            \
    \           |\n  |                                       expected `&isize`, found\
    \ integer\n  |                                       help: consider borrowing\
    \ here: `&0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9zffm4gr.rs:8:65\n\
    \  |\n8 |     l.sort_unstable_by_key(|x| if x < 0 { negative } else { x = x -\
    \ 1 });\n  |                             -                                   ^^^^^\n\
    \  |                             |                                   |\n  |  \
    \                           |                                   expected `&isize`,\
    \ found `isize`\n  |                             |                           \
    \        help: consider borrowing here: `&(x - 1)`\n  |                      \
    \       expected due to this parameter type\n\nerror[E0308]: `if` and `else` have\
    \ incompatible types\n --> /tmp/tmp9zffm4gr.rs:8:61\n  |\n8 |     l.sort_unstable_by_key(|x|\
    \ if x < 0 { negative } else { x = x - 1 });\n  |                            \
    \               --------          ^^^^^^^^^ expected `bool`, found `()`\n  | \
    \                                          |\n  |                            \
    \               expected because of this\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvp_56q_0.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpvp_56q_0.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoo596tlx.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpoo596tlx.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8is77i1x.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp8is77i1x.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqeupiffl.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpqeupiffl.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = l.clone();\n    loop {\n        match res.pop()\
    \ {\n            Some(0) => break,\n            Some(i) => res.push(i),\n    \
    \        None => break,\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph3vvu2xu.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmph3vvu2xu.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3o1w8_lw.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp3o1w8_lw.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsgti3rjg.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpsgti3rjg.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2tztqei2.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp2tztqei2.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa4mk_hxc.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpa4mk_hxc.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = l.iter().filter(|x| x > 0).collect::<Vec<_>>();\n\
    \    ret.sort();\n    ret\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2cpvmv21.rs:7:43\n  |\n7 |\
    \     let mut ret = l.iter().filter(|x| x > 0).collect::<Vec<_>>();\n  |     \
    \                                      ^ expected `&&isize`, found integer\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp2cpvmv21.rs:9:5\n  |\n6 | fn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                   ----------\
    \ expected `Vec<isize>` because of return type\n...\n9 |     ret\n  |     ^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5a25iasz.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp5a25iasz.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.iter().any(|&x| x > 0) {\n        l.iter().cloned().filter(|&x|\
    \ x > 0).collect()\n    } else {\n        l.clone()\n    }\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2]`,\n right: `[]`', /tmp/tmpfvd6hyiv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut neg: Vec<isize> = l.clone();\n    neg.sort();\n  \
    \  for (i, item) in neg.iter().enumerate() {\n        if item < 0 {\n        \
    \    neg.swap(i, i);\n        }\n    }\n    neg\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg3uvzb9f.rs:10:19\n   |\n\
    10 |         if item < 0 {\n   |                   ^\n   |                   |\n\
    \   |                   expected `&isize`, found integer\n   |               \
    \    help: consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcdw30aob.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpcdw30aob.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = Vec::new();\n    positive.extend_from_slice(&l);\n\
    \    positive.sort_by(|a, b| a <=> b);\n    positive\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: invalid comparison operator `<=>`\n --> /tmp/tmppg3hk_g8.rs:9:31\n\
    \  |\n9 |     positive.sort_by(|a, b| a <=> b);\n  |                         \
    \      ^^^ `<=>` is not a valid comparison operator, use `std::cmp::Ordering`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmppg3hk_g8.rs:9:29\n  |\n9 |    \
    \ positive.sort_by(|a, b| a <=> b);\n  |                             ^^^^^^^ expected\
    \ enum `std::cmp::Ordering`, found `bool`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for x in l {\n\
    \        if x >= 0 {\n            result.push(x);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmp3eg6yqjq.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut n: usize = 0;\n    let mut neg_sign = false;\n   \
    \ let mut first_neg = true;\n    for ele in l {\n        if ele < 0 {\n      \
    \      neg_sign = !neg_sign;\n            first_neg = false;\n        }\n    \
    \    else {\n            n += 1;\n            if n == 1 {\n                break;\n\
    \            }\n            if n > 1 {\n                break;\n            }\n\
    \        }\n    }\n    if n%2 != 0 {\n        if n == 1 {\n            if neg_sign\
    \ {\n                l.iter().cloned().collect::<Vec<_>>().reverse().next().unwrap()\n\
    \            }\n            else {\n                l.iter().cloned().collect::<Vec<_>>().next().unwrap()\n\
    \            }\n        }\n        else {\n            l.iter().cloned().collect::<Vec<_>>().next().unwrap()\n\
    \        }\n    }\n    else {\n        if first_neg {\n            l.iter().cloned().collect::<Vec<_>>().reverse().next().unwrap()\n\
    \        }\n        else {\n            l.iter().cloned().collect::<Vec<_>>().next().unwrap()\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `next` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpqsl66kjl.rs:28:65\n   |\n28 |                 l.iter().cloned().collect::<Vec<_>>().reverse().next().unwrap()\n\
    \   |                                                                 ^^^^ method\
    \ not found in `()`\n\nerror[E0599]: no method named `next` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpqsl66kjl.rs:31:55\n   |\n31 |          \
    \       l.iter().cloned().collect::<Vec<_>>().next().unwrap()\n   |          \
    \                                             ^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0599]: no method named `next` found for struct `Vec<isize>` in the current\
    \ scope\n  --> /tmp/tmpqsl66kjl.rs:35:51\n   |\n35 |             l.iter().cloned().collect::<Vec<_>>().next().unwrap()\n\
    \   |                                                   ^^^^ method not found\
    \ in `Vec<isize>`\n\nerror[E0599]: no method named `next` found for unit type\
    \ `()` in the current scope\n  --> /tmp/tmpqsl66kjl.rs:40:61\n   |\n40 |     \
    \        l.iter().cloned().collect::<Vec<_>>().reverse().next().unwrap()\n   |\
    \                                                             ^^^^ method not\
    \ found in `()`\n\nerror[E0599]: no method named `next` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpqsl66kjl.rs:43:51\n   |\n43 |          \
    \   l.iter().cloned().collect::<Vec<_>>().next().unwrap()\n   |              \
    \                                     ^^^^ method not found in `Vec<isize>`\n\n\
    error: aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = Vec::new();\n    for elt in l {\n     \
    \   if elt > 0 {\n            positive.push(elt);\n        }\n    }\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pos = Vec::new();\n    for el in l {\n        if el\
    \ > 0 {\n            pos.push(el);\n        }\n    }\n    pos\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![0; l.len()];\n    for i in l.iter() {\n\
    \        if *i < 0 {\n            *i += 1;\n        }\n        res[i] = *i;\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  -->\
    \ /tmp/tmpzzwucyfa.rs:12:9\n   |\n12 |         res[i] = *i;\n   |         ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = vec![];\n    for x in l {\n    \
    \    if x >= 0 {\n            ret.push(x);\n        }\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpgrdy5p5p.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4wh8d2ux.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp4wh8d2ux.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.iter().any(|x| x > 0) {\n        l\n    } else {\n  \
    \      Vec::new()\n    }\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb3g_ehm3.rs:7:29\n  |\n7 |\
    \     if l.iter().any(|x| x > 0) {\n  |                             ^\n  |   \
    \                          |\n  |                             expected `&isize`,\
    \ found integer\n  |                             help: consider borrowing here:\
    \ `&0`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pos = l.len();\n    let mut pos_val: isize = 0;\n\
    \    for &x in l {\n        if x < 0 {\n            pos = pos.saturating_add(1);\n\
    \            pos_val += x;\n        }\n    }\n    l.split_off(pos)\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvdrpza75.rs:9:9\n  |\n9 |\
    \     for &x in l {\n  |         ^^    - this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkchqy0j9.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpkchqy0j9.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkdw62ink.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpkdw62ink.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ans = l;\n    let mut neg = false;\n    for &i in\
    \ &mut ans {\n        if i > 0 {\n            neg = false;\n        } else if\
    \ neg {\n            ans.remove(i);\n        } else {\n            neg = true;\n\
    \        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_yyriclj.rs:9:9\n  |\n9 |\
    \     for &i in &mut ans {\n  |         ^^    -------- this expression has type\
    \ `Option<&mut isize>`\n  |         |\n  |         types differ in mutability\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note: expected mutable reference `&mut isize`\n                     found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for x in l {\n        if x >\
    \ 0 {\n            result.push(x);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![];\n    l.iter().filter(|x| x >= 0).cloned().for_each(|x|\
    \ { res.push(x); });\n    res\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxq0z9mc5.rs:8:30\n  |\n8 |\
    \     l.iter().filter(|x| x >= 0).cloned().for_each(|x| { res.push(x); });\n \
    \ |                              ^ expected `&&isize`, found integer\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn3sx63ul.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpn3sx63ul.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgqi9y7g1.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpgqi9y7g1.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = Vec::new();\n    let mut pos = 0;\n   \
    \ let mut negative = 0;\n    let mut found = false;\n\n    loop {\n        if\
    \ l != &mut Vec::new() && l != &l {\n            positive.push(l[pos]);\n    \
    \        pos++;\n            found = true;\n        } else if !found {\n     \
    \       pos = 0;\n        }\n\n        if l != &mut Vec::new() && l != &l {\n\
    \            if l[pos] > 0 {\n                positive += l[pos];\n          \
    \      found = true;\n            }\n        }\n\n        if !found && pos < l.len()\
    \ - 1 {\n            negative += l[pos];\n            found = true;\n        }\n\
    \    }\n\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpvvrytd23.rs:15:16\n\
    \   |\n15 |             pos++;\n   |                ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n15 |             { let tmp = pos; pos +=\
    \ 1; tmp };\n   |             +++++++++++    ~~~~~~~~~~~~~~~~~\n15 -         \
    \    pos++;\n15 +             pos += 1;\n   | \n\nerror[E0277]: can't compare\
    \ `Vec<isize>` with `&mut Vec<_>`\n  --> /tmp/tmpvvrytd23.rs:13:14\n   |\n13 |\
    \         if l != &mut Vec::new() && l != &l {\n   |              ^^ no implementation\
    \ for `Vec<isize> == &mut Vec<_>`\n   |\n   = help: the trait `PartialEq<&mut\
    \ Vec<_>>` is not implemented for `Vec<isize>`\n   = help: the following other\
    \ types implement trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U,\
    \ A2>>>\n             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T,\
    \ A> as PartialEq<&[U]>>\n             <Vec<T, A> as PartialEq<&mut [U]>>\n  \
    \           <Vec<T, A> as PartialEq<[U; N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\
    \nerror[E0277]: can't compare `Vec<isize>` with `&Vec<isize>`\n  --> /tmp/tmpvvrytd23.rs:13:38\n\
    \   |\n13 |         if l != &mut Vec::new() && l != &l {\n   |               \
    \                       ^^ no implementation for `Vec<isize> == &Vec<isize>`\n\
    \   |\n   = help: the trait `PartialEq<&Vec<isize>>` is not implemented for `Vec<isize>`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n             <Vec<T, A> as PartialEq<&[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n             <Vec<T, A> as\
    \ PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U; N]>>\n      \
    \       <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0277]: can't compare `Vec<isize>`\
    \ with `&mut Vec<_>`\n  --> /tmp/tmpvvrytd23.rs:21:14\n   |\n21 |         if l\
    \ != &mut Vec::new() && l != &l {\n   |              ^^ no implementation for\
    \ `Vec<isize> == &mut Vec<_>`\n   |\n   = help: the trait `PartialEq<&mut Vec<_>>`\
    \ is not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| *x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp13fy40i5.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|x| *x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp13fy40i5.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|x| *x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.is_empty() || l.iter().any(|x| x > 0) {\n        l\n\
    \    } else {\n        l.iter().filter(|x| x > 0).collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpybbt085o.rs:7:45\n  |\n7 |\
    \     if l.is_empty() || l.iter().any(|x| x > 0) {\n  |                      \
    \                       ^\n  |                                             |\n\
    \  |                                             expected `&isize`, found integer\n\
    \  |                                             help: consider borrowing here:\
    \ `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpybbt085o.rs:10:33\n  \
    \ |\n10 |         l.iter().filter(|x| x > 0).collect()\n   |                 \
    \                ^ expected `&&isize`, found integer\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `&isize`\n    --> /tmp/tmpybbt085o.rs:10:36\n     |\n10   |         l.iter().filter(|x|\
    \ x > 0).collect()\n     |                                    ^^^^^^^ value of\
    \ type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxp3eu860.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpxp3eu860.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq4n8l1q4.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpq4n8l1q4.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbjw3u2x1.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpbjw3u2x1.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7ye1eht3.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp7ye1eht3.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = l.iter().filter(|x| x >= 0).collect::<Vec<_>>();\n\
    \    let mut n = 0;\n    for x in l {\n        if x > 0 {\n            positive[n]\
    \ = x;\n            n += 1;\n        }\n    }\n    positive\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7wnl91li.rs:7:49\n  |\n7 |\
    \     let mut positive = l.iter().filter(|x| x >= 0).collect::<Vec<_>>();\n  |\
    \                                                 ^ expected `&&isize`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7wnl91li.rs:11:27\n\
    \   |\n11 |             positive[n] = x;\n   |             -----------   ^\n \
    \  |             |             |\n   |             |             expected `&isize`,\
    \ found `isize`\n   |             |             help: consider borrowing here:\
    \ `&x`\n   |             expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7wnl91li.rs:15:5\n   |\n6  | fn get_positive(l:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                   ----------\
    \ expected `Vec<isize>` because of return type\n...\n15 |     positive\n   | \
    \    ^^^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpewuq4ixx.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpewuq4ixx.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::with_capacity(l.len());\n    let mut iter\
    \ = l.iter();\n    let mut v = Vec::with_capacity(l.len());\n    let mut has_neg\
    \ = false;\n    loop {\n        let _ = iter.next();\n        if !has_neg && iter.unwrap()\
    \ < 0 {\n            has_neg = true;\n        }\n        if !iter.is_done() {\n\
    \            let _ = iter.next();\n            v.push(iter.unwrap());\n      \
    \  }\n        if !iter.is_done() && has_neg && v.len() > 0 {\n            has_neg\
    \ = false;\n            res.extend_from_slice(&v);\n            v = Vec::with_capacity(l.len());\n\
    \        }\n    }\n    if !iter.is_done() && has_neg && v.len() > 0 {\n      \
    \  res.extend_from_slice(&v);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpo5ynk33n.rs:13:29\n   |\n13 |         if\
    \ !has_neg && iter.unwrap() < 0 {\n   |                             ^^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]: no method named\
    \ `is_done` found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmpo5ynk33n.rs:16:18\n\
    \   |\n16 |         if !iter.is_done() {\n   |                  ^^^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]: no method named\
    \ `unwrap` found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmpo5ynk33n.rs:18:25\n\
    \   |\n18 |             v.push(iter.unwrap());\n   |                         ^^^^^^\
    \ method not found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]: no method\
    \ named `is_done` found for struct `std::slice::Iter` in the current scope\n \
    \ --> /tmp/tmpo5ynk33n.rs:20:18\n   |\n20 |         if !iter.is_done() && has_neg\
    \ && v.len() > 0 {\n   |                  ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nwarning: unreachable statement\n  --> /tmp/tmpo5ynk33n.rs:26:5\n\
    \   |\n11 | /     loop {\n12 | |         let _ = iter.next();\n13 | |        \
    \ if !has_neg && iter.unwrap() < 0 {\n14 | |             has_neg = true;\n...\
    \  |\n24 | |         }\n25 | |     }\n   | |_____- any code following this expression\
    \ is unreachable\n26 | /     if !iter.is_done() && has_neg && v.len() > 0 {\n\
    27 | |         res.extend_from_slice(&v);\n28 | |     }\n   | |_____^ unreachable\
    \ statement\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror[E0599]:\
    \ no method named `is_done` found for struct `std::slice::Iter` in the current\
    \ scope\n  --> /tmp/tmpo5ynk33n.rs:26:14\n   |\n26 |     if !iter.is_done() &&\
    \ has_neg && v.len() > 0 {\n   |              ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = vec![0; l.len()];\n    for i in l {\n \
    \       if i > 0 {\n            positive[i] = i;\n        }\n    }\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp0dq_mhi8.rs:10:13\n   |\n10 |             positive[i] = i;\n   |   \
    \          ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.clone();\n    let mut positive: Vec<isize> =\
    \ Vec::new();\n\n    for i in v.iter_mut() {\n        if *i > *i as isize {\n\
    \            *i -= 1;\n        } else {\n            *i = *i as isize;\n     \
    \       positive.push(*i);\n        }\n    }\n\n    positive\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpq2os8zkt.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7h866krt.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp7h866krt.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.filter(|x| *x > 0)\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpqjgq1i5z.rs:7:7\n\
    \    |\n7   |       l.filter(|x| *x > 0)\n    |         ^^^^^^ `Vec<isize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect::<Vec<_>>()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpheedb1qp.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect::<Vec<_>>()\n  |                   \
    \           ^\n  |                              |\n  |                       \
    \       expected `&isize`, found integer\n  |                              help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpheedb1qp.rs:7:5\n\
    \  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    7 |     l.iter().filter(|&x| x > 0).collect::<Vec<_>>()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = l;\n    s.sort();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s[i].is_positive() {\n            i += 1;\n      \
    \      continue;\n        }\n        if s[i] != -1 {\n            break;\n   \
    \     }\n        // Keep going\n        i += 1;\n    }\n    s.drain(..i);\n  \
    \  s\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpj0skc35h.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() < 2 {\n        return l;\n    }\n\n    let mut\
    \ i = 0;\n    let mut sum = 0;\n    let mut max_val = l[0] as isize;\n\n    for\
    \ el in l.iter() {\n        if el > 0 {\n            sum += el;\n            if\
    \ el > max_val {\n                max_val = el;\n            }\n        } else\
    \ {\n            if sum > 0 {\n                sum -= max_val;\n            }\
    \ else {\n                i += 1;\n                sum = el;\n               \
    \ max_val = el;\n            }\n        }\n    }\n\n    Vec::from(l.iter().map(|e|\
    \ {\n        i as isize - sum\n    }).collect())\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb9g28eec.rs:16:17\n   |\n\
    16 |         if el > 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb9g28eec.rs:18:21\n\
    \   |\n18 |             if el > max_val {\n   |                     ^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_val`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpb9g28eec.rs:19:27\n   |\n13 |\
    \     let mut max_val = l[0] as isize;\n   |                       -------------\
    \ expected due to this value\n...\n19 |                 max_val = el;\n   |  \
    \                         ^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n19 |                 max_val = *el;\n   |  \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb9g28eec.rs:26:23\n\
    \   |\n12 |     let mut sum = 0;\n   |                   - expected due to this\
    \ value\n...\n26 |                 sum = el;\n   |                       ^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    26 |                 sum = *el;\n   |                       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb9g28eec.rs:27:27\n   |\n13 |     let mut max_val\
    \ = l[0] as isize;\n   |                       ------------- expected due to this\
    \ value\n...\n27 |                 max_val = el;\n   |                       \
    \    ^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n27 |                 max_val = *el;\n   |                    \
    \       +\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5y_mkfks.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp5y_mkfks.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        if x\
    \ > 0 {\n            res.push(x);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaq61j7qa.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpaq61j7qa.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .filter(|x| x >= 0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeiqfejxp.rs:8:26\n  |\n8 |\
    \         .filter(|x| x >= 0)\n  |                          ^ expected `&&isize`,\
    \ found integer\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built\
    \ from an iterator over elements of type `&isize`\n    --> /tmp/tmpeiqfejxp.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect::<Vec<isize>>()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3d237fu4.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect::<Vec<isize>>()\n  |               \
    \               ^\n  |                              |\n  |                   \
    \           expected `&isize`, found integer\n  |                            \
    \  help: consider borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp3d237fu4.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect::<Vec<isize>>()\n    \
    \ |                                 ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxlk05xqi.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpxlk05xqi.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqf1f_w_z.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpqf1f_w_z.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm77a1j1j.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpm77a1j1j.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    for x in l {\n  \
    \      if x > 0 {\n            v.push(x);\n        }\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive_vec = Vec::new();\n    for value in l {\n\
    \        if value >= 0 {\n            positive_vec.push(value);\n        }\n \
    \   }\n    return positive_vec;\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpdn3x8lq2.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pos = l;\n    pos.iter().cloned().filter(|&i| i >\
    \ 0).cloned()\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n --> /tmp/tmpomih6fi5.rs:8:44\n  |\n8 |     pos.iter().cloned().filter(|&i|\
    \ i > 0).cloned()\n  |                                            ^^^^^^ expected\
    \ reference, found `isize`\n  |\n  = note: expected reference `&&_`\n        \
    \     found reference `&isize`\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n  = note:\
    \ 1 redundant requirement hidden\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpomih6fi5.rs:8:32:\
    \ 8:42]>`\n\nerror[E0631]: type mismatch in closure arguments\n --> /tmp/tmpomih6fi5.rs:8:44\n\
    \  |\n8 |     pos.iter().cloned().filter(|&i| i > 0).cloned()\n  |           \
    \                     ----------  ^^^^^^ expected signature of `for<'r> fn(&'r\
    \ &_) -> _`\n  |                                |\n  |                       \
    \         found signature of `for<'r> fn(&'r isize) -> _`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpomih6fi5.rs:8:32: 8:42]>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpomih6fi5.rs:8:5\n  |\n6 | fn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n  |                                   ---------- expected `Vec<isize>`\
    \ because of return type\n7 |     let mut pos = l;\n8 |     pos.iter().cloned().filter(|&i|\
    \ i > 0).cloned()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `Cloned`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Cloned<Filter<Cloned<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmpomih6fi5.rs:8:32: 8:42]>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0271, E0308, E0631.\nFor\
    \ more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut rez = vec![0; l.len()];\n    for x in l {\n      \
    \  if x < 0 {\n            rez.push(-x);\n        } else {\n            rez.push(x);\n\
    \        }\n    }\n    rez\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0, 1, 2, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp5ogg186a.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .filter(|e| e >= 0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7xx5npp.rs:8:26\n  |\n8 |\
    \         .filter(|e| e >= 0)\n  |                          ^ expected `&&isize`,\
    \ found integer\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built\
    \ from an iterator over elements of type `&isize`\n    --> /tmp/tmpc7xx5npp.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbpuy29vt.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpbpuy29vt.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() > 0 {\n        let mut v = Vec::new();\n      \
    \  let len = l.len();\n        let mut i = 0;\n        while i < len {\n     \
    \       if l[i] > 0 {\n                v.push(l[i]);\n            }\n        \
    \    i += 1;\n        }\n        v\n    } else {\n        l\n    }\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| *x >=0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfz24lsk2.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| *x >=0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpfz24lsk2.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| *x >=0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() < 2 {\n        return l;\n    }\n\n    let mut\
    \ positive = vec![];\n\n    positive.reserve(l.len() as usize);\n\n    for i in\
    \ l {\n        if i > 0 {\n            positive.push(i);\n        }\n    }\n\n\
    \    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut i = 0;\n    while i < l.len() {\n        if l[i] <\
    \ 0 {\n            let j = i;\n            while j > 0 && l[j] <= 0 {\n      \
    \          j -= 1;\n            }\n            i = j;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    l.drain(..i);\n    l\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpnny6u00c.rs:12:17\n\
    \   |\n10 |             let j = i;\n   |                 -\n   |             \
    \    |\n   |                 first assignment to `j`\n   |                 help:\
    \ consider making this binding mutable: `mut j`\n11 |             while j > 0\
    \ && l[j] <= 0 {\n12 |                 j -= 1;\n   |                 ^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror[E0596]: cannot borrow `l` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmpnny6u00c.rs:19:5\n   |\n6  |\
    \ fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |                 - help:\
    \ consider changing this to be mutable: `mut l`\n...\n19 |     l.drain(..i);\n\
    \   |     ^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information\
    \ about an error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.is_empty() {\n        return l;\n    }\n    let mut it\
    \ = l.iter().filter(|&n| n > 0);\n    it.collect::<Vec<isize>>()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9pt3tflb.rs:10:43\n   |\n\
    10 |     let mut it = l.iter().filter(|&n| n > 0);\n   |                     \
    \                      ^\n   |                                           |\n \
    \  |                                           expected `&isize`, found integer\n\
    \   |                                           help: consider borrowing here:\
    \ `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp9pt3tflb.rs:11:8\n     |\n11\
    \   |     it.collect::<Vec<isize>>()\n     |        ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4bbu75ll.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp4bbu75ll.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| *x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjhpwhwjf.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|x| *x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpjhpwhwjf.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|x| *x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.filter(|&x| x > 0).collect()\n}\n\nfn main() {\n    let\
    \ candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpcjt2k7bc.rs:7:7\n\
    \    |\n7   |       l.filter(|&x| x > 0).collect()\n    |         ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeyf0cn_8.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpeyf0cn_8.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = vec![0; l.len()];\n    for i in 0..l.len() {\n\
    \        if l[i] > 0 {\n            ret[i] = l[i];\n        }\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpwebdusrj.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![l.len()];\n    for i in 0..l.len() {\n\
    \        res[i] = l[i] as isize;\n        if res[i] > 0 {\n            res[i]\
    \ += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe7l_da9h.rs:9:18\n  |\n9 |\
    \         res[i] = l[i] as isize;\n  |         ------   ^^^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n  |         |\n  |         expected due to the type\
    \ of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe7l_da9h.rs:14:5\n\
    \   |\n6  | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n14 |     res\n   |     ^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = Vec::new();\n    for x in l {\n        if x >=\
    \ 0 {\n            v.push(x);\n        }\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]),\
    \ vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpdy3ae84e.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.is_empty() {\n        vec![]\n    } else {\n        let\
    \ mut ret: Vec<_> = vec![];\n        for i in l {\n            if i > 0 {\n  \
    \              ret.push(i);\n            }\n        }\n        ret\n    }\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps8fcscfb.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmps8fcscfb.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = l.to_vec();\n    s.sort();\n    s\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp4zabo304.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter_map(|i| *i < 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp87prdkp7.rs:7:29\n  |\n7 |\
    \     l.iter().filter_map(|i| *i < 0).collect()\n  |                         \
    \    ^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note: expected enum\
    \ `Option<_>`\n             found type `bool`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n7 |     l.iter().filter_map(|i| Some(*i < 0)).collect()\n  |\
    \                             +++++      +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter_map(|x| *x >= 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps_hovie7.rs:7:29\n  |\n7 |\
    \     l.iter().filter_map(|x| *x >= 0).collect()\n  |                        \
    \     ^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note: expected enum\
    \ `Option<_>`\n             found type `bool`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n7 |     l.iter().filter_map(|x| Some(*x >= 0)).collect()\n \
    \ |                             +++++       +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect::<Vec<isize>>()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbql9frs7.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect::<Vec<isize>>()\n  |                \
    \             ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmpbql9frs7.rs:7:32\n     |\n7    |     l.iter().filter(|x| x >\
    \ 0).collect::<Vec<isize>>()\n     |                                ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd3z0umi_.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpd3z0umi_.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut r = l.to_vec();\n    r.sort();\n    r\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpwo6_wtc2.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for &i in l {\n        if i\
    \ > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm9mqti2q.rs:8:9\n  |\n8 |\
    \     for &i in l {\n  |         ^^    - this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = l.to_vec();\n    if res.is_empty() {\n     \
    \   return res;\n    }\n    loop {\n        let mut min = res.min_by_key(|&x|\
    \ x.clone());\n        let mut new_res = res.iter().filter_map(|&x| if x <= min\
    \ {Some(x); } else { None }).collect::<Vec<_>>();\n        if !new_res.is_empty()\
    \ {\n            res = new_res;\n        } else {\n            break;\n      \
    \  }\n    }\n    res\n}\n\nfn main() {\n    let candidate = get_positive;\n  \
    \  assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpojh3f4m6.rs:12:27\n\
    \    |\n12  |           let mut min = res.min_by_key(|&x| x.clone());\n    | \
    \                            ^^^^^^^^^^ `Vec<isize>` is not an iterator\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpojh3f4m6.rs:13:66\n\
    \   |\n13 |         let mut new_res = res.iter().filter_map(|&x| if x <= min {Some(x);\
    \ } else { None }).collect::<Vec<_>>();\n   |                                \
    \                                  ^^^^^^^^-^^\n   |                         \
    \                                         |       |\n   |                    \
    \                                              |       help: remove this semicolon\n\
    \   |                                                                  expected\
    \ enum `Option`, found `()`\n   |\n   = note:   expected enum `Option<_>`\n  \
    \         found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&n| n > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu0cq8zu6.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&n| n > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpu0cq8zu6.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&n| n > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|n| n > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0xdpza86.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|n| n > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp0xdpza86.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|n| n > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut neg = 0isize;\n    let mut result = Vec::new();\n\
    \    for i in l {\n        if i < 0 {\n            result.push(-neg);\n      \
    \      neg = i;\n        } else {\n            neg = i;\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpv8ys1sej.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut n = l.iter().cloned().collect::<Vec<_>>();\n    n.sort_unstable();\n\
    \    n.iter().take_while(|&x| x >= 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjwrpml0_.rs:9:35\n  |\n9 |\
    \     n.iter().take_while(|&x| x >= 0).collect()\n  |                        \
    \           ^\n  |                                   |\n  |                  \
    \                 expected `&isize`, found integer\n  |                      \
    \             help: consider borrowing here: `&0`\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmpjwrpml0_.rs:9:38\n     |\n9    |     n.iter().take_while(|&x|\
    \ x >= 0).collect()\n     |                                      ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&v| v > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb2gyi43w.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&v| v > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpb2gyi43w.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&v| v > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = l;\n    for x in l {\n        if x < 0 {\
    \ result = result.filter( |e| e >= 0 ); }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpcgoeqgi0.rs:9:36\n\
    \    |\n9   |           if x < 0 { result = result.filter( |e| e >= 0 ); }\n \
    \   |                                      ^^^^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() <= 0 {\n        vec![]\n    } else {\n        let\
    \ mut positives = vec![];\n        let mut v = l.iter().cloned().rev();\n    \
    \    for el in l {\n            if el > 0 {\n                positives.push(el);\n\
    \            }\n            v = v.next().expect(\"empty list\");\n        }\n\
    \        positives\n    }\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdqtlyelt.rs:16:17\n   |\n\
    11 |         let mut v = l.iter().cloned().rev();\n   |                     -----------------------\
    \ expected due to this value\n...\n16 |             v = v.next().expect(\"empty\
    \ list\");\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Rev`, found `isize`\n   |\n   = note: expected struct `Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n                found type `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcxuw6ehg.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpcxuw6ehg.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe7g0digp.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|x| x >= 0).collect()\n  |                             \
    \ ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpe7g0digp.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|x| x >= 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.is_empty() || l.iter().all(|&x| x > 0) || l.iter().any(|&x|\
    \ x < 0) {\n        l\n    } else {\n        let mut result = vec![l.first().unwrap()\
    \ as isize; l.len()];\n        let mut pos = 0;\n        for i in l {\n      \
    \      if i > 0 {\n                result[pos] = i as isize;\n               \
    \ pos += 1;\n            }\n        }\n        result\n    }\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmp38riug6x.rs:10:31\n\
    \   |\n10 |         let mut result = vec![l.first().unwrap() as isize; l.len()];\n\
    \   |                               ------------------^^^^^^^^^\n   |        \
    \                       |\n   |                               cannot cast `&isize`\
    \ as `isize`\n   |                               help: dereference the expression:\
    \ `*l.first().unwrap()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positives = Vec::with_capacity(l.len());\n    for\
    \ x in l {\n        if x > 0{\n            positives.push(x);\n        }\n   \
    \ }\n    return positives;\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp86eccy56.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp86eccy56.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_xfbzm9k.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp_xfbzm9k.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.is_empty() {\n        return l;\n    }\n    let mut i\
    \ = 0;\n    loop {\n        if l[i] == 0 {\n            i += 1;\n        } else\
    \ {\n            break;\n        }\n    }\n    let mut result: Vec<isize> = l.iter().cloned().collect();\n\
    \    result.rev();\n    result\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpdp8bl_7a.rs:19:12\n\
    \    |\n19  |       result.rev();\n    |              ^^^ `Vec<isize>` is not\
    \ an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .filter(|&i| i > 0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqa1kk7cn.rs:8:26\n  |\n8 |\
    \         .filter(|&i| i > 0)\n  |                          ^\n  |           \
    \               |\n  |                          expected `&isize`, found integer\n\
    \  |                          help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpqa1kk7cn.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![];\n    for x in l {\n        if x >= 0\
    \ {\n            res.push(x);\n        }\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpzksk6e6d.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut vec = l.iter().filter(|&x| x >= 0).collect::<Vec<isize>>();\n\
    \    vec.sort_unstable();\n    vec\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_t3pidv3.rs:7:45\n  |\n7 |\
    \     let mut vec = l.iter().filter(|&x| x >= 0).collect::<Vec<isize>>();\n  |\
    \                                             ^\n  |                         \
    \                    |\n  |                                             expected\
    \ `&isize`, found integer\n  |                                             help:\
    \ consider borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp_t3pidv3.rs:7:48\n\
    \     |\n7    |     let mut vec = l.iter().filter(|&x| x >= 0).collect::<Vec<isize>>();\n\
    \     |                                                ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect::<Vec<_>>()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvzw46_7h.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect::<Vec<_>>()\n  |                   \
    \           ^\n  |                              |\n  |                       \
    \       expected `&isize`, found integer\n  |                              help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvzw46_7h.rs:7:5\n\
    \  |\n6 | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n  |                \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    7 |     l.iter().filter(|&x| x > 0).collect::<Vec<_>>()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphhqm5nb9.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmphhqm5nb9.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = l.iter();\n\
    \    iter.for_each(|x| {\n        if x >= 0 {\n            result.push(x);\n \
    \       }\n    });\n    result\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpry94n8dr.rs:10:17\n   |\n\
    10 |         if x >= 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpry94n8dr.rs:14:5\n\
    \   |\n6  | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy0mfvmzi.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpy0mfvmzi.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .filter(|&x| x > 0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoo1bmdky.rs:8:26\n  |\n8 |\
    \         .filter(|&x| x > 0)\n  |                          ^\n  |           \
    \               |\n  |                          expected `&isize`, found integer\n\
    \  |                          help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpoo1bmdky.rs:9:10\n     |\n9    |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwdure714.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpwdure714.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.iter().any(|&v| v < 0 ) {\n        l.iter().cloned().collect::<Vec<_>>()\n\
    \    } else {\n        l\n    }\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp_rfzihm1.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect::<Vec<isize>>()\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt6vopicd.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect::<Vec<isize>>()\n  |                \
    \             ^ expected `&&isize`, found integer\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmpt6vopicd.rs:7:32\n     |\n7    |     l.iter().filter(|x| x >\
    \ 0).collect::<Vec<isize>>()\n     |                                ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pos = 0;\n    let mut neg = 0;\n\n    for i in l.iter()\
    \ {\n        if *i > 0 {\n            pos += 1;\n        } else {\n          \
    \  neg += 1;\n        }\n    }\n\n    l.iter().map(|x| if *x > 0 { x - pos } else\
    \ { x - neg })\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprfcom_ux.rs:18:5\n   |\n\
    6  | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    18 |     l.iter().map(|x| if *x > 0 { x - pos } else { x - neg })\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Map`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmprfcom_ux.rs:18:18:\
    \ 18:60]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut r = l.clone();\n    r.sort();\n    r\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmpgrdp0ypc.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| *x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp86kgo2eu.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|x| *x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmp86kgo2eu.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|x| *x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = Vec::new();\n    for n in l {\n       \
    \ if n > 0\n            && !positive.contains(&n)\n            && !positive.is_empty()\n\
    \        {\n            positive.push(n as isize);\n        }\n    }\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmpmlfz7xbx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    for x in l {\n \
    \       if x >= 0 {\n            result.push(x);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpa1k8kwj7.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut p = l;\n    p.sort();\n    p.dedup();\n    p\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmplj595jze.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpen3spkw9.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpen3spkw9.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu0xi61ao.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpu0xi61ao.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|e| e > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_v9rgze8.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|e| e > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp_v9rgze8.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|e| e > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for x in l {\n        if x >=\
    \ 0 {\n            result.push(x);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpjxgvyiin.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_list = vec![];\n    for n in l {\n        if n\
    \ >= 0 { new_list.push(n); }\n    }\n    new_list\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpfrcezscm.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut positive = l.clone();\n    positive.sort_unstable();\n\
    \    positive.dedup();\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp6s6bmv9_.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for i in l {\n        if i >=\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmp1x6j1tga.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![];\n    for x in l {\n        if x >= 0\
    \ { res.push(x); }\n    }\n    res\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpkra9gefi.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .filter(|e| e > 0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoljzdg3w.rs:8:25\n  |\n8 |\
    \         .filter(|e| e > 0)\n  |                         ^ expected `&&isize`,\
    \ found integer\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built\
    \ from an iterator over elements of type `&isize`\n    --> /tmp/tmpoljzdg3w.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.len() <= 1 {\n        l\n    } else {\n        let mut\
    \ tmp = vec![];\n        for &i in l {\n            if i > 0 {\n             \
    \   tmp.push(i);\n            }\n        }\n        tmp\n    }\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0zbwr3jw.rs:11:13\n   |\n\
    11 |         for &i in l {\n   |             ^^    - this expression has type\
    \ `Option<isize>`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |             help: you can probably remove the explicit borrow:\
    \ `i`\n   |\n   = note:   expected type `isize`\n           found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5o5osdtl.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp5o5osdtl.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter_map(|x| {\n        if x >= 0 { Some(x) } else\
    \ { None }\n    }).collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb83ra69r.rs:8:17\n  |\n8 |\
    \         if x >= 0 { Some(x) } else { None }\n  |                 ^\n  |    \
    \             |\n  |                 expected `&isize`, found integer\n  |   \
    \              help: consider borrowing here: `&0`\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmpb83ra69r.rs:9:8\n     |\n9    |     }).collect()\n     |    \
    \    ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&i| i > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkgd7mvkh.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&i| i > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpkgd7mvkh.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&i| i > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l.iter().cloned().collect::<Vec<isize>>();\n \
    \   v.sort_unstable();\n    v.dedup();\n    v\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -1, 4, 5, 6]`,\n right: `[4, 5, 6]`', /tmp/tmp_u1bb3vw.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l.clone();\n    let mut result = Vec::new();\n\
    \    for i in l {\n        if i < 0 {\n            result.push(i);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -2]`,\n right: `[4, 5, 6]`', /tmp/tmpm2f91oea.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_vn1_f5c.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp_vn1_f5c.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    for elt in l.iter() {\n\
    \        if elt > 0 {\n            result.push(elt);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjdw9pcfp.rs:9:18\n  |\n9 |\
    \         if elt > 0 {\n  |                  ^\n  |                  |\n  |  \
    \                expected `&isize`, found integer\n  |                  help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjdw9pcfp.rs:13:5\n\
    \   |\n6  | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |             \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut i = 0;\n    while i < l.len() && l[i] >= 0 {\n   \
    \     i += 1;\n    }\n    l[0..i]\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdmhs41n2.rs:11:5\n   |\n\
    6  | fn get_positive(l: Vec<isize>) -> Vec<isize> {\n   |                    \
    \               ---------- expected `Vec<isize>` because of return type\n...\n\
    11 |     l[0..i]\n   |     ^^^^^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |     |\n   |     expected struct `Vec`, found slice `[isize]`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.filter(|x| x > 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpk6vew8hk.rs:7:7\n\
    \    |\n7   |       l.filter(|x| x > 0).collect()\n    |         ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<isize> = l.clone();\n    v.retain(|x| *x >=\
    \ 0);\n    v\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmplzxtp5mr.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    if l.is_empty() {\n        return l;\n    }\n    let mut positives\
    \ = l.iter().cloned().filter(|&i| i > 0);\n    positives.sort();\n    positives\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `Filter` in the current\
    \ scope\n  --> /tmp/tmp2f1zmem9.rs:11:15\n   |\n11 |     positives.sort();\n \
    \  |               ^^^^ method not found in `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmp2f1zmem9.rs:10:50: 10:60]>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2f1zmem9.rs:12:5\n   |\n6  | fn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                   ---------- expected\
    \ `Vec<isize>` because of return type\n...\n10 |     let mut positives = l.iter().cloned().filter(|&i|\
    \ i > 0);\n   |                                                  ---------- the\
    \ found closure\n11 |     positives.sort();\n12 |     positives\n   |     ^^^^^^^^^\
    \ expected struct `Vec`, found struct `Filter`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmp2f1zmem9.rs:10:50: 10:60]>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_list = l.iter().map(|x| x as isize).collect::<Vec<isize>>();\n\
    \    new_list.sort();\n    new_list\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `isize` is invalid\n --> /tmp/tmpd9f8stza.rs:7:41\n\
    \  |\n7 |     let mut new_list = l.iter().map(|x| x as isize).collect::<Vec<isize>>();\n\
    \  |                                         -^^^^^^^^^\n  |                 \
    \                        |\n  |                                         cannot\
    \ cast `&isize` as `isize`\n  |                                         help:\
    \ dereference the expression: `*x`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&i| i > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyspb1xcc.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&i| i > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpyspb1xcc.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&i| i > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbumpfqec.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpbumpfqec.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter()\n        .cloned()\n        .filter(|&x| x > 0)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = get_positive;\n   \
    \ assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut vec = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            vec.push(i);\n        }\n    }\n    vec\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = vec![];\n    for el in l {\n   \
    \     if el > 0 {\n            ret.push(el);\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut neg = 0;\n    let mut result: Vec<isize> = Vec::new();\n\
    \    for n in l {\n        if n >= 0 {\n            result.push(n);\n        }\
    \ else {\n            neg += n;\n        }\n    }\n    if neg < 0 {\n        for\
    \ i in (0..result.len()).rev() {\n            if result[i] < 0 {\n           \
    \     result[i] = neg + result[i];\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmp9etkefkv.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|x| x > 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc9u67p0t.rs:7:29\n  |\n7 |\
    \     l.iter().filter(|x| x > 0).collect()\n  |                             ^\
    \ expected `&&isize`, found integer\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpc9u67p0t.rs:7:32\n\
    \     |\n7    |     l.iter().filter(|x| x > 0).collect()\n     |             \
    \                   ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x >= 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbgwb4bc_.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x >= 0).collect()\n  |                            \
    \   ^\n  |                               |\n  |                              \
    \ expected `&isize`, found integer\n  |                               help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpbgwb4bc_.rs:7:34\n\
    \     |\n7    |     l.iter().filter(|&x| x >= 0).collect()\n     |           \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnzsq7ojc.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpnzsq7ojc.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = vec![];\n    for v in l {\n        if v >= 0\
    \ {\n            res.push(*v);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpniiprwc3.rs:10:22\n\
    \   |\n10 |             res.push(*v);\n   |                      ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
    \ Vec<isize> {\n    l.iter().filter(|&x| x > 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6ec_41rr.rs:7:30\n  |\n7 |\
    \     l.iter().filter(|&x| x > 0).collect()\n  |                             \
    \ ^\n  |                              |\n  |                              expected\
    \ `&isize`, found integer\n  |                              help: consider borrowing\
    \ here: `&0`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmp6ec_41rr.rs:7:33\n\
    \     |\n7    |     l.iter().filter(|&x| x > 0).collect()\n     |            \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
