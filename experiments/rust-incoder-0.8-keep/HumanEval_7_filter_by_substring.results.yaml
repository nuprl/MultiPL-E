name: HumanEval_7_filter_by_substring
language: rust
results:
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found = Vec::new();\n\
    \n    for string in strings {\n        if string.contains(&substring) {\n    \
    \        found.push(string);\n        }\n    }\n\n    found\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let substring = substring.to_lowercase();\n\
    \    strings.iter().filter(|s| s.contains(substring)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfgpqecml.rs:8:42\n     |\n8    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpfgpqecml.rs:8:54\n     |\n8    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|string| {\n            if string.contains(substring) {\n\
    \                Ok(string)\n            } else {\n                Err(String::from(\"\
    \"))\n            }\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpcto50fex.rs:10:32\n     |\n10   |             if string.contains(substring)\
    \ {\n     |                       -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                       |\n     |                \
    \       required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n10   |             if string.contains(&substring) {\n     |         \
    \                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcto50fex.rs:11:17\n\
    \   |\n11 |                 Ok(string)\n   |                 ^^^^^^^^^^ expected\
    \ enum `Option`, found enum `Result`\n   |\n   = note: expected enum `Option<_>`\n\
    \              found enum `Result<&String, _>`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n11 |                 Some(Ok(string))\n   |               \
    \  +++++          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcto50fex.rs:13:17\n\
    \   |\n13 |                 Err(String::from(\"\"))\n   |                 ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found enum `Result`\n   |\n   = note: expected enum\
    \ `Option<_>`\n              found enum `Result<_, String>`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n13 |                 Some(Err(String::from(\"\
    \")))\n   |                 +++++                     +\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter_map(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpe1_zlc8k.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpe1_zlc8k.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings.iter() {\n        if string.contains(substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpg2k0h8u_.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpg2k0h8u_.rs:13:5\n   |\n6  | fn filter_by_substring(strings: Vec<String>,\
    \ substring: String) -> Vec<String> {\n   |                                  \
    \                                  ----------- expected `Vec<String>` because\
    \ of return type\n...\n13 |     filtered_strings\n   |     ^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `&String`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings.iter() {\n        if s.contains(substring) {\n         \
    \   result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp80_9rhfy.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp80_9rhfy.rs:13:5\n\
    \   |\n6  | fn filter_by_substring(strings: Vec<String>, substring: String) ->\
    \ Vec<String> {\n   |                                                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    13 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = strings.clone();\n\
    \    result.retain(|string| string.contains(substring));\n    result\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpps_ro36_.rs:8:44\n     |\n8    |     result.retain(|string| string.contains(substring));\n\
    \     |                                   -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                   |\n     | \
    \                                  required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |     result.retain(|string| string.contains(&substring));\n\
    \     |                                            +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ {\n        if s.contains(substring) {\n            Some(s)\n        } else {\n\
    \            None\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpo75y3fp0.rs:8:23\n     |\n8    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpo75y3fp0.rs:13:8\n\
    \     |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings;\n    }\n\n    let mut filtered_strings = Vec::new();\n\
    \    let mut current_substring = String::from(substring);\n\n    strings.iter().for_each(|s|\
    \ {\n        if s.contains(&current_substring) {\n            filtered_strings.push(s);\n\
    \        }\n    });\n\n    filtered_strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkplmpn52.rs:20:5\n   |\n\
    6  | fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n20 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `&String`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut index = 0;\n \
    \   let mut found = false;\n    strings\n        .iter()\n        .filter(|s|\
    \ {\n            let mut index = s.find(substring, index);\n            found\
    \ = match index {\n                Some(i) => true,\n                None => false,\n\
    \            };\n            index = i + 1;\n            found\n        })\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpcovb4k6r.rs:17:21\n\
    \   |\n17 |             index = i + 1;\n   |                     ^ help: a local\
    \ variable with a similar name exists: `s`\n\nerror[E0061]: this function takes\
    \ 1 argument but 2 arguments were supplied\n    --> /tmp/tmpcovb4k6r.rs:12:31\n\
    \     |\n12   |             let mut index = s.find(substring, index);\n     |\
    \                               ^^^^ ---------  ----- supplied 2 arguments\n \
    \    |                               |\n     |                               expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpcovb4k6r.rs:20:10\n     |\n20   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpaz_fbqys.rs:10:10\n     |\n\
    10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.contains(substring).unwrap_or(false))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpbmbc_v2r.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring).unwrap_or(false))\n\
    \     |                                    +\n\nerror[E0599]: no method named\
    \ `unwrap_or` found for type `bool` in the current scope\n --> /tmp/tmpbmbc_v2r.rs:9:47\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n  |\
    \                                               ^^^^^^^^^ method not found in\
    \ `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpvf2iodmv.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpvf2iodmv.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|x| x.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp78_d1nad.rs:9:32\n     |\n9    |         .filter(|x| x.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|x| x.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp78_d1nad.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|e| e.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp57d61eln.rs:9:32\n     |\n9    |         .filter(|e| e.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|e| e.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp57d61eln.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpw7hg3ioh.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpw7hg3ioh.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ {\n        if s.contains(substring) {\n            Some(s)\n        } else {\n\
    \            None\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmprw4rinyx.rs:8:23\n     |\n8    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmprw4rinyx.rs:13:8\n\
    \     |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut index = String::npos;\n\
    \    for s in strings {\n        if s.contains(substring) {\n            index\
    \ = s.find(substring);\n            if index != String::npos {\n             \
    \   index = s.rfind(substring);\n                if index != String::npos {\n\
    \                    return strings[..index].to_vec();\n                }\n  \
    \          }\n        }\n    }\n    strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `npos` found for struct\
    \ `String` in the current scope\n --> /tmp/tmpmhuz_mny.rs:7:29\n  |\n7 |     let\
    \ mut index = String::npos;\n  |                             ^^^^ function or\
    \ associated item not found in `String`\n\nerror[E0277]: expected a `FnMut<(char,)>`\
    \ closure, found `String`\n    --> /tmp/tmpmhuz_mny.rs:9:23\n     |\n9    |  \
    \       if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected\
    \ an implementor of trait `Pattern<'_>`\n     |              |\n     |       \
    \       required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         if s.contains(&substring) {\n     |                  \
    \     +\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n\
    \    --> /tmp/tmpmhuz_mny.rs:10:28\n     |\n10   |             index = s.find(substring);\n\
    \     |                       ---- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::find`\nhelp: consider borrowing here\n\
    \     |\n10   |             index = s.find(&substring);\n     |              \
    \              +\n\nerror[E0599]: no function or associated item named `npos`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpmhuz_mny.rs:11:33\n\
    \   |\n11 |             if index != String::npos {\n   |                     \
    \            ^^^^ function or associated item not found in `String`\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmpmhuz_mny.rs:12:33\n\
    \   |\n12 |                 index = s.rfind(substri"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut results = Vec::new();\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      results.push(string);\n        }\n    }\n    results\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpgko1w_8a.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if substring.is_empty()\
    \ {\n        return strings\n    }\n    strings.iter().filter(|s| s.contains(substring)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzd6gzjp8.rs:10:42\n     |\n10   |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                 --------\
    \ ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |           \
    \                      |\n     |                                 required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |     strings.iter().filter(|s|\
    \ s.contains(&substring)).collect()\n     |                                  \
    \        +\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n    --> /tmp/tmpzd6gzjp8.rs:10:54\n\
    \     |\n10   |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                                      ^^^^^^^ value of\
    \ type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.contains(&substring) {\n        \
    \        Some(s.to_string())\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpuzlmu_do.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpuzlmu_do.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpstb3k652.rs:8:32\n     |\n8    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n8    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ if s.contains(substring).map(|s| s) { None } else { Some(s) }).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp7irtugzh.rs:7:49\n     |\n7    |     strings.iter().filter_map(|s|\
    \ if s.contains(substring).map(|s| s) { None } else { Some(s) }).collect()\n \
    \    |                                        -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                        |\n  \
    \   |                                        required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter_map(|s|\
    \ if s.contains(&substring).map(|s| s) { None } else { Some(s) }).collect()\n\
    \     |                                                 +\n\nerror[E0599]: `bool`\
    \ is not an iterator\n --> /tmp/tmp7irtugzh.rs:7:60\n  |\n7 |     strings.iter().filter_map(|s|\
    \ if s.contains(substring).map(|s| s) { None } else { Some(s) }).collect()\n \
    \ |                                                            ^^^ `bool` is not\
    \ an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `bool: Iterator`\n          which is required by `&mut bool: Iterator`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp7irtugzh.rs:7:98\n     |\n\
    7    |     strings.iter().filter_map(|s| if s.contains(substring).map(|s| s) {\
    \ None } else { Some(s) }).collect()\n     |                                 \
    \                                                                 ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|string| string.contains(substring))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpap7kjxzj.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpap7kjxzj.rs:10:10\n     |\n10   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter()\n     \
    \   .filter_map(|s| s.contains(substring).unwrap_or(false))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpq0q0xgsj.rs:8:36\n     |\n8    |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter_map(|s| s.contains(&substring).unwrap_or(false))\n\
    \     |                                    +\n\nerror[E0599]: no method named\
    \ `unwrap_or` found for type `bool` in the current scope\n --> /tmp/tmpq0q0xgsj.rs:8:47\n\
    \  |\n8 |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n  |\
    \                                               ^^^^^^^^^ method not found in\
    \ `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter()\n     \
    \   .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptx_g7bkc.rs:8:32\n     |\n8    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n8    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmptx_g7bkc.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpd7kkt9br.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpd7kkt9br.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpe8r6xcn0.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpe8r6xcn0.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp849bslgp.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ {\n        match s.contains(substring) {\n            true => Some(s),\n   \
    \         false => None,\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpuaqvhoht.rs:8:26\n     |\n8    |         match s.contains(substring)\
    \ {\n     |                 -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                 |\n     |                 required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n8    |         match\
    \ s.contains(&substring) {\n     |                          +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpuaqvhoht.rs:12:8\n     |\n12   |     }).collect()\n\
    \     |        ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found_substring\
    \ = false;\n    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .cloned()\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp8qdhc_fv.rs:10:17: 10:43]> as Iterator>::Item == &_`\n    -->\
    \ /tmp/tmp8qdhc_fv.rs:11:10\n     |\n11   |         .cloned()\n     |        \
    \  ^^^^^^ expected reference, found struct `String`\n     |\n     = note: expected\
    \ reference `&_`\n                   found struct `String`\nnote: required by\
    \ a bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct\
    \ `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmp8qdhc_fv.rs:10:17:\
    \ 10:43]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp8qdhc_fv.rs:12:10\n\
    \   |\n12 |            .collect()\n   |             ^^^^^^^ method cannot be called\
    \ on `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmp8qdhc_fv.rs:10:17:\
    \ 10:43]>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp8qdhc_fv.rs:10:17: 10:43]> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmp8qdhc_fv.rs:10:17:\
    \ 10:43]>>: Iterator`\n           `Cloned<Filter<std::vec::IntoIter<String>, [closure@/tmp/tmp8qdhc_fv.rs:10:17:\
    \ 10:43]>>: Iterator`\n           which is required by `&mut Cloned<Filter<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmp8qdhc_fv.rs:10:17: 10:43]>>: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut string = String::new();\n\
    \n    for s in strings {\n        if s.contains(&substring) {\n            string.push_str(s);\n\
    \        }\n    }\n    Vec::from(string.into_bytes())\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk9mlsdw2.rs:11:29\n   |\n\
    11 |             string.push_str(s);\n   |                             ^\n   |\
    \                             |\n   |                             expected `&str`,\
    \ found struct `String`\n   |                             help: consider borrowing\
    \ here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk9mlsdw2.rs:14:5\n\
    \   |\n6  | fn filter_by_substring(strings: Vec<String>, substring: String) ->\
    \ Vec<String> {\n   |                                                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    14 |     Vec::from(string.into_bytes())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `u8`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<u8>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings;\n    }\n\n    if substring.is_empty() {\n       \
    \ return strings;\n    }\n\n    let mut current_substring = String::new();\n\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            current_substring\
    \ = s;\n        } else {\n            break;\n        }\n    }\n\n    strings.iter().filter(|s|\
    \ {\n        if s.contains(&current_substring) {\n            false\n        }\
    \ else {\n            true\n        }\n    }).collect()\n}\n\nfn main() {\n  \
    \  let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp8zlaemoe.rs:31:8\n     |\n\
    31   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring))\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpa2jr6w91.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring))\n\
    \     |                                          +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpa2jr6w91.rs:7:5\n  |\n6 | fn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n  |                      \
    \                                              ----------- expected `Vec<String>`\
    \ because of return type\n7 |     strings.iter().filter(|s| s.contains(substring))\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Filter`\n  |\n  = note: expected struct `Vec<String>`\n      \
    \       found struct `Filter<std::slice::Iter<'_, String>, [closure@/tmp/tmpa2jr6w91.rs:7:27:\
    \ 7:52]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|string| {\n            if string.contains(&substring) {\n\
    \                Some(string)\n            } else {\n                None\n  \
    \          }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpdsfxal0b.rs:16:10\n     |\n\
    16   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp711y3zf3.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmp711y3zf3.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .cloned()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwrthfpfa.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings;\n    }\n    strings\n        .into_iter()\n     \
    \   .filter(|&s| s.contains(substring))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4x54cifo.rs:12:33\n     |\n12   |         .filter(|&s| s.contains(substring))\n\
    \     |                        -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n12   |         .filter(|&s| s.contains(&substring))\n     |         \
    \                        +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found_substring\
    \ = false;\n    for s in strings {\n        if substring == s.to_string() {\n\
    \            found_substring = true;\n        }\n    }\n    if found_substring\
    \ {\n        strings\n    } else {\n        Vec::new()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `strings`\n   --> /tmp/tmpgs_ihlkf.rs:14:9\n\
    \    |\n6   | fn filter_by_substring(strings: Vec<String>, substring: String)\
    \ -> Vec<String> {\n    |                        ------- move occurs because `strings`\
    \ has type `Vec<String>`, which does not implement the `Copy` trait\n7   |   \
    \  let mut found_substring = false;\n8   |     for s in strings {\n    |     \
    \         ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n14  |         strings\n    |         ^^^^^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `strings`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n8   |     for s in &strings {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        strings\n    } else {\n        if strings.iter().any(|s| s.contains(&substring))\
    \ {\n            strings\n        } else {\n            Vec::new()\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"]`,\n right: `[\"\
    xxx\", \"xxxAAA\", \"xxx\"]`', /tmp/tmporo8sks_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if substring.is_empty()\
    \ {\n        return strings;\n    }\n\n    let mut found = Vec::new();\n    for\
    \ s in strings {\n        if s.contains(substring) {\n            found.push(s);\n\
    \        }\n    }\n\n    found\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpmgjnc5qj.rs:13:23\n     |\n13   |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n13   |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpscpt3_ad.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpscpt3_ad.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter()\n     \
    \   .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppnd8205h.rs:8:32\n     |\n8    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n8    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmppnd8205h.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|&s| {\n            if s.contains(substring) {\n        \
    \        Some(s)\n            } else {\n                None\n            }\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpgru_bdc4.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|string| string.contains(substring))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpam8jxbuw.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpam8jxbuw.rs:10:10\n     |\n10   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.contains(&substring))\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd50_jhw5.rs:9:25\n  |\n9 |\
    \         .filter_map(|s| s.contains(&substring))\n  |                       \
    \  ^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n9 |         .filter_map(|s| Some(s.contains(&substring)))\n\
    \  |                         +++++                      +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.contains(substring))\n        .cloned()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp306th7kh.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp306th7kh.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9rdoig97.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp9rdoig97.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|string| {\n            if string.contains(substring) {\n\
    \                Some(string.to_owned())\n            } else {\n             \
    \   None\n            }\n        })\n        .collect()\n}\n\nfn main() {\n  \
    \  let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdmosw7kk.rs:10:32\n     |\n10   |             if string.contains(substring)\
    \ {\n     |                       -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                       |\n     |                \
    \       required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n10   |             if string.contains(&substring) {\n     |         \
    \                       +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter_map(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsyodtacm.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpsyodtacm.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdbgj5n11.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpdbgj5n11.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered_strings.push(*string);\n        }\n    }\n    return\
    \ filtered_strings;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9m1mzger.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror[E0277]: the size for values\
    \ of type `str` cannot be known at compilation time\n   --> /tmp/tmp9m1mzger.rs:10:35\n\
    \    |\n10  |             filtered_strings.push(*string);\n    |             \
    \                 ---- ^^^^^^^ doesn't have a size known at compile-time\n   \
    \ |                              |\n    |                              required\
    \ by a bound introduced by this call\n    |\n    = help: the trait `Sized` is\
    \ not implemented for `str`\nnote: required by a bound in `Vec::<T, A>::push`\n\
    \nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmp9m1mzger.rs:7:32\n    |\n7   |     let mut filtered_strings\
    \ = Vec::new();\n    |                                ^^^^^^^^ doesn't have a\
    \ size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Vec::<T>::new`\n\nerror[E0277]: the\
    \ size for values of type `str` cannot be known at compilation time\n   --> /tmp/tmp9m1mzger.rs:7:32\n\
    \    |\n7   |     let mut filtered_strings = Vec::new();\n    |              \
    \                  ^^^ doesn't have a size known at compile-time\n    |\n    =\
    \ help: the trait `Sized` is not implemented for `str`\nnote: required by a bound\
    \ in `Vec`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9m1mzger.rs:13:12\n\
    \   |\n6  | fn filter_by_substring(strings: Vec<String>, substring: String) "
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings\n    }\n\n    let mut index = strings.len() - 1;\n\
    \    let mut index = strings.len() - 1;\n\n    let mut index = strings.len() -\
    \ 1;\n    while index >= 0 {\n        if strings.get_mut(index).contains(&substring)\
    \ {\n            return strings.drain(..index + 1);\n        }\n        index\
    \ -= 1;\n    }\n\n    strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0658]: use of unstable library feature 'option_result_contains'\n\
    \  --> /tmp/tmpmmfke__z.rs:16:35\n   |\n16 |         if strings.get_mut(index).contains(&substring)\
    \ {\n   |                                   ^^^^^^^^\n   |\n   = note: see issue\
    \ #62358 <https://github.com/rust-lang/rust/issues/62358> for more information\n\
    \nerror[E0277]: can't compare `String` with `&mut String`\n    --> /tmp/tmpmmfke__z.rs:16:44\n\
    \     |\n16   |         if strings.get_mut(index).contains(&substring) {\n   \
    \  |                                   -------- ^^^^^^^^^^ no implementation for\
    \ `String == &mut String`\n     |                                   |\n     |\
    \                                   required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: PartialEq<&mut String>` is not\
    \ satisfied\n     = help: the trait `PartialEq<&mut String>` is not implemented\
    \ for `String`\n     = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \               <&'a str as PartialEq<OsString>>\n               <&'a str as PartialEq<String>>\n\
    \               <&'b str as PartialEq<Cow<'a, str>>>\n               <String as\
    \ PartialEq<&'a str>>\n               <String as PartialEq<Cow<'a, str>>>\n  \
    \             <String as PartialEq<str>>\n               <String as PartialEq>\n\
    \               <str as PartialEq<Cow<'a, str>>>\n             and 4 others\n\
    note: required by a bound in `Option::<T>::contains`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmmfke__z.rs:17:20\n   |\n17 |             return strings.drain(..index\
    \ + 1);\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `std::vec::Drain`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `std::vec::Drain<'_, String>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0658.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpkwj0pd5v.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpkwj0pd5v.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1qm6xygp.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmp1qm6xygp.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .cloned()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_plls_xu.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_plls_xu.rs:7:5\n\
    \   |\n6  |   fn filter_by_substring(strings: Vec<String>, substring: String)\
    \ -> Vec<String> {\n   |                                                     \
    \                 ----------- expected `Vec<String>` because of return type\n\
    7  | /     strings\n8  | |         .iter()\n9  | |         .filter(|s| s.contains(substring))\n\
    10 | |         .cloned()\n   | |_________________^ expected struct `Vec`, found\
    \ struct `Cloned`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Cloned<Filter<std::slice::Iter<'_, String>, [closure@/tmp/tmp_plls_xu.rs:9:17:\
    \ 9:42]>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings.iter() {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(*string);\n        }\n    }\n    return\
    \ filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of `*string` which is behind a shared reference\n\
    \  --> /tmp/tmp7_gudiij.rs:10:35\n   |\n10 |             filtered_strings.push(*string);\n\
    \   |                                   ^^^^^^^ move occurs because `*string`\
    \ has type `String`, which does not implement the `Copy` trait\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1z0lci1n.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmp1z0lci1n.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|x| x.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4ocykl7p.rs:9:36\n     |\n9    |         .filter_map(|x| x.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|x| x.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp4ocykl7p.rs:9:25\n  |\n9 |         .filter_map(|x| x.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|x|\
    \ Some(x.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp7gpq1kq9.rs:7:46\n     |\n7    |     strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \  -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n7    |     strings.iter().filter_map(|s| s.contains(&substring)).collect()\n\
    \     |                                              +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp7gpq1kq9.rs:7:35\n  |\n7 |     strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n  |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     strings.iter().filter_map(|s| Some(s.contains(substring))).collect()\n\
    \  |                                   +++++                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut substrings = Vec::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            substrings.push(s);\n\
    \        }\n    }\n    substrings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpnauo0dkd.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppdkzby7u.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmppdkzby7u.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .cloned()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp64_cw2f6.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            s.contains(&substring)\n             \
    \   .map(|t| {\n                    if t {\n                        Some(s)\n\
    \                    } else {\n                        None\n                \
    \    }\n                })\n                .unwrap_or(None)\n        })\n   \
    \     .collect::<Vec<String>>()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `bool` is not an iterator\n  --> /tmp/tmp5w4z8z1y.rs:11:18\n\
    \   |\n11 |                 .map(|t| {\n   |                  ^^^ `bool` is not\
    \ an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `bool: Iterator`\n           which is required by `&mut bool: Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter()\n     \
    \   .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpss3kpu27.rs:8:32\n     |\n8    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n8    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpss3kpu27.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4y08gcyj.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp4y08gcyj.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|string| string.contains(substring))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfs_vldo3.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpfs_vldo3.rs:10:10\n     |\n10   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found_indices\
    \ = Vec::new();\n    for string in strings.iter() {\n        if string.contains(substring)\
    \ {\n            found_indices.push(*strings.iter().position(|x| x == string));\n\
    \        }\n    }\n\n    let mut filtered_strings = Vec::new();\n    for i in\
    \ found_indices.iter() {\n        filtered_strings.push(*strings.iter().skip(i).take(1).collect::<String>());\n\
    \    }\n\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_x7u33fw.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror[E0614]: type `Option<usize>`\
    \ cannot be dereferenced\n  --> /tmp/tmp_x7u33fw.rs:10:32\n   |\n10 |        \
    \     found_indices.push(*strings.iter().position(|x| x == string));\n   |   \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_x7u33fw.rs:16:52\n   |\n16 |         filtered_strings.push(*strings.iter().skip(i).take(1).collect::<String>());\n\
    \   |                                                    ^ expected `usize`, found\
    \ reference\n   |\n   = note:   expected type `usize`\n           found reference\
    \ `&_`\nhelp: consider dereferencing the borrow\n   |\n16 |         filtered_strings.push(*strings.iter().skip(*i).take(1).collect::<String>());\n\
    \   |                                                    +\n\nerror[E0277]: a\
    \ value of type `String` cannot be built from an iterator over elements of type\
    \ `&String`\n    --> /tmp/tmp_x7u33fw.rs:16:63\n     |\n16   |         filtered_strings.push(*strings.iter().skip(i).take(1).collect::<String>());\n\
    \     |                                                               ^^^^^^^\
    \ value of type `String` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `String`\n     = help: the following other types implement trait `FromIterator<A>`:\n\
    \               <String as FromIter"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwz1i9qye.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpwz1i9qye.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for s in strings.iter() {\n        if s.contains(substring) {\n         \
    \   filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpk9u76dc6.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk9u76dc6.rs:13:5\n\
    \   |\n6  | fn filter_by_substring(strings: Vec<String>, substring: String) ->\
    \ Vec<String> {\n   |                                                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    13 |     filtered\n   |     ^^^^^^^^ expected struct `String`, found `&String`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1bo_qj4o.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp1bo_qj4o.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings {\n        if !s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpa_omo4c7.rs:9:24\n     |\n9    |         if !s.contains(substring)\
    \ {\n     |               -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if !s.contains(&substring)\
    \ {\n     |                        +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp0vwgu774.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp0vwgu774.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5ljnpipz.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp5ljnpipz.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut index = String::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            if index.is_empty()\
    \ {\n                index = s;\n            } else {\n                index =\
    \ index.to_string();\n            }\n        }\n    }\n    let mut strings = strings.clone();\n\
    \    strings.retain(|s| {\n        let mut indexed = String::new();\n        for\
    \ c in s.chars() {\n            if indexed.contains(index) {\n               \
    \ indexed.push_str(&c);\n            }\n        }\n        indexed\n    });\n\
    \    strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpo48zsgdm.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0277]: expected a `FnMut<(char,)>`\
    \ closure, found `String`\n    --> /tmp/tmpo48zsgdm.rs:21:33\n     |\n21   | \
    \            if indexed.contains(index) {\n     |                        --------\
    \ ^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               \
    \         |\n     |                        required by a bound introduced by this\
    \ call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n21   |             if indexed.contains(&index)\
    \ {\n     |                                 +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpo48zsgdm.rs:22:34\n   |\n22 |                 indexed.push_str(&c);\n\
    \   |                                  ^^ expected `str`, found `char`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo48zsgdm.rs:25:9\n   |\n25 | \
    \        indexed\n   |         ^^^^^^^ expected `bool`, found struct `String`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter()\n     \
    \   .filter_map(|s| if s.contains(substring) => Some(s) else None)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `=>`\n --> /tmp/tmpzz9j5z11.rs:8:50\n  |\n8\
    \ |         .filter_map(|s| if s.contains(substring) => Some(s) else None)\n \
    \ |                         --                       ^^ expected `{`\n  |    \
    \                     |\n  |                         this `if` expression has\
    \ a condition, but no block\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered = vec![];\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6pt5yr66.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut indexes = vec![];\n    for (idx,\
    \ string) in strings.iter().enumerate().filter(|(idx, _)| {\n        strings.contains(substring)\n\
    \    }).cloned().enumerate() {\n        indexes.push(idx);\n    }\n    indexes.reverse().collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmwmpzgg9.rs:12:26\n   |\n\
    12 |         strings.contains(substring)\n   |                          ^^^^^^^^^\n\
    \   |                          |\n   |                          expected `&String`,\
    \ found struct `String`\n   |                          help: consider borrowing\
    \ here: `&substring`\n\nerror[E0271]: type mismatch resolving `<Filter<Enumerate<std::slice::Iter<'_,\
    \ String>>, [closure@/tmp/tmpmwmpzgg9.rs:11:60: 13:6]> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmpmwmpzgg9.rs:13:8\n     |\n13   |     }).cloned().enumerate()\
    \ {\n     |        ^^^^^^ expected reference, found tuple\n     |\n     = note:\
    \ expected reference `&_`\n                    found tuple `(usize, &String)`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `enumerate`\
    \ exists for struct `Cloned<Filter<Enumerate<std::slice::Iter<'_, String>>, [closure@/tmp/tmpmwmpzgg9.rs:11:60:\
    \ 13:6]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpmwmpzgg9.rs:13:17\n\
    \   |\n13 |        }).cloned().enumerate() {\n   |                    ^^^^^^^^^\
    \ method cannot be called on `Cloned<Filter<Enumerate<std::slice::Iter<'_, String>>,\
    \ [closure@/tmp/tmpmwmpzgg9.rs:11:60: 13:6]>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Filter<Enumerate<std::slice::Iter<'_,\
    \ String>>, [closure@/tmp/tmpmwmpzgg9.rs:11:60: 13:6]> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<Filter<Enumerate<std::slice::Iter<'_,\
    \ String>>, [closure@/tmp/tmpmwmpzgg9.rs:11:60: 13:6]>>: Iterator`\n         \
    \  `Cloned<Filter<Enumerate<std::slice::Iter<'_, String>>, [closure@/tmp/tmpmwmpzgg9.rs:11:60:\
    \ 13:6]>>: Iterator`\n           which is required by `&mut Cloned<Filter<Enumerate<std::slice::Iter<'_,\
    \ String>>, [closure@/tmp/tmpmwmpzgg9.rs:11:60: 13:6]>>: Iterator`\n\nerror[E0599]:\
    \ `()` is not an iterator\n  --> /tmp/tmpmwmpzgg9.rs:16:23\n   |\n16 |     indexes.reverse().collect()\n\
    \   |                       ^^^^^^^ `()` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not sati"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ {\n        if s.contains(&substring) {\n            Some(s)\n        } else\
    \ {\n            None\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxmo8heyg.rs:7:5\n   |\n6\
    \  |   fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    \
    \  ----------- expected `Vec<String>` because of return type\n7  | /     strings.iter().filter_map(|s|\
    \ {\n8  | |         if s.contains(&substring) {\n9  | |             Some(s)\n\
    10 | |         } else {\n11 | |             None\n12 | |         }\n13 | |   \
    \  })\n   | |______^ expected struct `Vec`, found struct `FilterMap`\n   |\n \
    \  = note: expected struct `Vec<String>`\n              found struct `FilterMap<std::slice::Iter<'_,\
    \ String>, [closure@/tmp/tmpxmo8heyg.rs:7:31: 13:6]>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut strings_ = strings.clone();\n\
    \    strings_.retain(|s| s.contains(substring));\n    strings_\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9_8adffr.rs:8:36\n     |\n8    |     strings_.retain(|s| s.contains(substring));\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n8    |     strings_.retain(|s| s.contains(&substring));\n    \
    \ |                                    +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = strings;\n    filtered_strings.retain(|s| s.contains(substring));\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplvt58bfx.rs:8:44\n     |\n8    |     filtered_strings.retain(|s|\
    \ s.contains(substring));\n     |                                   -------- ^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \              |\n     |                                   required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n8    |     filtered_strings.retain(|s|\
    \ s.contains(&substring));\n     |                                           \
    \ +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpw5bdp9lt.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpw5bdp9lt.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_ifjuux2.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmps9l0l3vx.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpitp8n_xj.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s|\n            if s.contains(substring) {\n           \
    \     Some(s)\n            } else {\n                None\n            }\n   \
    \     )\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5iu0yos6.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmp5iu0yos6.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpj0poxjm0.rs:7:55\n     |\n\
    7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n   \
    \  |\n     = help: the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut s = strings.clone();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.len() - i > substring.length()\
    \ {\n            break;\n        }\n        if s.subslice(i, i + substring.length()).contains(&substring)\
    \ {\n            i += substring.length();\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmps4wnwqvz.rs:10:36\n   |\n10 |         if s.len()\
    \ - i > substring.length() {\n   |                                    ^^^^^^ help:\
    \ there is an associated function with a similar name: `len`\n\nerror[E0599]:\
    \ no method named `subslice` found for struct `Vec<String>` in the current scope\n\
    \  --> /tmp/tmps4wnwqvz.rs:13:14\n   |\n13 |         if s.subslice(i, i + substring.length()).contains(&substring)\
    \ {\n   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `splice`\n\nerror[E0599]: no method named `length` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmps4wnwqvz.rs:13:40\n   |\n13 |         if\
    \ s.subslice(i, i + substring.length()).contains(&substring) {\n   |         \
    \                               ^^^^^^ help: there is an associated function with\
    \ a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmps4wnwqvz.rs:14:28\n   |\n14 | \
    \            i += substring.length();\n   |                            ^^^^^^\
    \ help: there is an associated function with a similar name: `len`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.contains(substring) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpbs0l41t9.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpbs0l41t9.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpavhymxz2.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|&s| s.contains(&substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp4663bs_l.rs:10:10\n     |\n\
    10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|string| string.contains(substring))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpniebjb5n.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpniebjb5n.rs:10:10\n     |\n10   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found = Vec::new();\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      found.push(string);\n        }\n    }\n    found\n}\n\nfn main() {\n  \
    \  let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxeob0tpf.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpjcei9yk2.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpjcei9yk2.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .cloned()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpbw5784ud.rs:10:10\n     |\n\
    10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsprlfm4s.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpsprlfm4s.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpqevj3ic0.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpqevj3ic0.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered = String::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered.into_boxed_slice()\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpaxpuqds4.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaxpuqds4.rs:10:27\n\
    \   |\n10 |             filtered.push(s);\n   |                           ^ expected\
    \ `char`, found struct `String`\n\nerror[E0599]: no method named `into_boxed_slice`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpaxpuqds4.rs:13:14\n\
    \   |\n13 |     filtered.into_boxed_slice()\n   |              ^^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `into_boxed_str`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut results = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       results.push(string);\n        }\n    }\n    results\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpk56qqziu.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpk56qqziu.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzcs389ut.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut result: Vec<String> = vec![];\n\
    \    for &s in strings {\n        if s.contains(&substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ygy8rfy.rs:11:9\n   |\n\
    11 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|str| str\n            .iter()\n            .filter_map(|c|\
    \ c.contains(substring))\n            .take_if(|&b| b)\n            .collect::<Vec<_>>()\n\
    \        )\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for reference `&String` in the\
    \ current scope\n  --> /tmp/tmp1i8x2gdz.rs:10:14\n   |\n10 |             .iter()\n\
    \   |              ^^^^ method not found in `&String`\n   |\nhelp: because of\
    \ the in-memory representation of `&str`, to obtain an `Iterator` over each of\
    \ its codepoint use method `chars`\n   |\n10 |             .chars()\n   |    \
    \          ~~~~~\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut index = -1;\n\
    \    let mut result: Vec<String> = vec![];\n    for str in strings {\n       \
    \ let new_str = match str.as_str().find(|c| *c == substring) {\n            None\
    \ => continue,\n            Some(start) => str[start..].to_string(),\n       \
    \ };\n        result.push(new_str);\n        match str[new_str.len() - substring.len()..]\
    \ {\n            None => continue,\n            Some(end) => str.truncate(start\
    \ + new_str.len() + end),\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0423]: expected value, found built-in attribute `start`\n  --> /tmp/tmprs568ifw.rs:17:39\n\
    \   |\n17 |             Some(end) => str.truncate(start + new_str.len() + end),\n\
    \   |                                       ^^^^^ not a value\n\nerror[E0282]:\
    \ type annotations needed\n  --> /tmp/tmprs568ifw.rs:10:48\n   |\n10 |       \
    \  let new_str = match str.as_str().find(|c| *c == substring) {\n   |        \
    \                                        ^ consider giving this closure parameter\
    \ a type\n   |\n   = note: type must be known at this point\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprs568ifw.rs:16:13\n   |\n15 |         match str[new_str.len()\
    \ - substring.len()..] {\n   |               --------------------------------------\
    \ this expression has type `str`\n16 |             None => continue,\n   |   \
    \          ^^^^ expected `str`, found enum `Option`\n   |\n   = note: expected\
    \ type `str`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprs568ifw.rs:17:13\n   |\n15 |         match str[new_str.len()\
    \ - substring.len()..] {\n   |               --------------------------------------\
    \ this expression has type `str`\n16 |             None => continue,\n17 |   \
    \          Some(end) => str.truncate(start + new_str.len() + end),\n   |     \
    \        ^^^^^^^^^ expected `str`, found enum `Option`\n   |\n   = note: expected\
    \ type `str`\n              found enum `Option<_>`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0282, E0308, E0423.\n\
    For more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return vec![];\n    }\n\n    strings\n        .iter()\n        .filter_map(|string|\
    \ string.contains(&substring))\n        .cloned()\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph83evx6i.rs:13:30\n   |\n\
    13 |         .filter_map(|string| string.contains(&substring))\n   |         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n   |\n   = note: expected enum `Option<_>`\n              found type\
    \ `bool`\nhelp: try wrapping the expression in `Some`\n   |\n13 |         .filter_map(|string|\
    \ Some(string.contains(&substring)))\n   |                              +++++\
    \                           +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut retvec = vec![];\n\
    \    for str in strings {\n        if str.contains(substring) {\n            retvec.push(str);\n\
    \        }\n    }\n    retvec\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpomrhd8sp.rs:9:25\n     |\n9    |         if str.contains(substring)\
    \ {\n     |                -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if str.contains(&substring)\
    \ {\n     |                         +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut strings_to_keep\
    \ = Vec::new();\n    for string in strings.iter() {\n        if string.contains(substring)\
    \ {\n            strings_to_keep.push(string);\n        }\n    }\n    strings_to_keep\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptyn9j89u.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmptyn9j89u.rs:13:5\n   |\n6  | fn filter_by_substring(strings: Vec<String>,\
    \ substring: String) -> Vec<String> {\n   |                                  \
    \                                  ----------- expected `Vec<String>` because\
    \ of return type\n...\n13 |     strings_to_keep\n   |     ^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `&String`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.contains(substring).unwrap_or(false))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptprxmnkd.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring).unwrap_or(false))\n\
    \     |                                    +\n\nerror[E0599]: no method named\
    \ `unwrap_or` found for type `bool` in the current scope\n --> /tmp/tmptprxmnkd.rs:9:47\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n  |\
    \                                               ^^^^^^^^^ method not found in\
    \ `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(substring))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp30gyurl0.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|string| string.contains(&substring))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp54yeiznw.rs:9:30\n  |\n9 |\
    \         .filter_map(|string| string.contains(&substring))\n  |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `bool`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\nhelp:\
    \ try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|string|\
    \ Some(string.contains(&substring)))\n  |                              +++++ \
    \                          +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.contains(substring).unwrap_or(false))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpjjgab5bt.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring).unwrap_or(false))\n\
    \     |                                    +\n\nerror[E0599]: no method named\
    \ `unwrap_or` found for type `bool` in the current scope\n --> /tmp/tmpjjgab5bt.rs:9:47\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n  |\
    \                                               ^^^^^^^^^ method not found in\
    \ `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzu_gknt0.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpzu_gknt0.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb8sb9iwa.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered = vec![];\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp98ibq3tu.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_ig61l_u.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut output = Vec::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            output.push(s);\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsxb8d8z1.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            found_strings.push(string);\n        }\n    }\n    found_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3jmky4tu.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut out = Vec::with_capacity(strings.len());\n\
    \    for s in strings {\n        if s.contains(substring) {\n            out.push(s);\n\
    \        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmputwi5_3d.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for s in strings {\n        if !s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp64nvznpo.rs:9:24\n     |\n9    |         if !s.contains(substring)\
    \ {\n     |               -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if !s.contains(&substring)\
    \ {\n     |                        +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpywq9e1at.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpywq9e1at.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv64g6jhr.rs:7:35\n  |\n7 |\
    \     strings.iter().filter_map(|s| s.contains(&substring)).collect()\n  |   \
    \                                ^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type\
    \ `bool`\nhelp: try wrapping the expression in `Some`\n  |\n7 |     strings.iter().filter_map(|s|\
    \ Some(s.contains(&substring))).collect()\n  |                               \
    \    +++++                      +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings\n    }\n    let mut result = Vec::with_capacity(strings.len());\n\
    \    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f3auvff.rs:12:23\n     |\n12   |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n12   |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = String::new();\n\
    \    let mut i = 0;\n    for string in strings {\n        i += 1;\n        if\
    \ string.contains(&substring) {\n            result.push_str(&string);\n     \
    \   }\n    }\n    if i != 0 {\n        result\n    } else {\n        vec![]\n\
    \    }\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0qbkhd3u.rs:16:9\n   |\n\
    6  | fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |         result\n  \
    \ |         ^^^^^^ expected struct `Vec`, found struct `String`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpikcsdoc3.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut string = strings.clone();\n\
    \    string.retain(|x| x.contains(substring));\n    string\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpqp9b1q04.rs:8:34\n     |\n8    |     string.retain(|x| x.contains(substring));\n\
    \     |                         -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                         |\n     |              \
    \           required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n8    |     string.retain(|x| x.contains(&substring));\n     |\
    \                                  +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp8j33l83p.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmp8j33l83p.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.contains(substring) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwc0wm1oc.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpwc0wm1oc.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found_substring\
    \ = false;\n    let mut filtered_strings = Vec::new();\n    for str in strings\
    \ {\n        if str.contains(substring) {\n            found_substring = true;\n\
    \        } else {\n            if found_substring {\n                filtered_strings.push(str);\n\
    \            }\n        }\n    }\n    filtered_strings\n}\n\nfn main() {\n   \
    \ let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5tcib8rj.rs:10:25\n     |\n10   |         if str.contains(substring)\
    \ {\n     |                -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |         if str.contains(&substring)\
    \ {\n     |                         +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp5e1h7kuq.rs:7:55\n     |\n\
    7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n   \
    \  |\n     = help: the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|&s| s.contains(&substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpo2k1i7t2.rs:10:10\n     |\n\
    10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(substring))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpis6hrfqd.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5w58pwuy.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp5w58pwuy.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    // Split input strings\
    \ via delimiter\n    let mut split_strings = strings.into_iter().map(|s| s.split(substring)).collect::<Vec<_>>();\n\
    \    // Filter all substrings from input strings before return\n    split_strings.filter_map(|s|\
    \ s.iter().filter_map(|s| s.to_owned()).collect::<Vec<_>>()).collect()\n}\n\n\
    fn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpcv1u0z_l.rs:8:65\n     |\n8    |     let mut split_strings = strings.into_iter().map(|s|\
    \ s.split(substring)).collect::<Vec<_>>();\n     |                           \
    \                                ----- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                                                      \
    \     |\n     |                                                           required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::split`\nhelp: consider borrowing here\n     |\n8    |     let mut split_strings\
    \ = strings.into_iter().map(|s| s.split(&substring)).collect::<Vec<_>>();\n  \
    \   |                                                                 +\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `String`\n   --> /tmp/tmpcv1u0z_l.rs:8:29\n\
    \    |\n8   |     let mut split_strings = strings.into_iter().map(|s| s.split(substring)).collect::<Vec<_>>();\n\
    \    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected an `FnMut<(char,)>` closure, found `String`\n    |\n    = help: the\
    \ trait `FnMut<(char,)>` is not implemented for `String`\n    = help: the following\
    \ other types implement trait `Pattern<'a>`:\n              &'b String\n     \
    \         &'b str\n              &'c &'b str\n    = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by\
    \ a bound in `std::str::Split`\n    = note: this error originates in the macro\
    \ `generate_pattern_iterators` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n\
    \   --> /tmp/tmpcv1u0z_l.rs:8:77\n    |\n8   |     let mut split_strings = strings.into_iter().map(|s|\
    \ s.split(substring)).collect::<Vec<_>>();\n    |                            \
    \            "
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpkcryzjal.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpkcryzjal.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmped1n4i_p.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmped1n4i_p.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut index = strings.iter().position(|s|\
    \ s == substring).unwrap();\n    let mut new_strings = vec![];\n    while let\
    \ Some(pos) = index {\n        new_strings.push(*strings.remove(index));\n   \
    \     index = strings.iter().position(|s| s == substring).unwrap();\n    }\n \
    \   new_strings.extend(strings)\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&String` with `String`\n --> /tmp/tmpld06fcyp.rs:7:51\n\
    \  |\n7 |     let mut index = strings.iter().position(|s| s == substring).unwrap();\n\
    \  |                                                   ^^ no implementation for\
    \ `&String == String`\n  |\n  = help: the trait `PartialEq<String>` is not implemented\
    \ for `&String`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n\
    \            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a\
    \ str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String\
    \ as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a,\
    \ str>>>\n          and 4 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpld06fcyp.rs:9:15\n\
    \  |\n9 |     while let Some(pos) = index {\n  |               ^^^^^^^^^   -----\
    \ this expression has type `usize`\n  |               |\n  |               expected\
    \ `usize`, found enum `Option`\n  |\n  = note: expected type `usize`\n       \
    \      found enum `Option<_>`\n\nerror[E0277]: the size for values of type `str`\
    \ cannot be known at compilation time\n   --> /tmp/tmpld06fcyp.rs:10:26\n    |\n\
    10  |         new_strings.push(*strings.remove(index));\n    |               \
    \      ---- ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |                     |\n    |                     required by a bound introduced\
    \ by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n\
    note: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]: the size for\
    \ values of type `str` cannot be known at compilation time\n   --> /tmp/tmpld06fcyp.rs:8:27\n\
    \    |\n8   |     let mut new_strings = vec![];\n    |                       \
    \    ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `str`\nnote: required by a bound in `Vec::<T>::new`\n\
    \    = note: this error originates in the macro `vec` (in Nightly builds, run\
    \ with -Z macro-backtrace for m"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpv8gsotdl.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpneh7_unc.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpneh7_unc.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for (index, string) in strings.iter().enumerate() {\n        if string.contains(substring)\
    \ {\n            result.push(string);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp51zt0dkl.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp51zt0dkl.rs:13:5\n   |\n6  | fn filter_by_substring(strings: Vec<String>,\
    \ substring: String) -> Vec<String> {\n   |                                  \
    \                                  ----------- expected `Vec<String>` because\
    \ of return type\n...\n13 |     result\n   |     ^^^^^^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut new_strings =\
    \ strings.clone();\n    new_strings.retain(|s| s.contains(&substring));\n    new_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpy0yf6nhd.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for (i, s) in strings.iter().enumerate() {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpd_kk2y3w.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd_kk2y3w.rs:13:5\n\
    \   |\n6  | fn filter_by_substring(strings: Vec<String>, substring: String) ->\
    \ Vec<String> {\n   |                                                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    13 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings;\n    }\n\n    if strings[0].is_prefix(&substring)\
    \ {\n        strings\n    } else {\n        let index = substring.chars().iter().position(|c|\
    \ strings.iter().any(|s| s.contains(&c)));\n        if index != 0 {\n        \
    \    let result = strings.split_at(index).collect();\n            result.extend(strings.split_at(0));\n\
    \            result\n        } else {\n            strings\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_prefix` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmpm57rhed0.rs:11:19\n   |\n11 |     if strings[0].is_prefix(&substring)\
    \ {\n   |                   ^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `strip_prefix`\n\nerror[E0599]: no method named `iter` found\
    \ for struct `Chars` in the current scope\n  --> /tmp/tmpm57rhed0.rs:14:39\n \
    \  |\n14 |         let index = substring.chars().iter().position(|c| strings.iter().any(|s|\
    \ s.contains(&c)));\n   |                                       ^^^^ private field,\
    \ not a method\n\nerror[E0599]: `(&[String], &[String])` is not an iterator\n\
    \  --> /tmp/tmpm57rhed0.rs:16:50\n   |\n16 |             let result = strings.split_at(index).collect();\n\
    \   |                                                  ^^^^^^^ `(&[String], &[String])`\
    \ is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(&[String], &[String]): Iterator`\n           which is required by\
    \ `&mut (&[String], &[String]): Iterator`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfaldego2.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpfaldego2.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpakblfncv.rs:10:10\n     |\n\
    10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.contains(substring) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptv5l0425.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmptv5l0425.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found = Vec::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            found.push(s);\n\
    \        }\n    }\n    found\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfhncngi5.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.contains(substring) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzds2q8ui.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpzds2q8ui.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings;\n    }\n    strings\n        .iter()\n        .filter(|x|\
    \ x.contains(substring))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpdkuwxg7l.rs:12:32\n     |\n12   |         .filter(|x| x.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n12   |         .filter(|x| x.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpdkuwxg7l.rs:13:10\n\
    \     |\n13   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if let Some(idx) = string_indices().position(|idx|\
    \ strings.contains(&strings[idx])) {\n        if strings.len() == 1 {\n      \
    \      strings\n        } else {\n            strings[..idx].iter().filter(|s|\
    \ strings.contains(&s)).collect()\n        }\n    } else {\n        strings\n\
    \    }\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `string_indices` in this scope\n -->\
    \ /tmp/tmp01xrpjcf.rs:7:24\n  |\n7 |     if let Some(idx) = string_indices().position(|idx|\
    \ strings.contains(&strings[idx])) {\n  |                        ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp01xrpjcf.rs:11:68\n\
    \     |\n11   |             strings[..idx].iter().filter(|s| strings.contains(&s)).collect()\n\
    \     |                                                                    ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpmiwv5hv6.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpmiwv5hv6.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6490otyi.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmp6490otyi.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3j0j_x_a.rs:7:46\n     |\n7    |     strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \  -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n7    |     strings.iter().filter_map(|s| s.contains(&substring)).collect()\n\
    \     |                                              +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp3j0j_x_a.rs:7:35\n  |\n7 |     strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n  |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     strings.iter().filter_map(|s| Some(s.contains(substring))).collect()\n\
    \  |                                   +++++                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(&substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmppgymdjns.rs:7:55\n     |\n\
    7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n   \
    \  |\n     = help: the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut string_with_substring\
    \ = String::from(\"\");\n    for &s in strings {\n        string_with_substring.push_str(&s);\n\
    \        string_with_substring.push_str(&substring);\n    }\n    strings.iter().filter(|s|\
    \ string_with_substring.contains(&s)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt299woha.rs:8:9\n  |\n8 |\
    \     for &s in strings {\n  |         ^^    ------- this expression has type\
    \ `Option<String>`\n  |         |\n  |         expected struct `String`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `s`\n\
    \  |\n  = note: expected struct `String`\n          found reference `&_`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n -->\
    \ /tmp/tmpt299woha.rs:8:10\n  |\n8 |     for &s in strings {\n  |          ^ doesn't\
    \ have a size known at compile-time\n  |\n  = help: the trait `Sized` is not implemented\
    \ for `str`\n  = note: all local variables must have a statically known size\n\
    \  = help: unsized locals are gated as an unstable feature\n\nerror[E0277]: expected\
    \ a `Fn<(char,)>` closure, found `String`\n    --> /tmp/tmpt299woha.rs:12:62\n\
    \     |\n12   |     strings.iter().filter(|s| string_with_substring.contains(&s)).collect()\n\
    \     |                                                     -------- ^^\n    \
    \ |                                                     |        |\n     |   \
    \                                                  |        expected an `Fn<(char,)>`\
    \ closure, found `String`\n     |                                            \
    \         |        help: consider dereferencing here: `&**s`\n     |         \
    \                                            required by a bound introduced by\
    \ this call\n     |\n     = help: the trait `Fn<(char,)>` is not implemented for\
    \ `String`\n     = note: required because of the requirements on the impl of `FnOnce<(char,)>`\
    \ for `&String`\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `&&&String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n    --> /tmp/tmpt299woha.rs:12:67\n\
    \     |\n12   |     strings.iter().filter(|s| string_with_substring.contains(&s)).collect()\n\
    \     |                                                                 "
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter_map(|s|\
    \ {\n        if s.contains(substring) {\n            Some(s)\n        } else {\n\
    \            None\n        }\n    })\n    .collect()\n}\n\nfn main() {\n    let\
    \ candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptzvhly9t.rs:8:23\n     |\n8    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmptzvhly9t.rs:14:6\n\
    \     |\n14   |     .collect()\n     |      ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|&s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6pymshad.rs:7:43\n     |\n7    |     strings.iter().filter(|&s|\
    \ s.contains(substring)).collect()\n     |                                  --------\
    \ ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |           \
    \                       |\n     |                                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n7    |     strings.iter().filter(|&s|\
    \ s.contains(&substring)).collect()\n     |                                  \
    \         +\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n    --> /tmp/tmp6pymshad.rs:7:55\n\
    \     |\n7    |     strings.iter().filter(|&s| s.contains(substring)).collect()\n\
    \     |                                                       ^^^^^^^ value of\
    \ type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered = vec![];\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.push(string);\n        }\n    }\n    return filtered;\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpskcwp6t3.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpiwdtco2i.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpiwdtco2i.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings\n    }\n    if strings.len() == 1 {\n        return\
    \ vec![''];\n    }\n    let mut i = 0;\n    while i < strings.len() && i < strings.len()\
    \ - substring.len() {\n        if strings[i] == substring {\n            i +=\
    \ substring.len();\n        } else {\n            i += 1;\n        }\n    }\n\
    \    strings\n        .iter()\n        .take(i)\n        .chain(\n           \
    \ strings\n                .iter()\n                .skip(i + substring.len()),\n\
    \        )\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmpteyhqbk7.rs:11:22\n   |\n\
    11 |         return vec![''];\n   |                      ^ empty character literal\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpteyhqbk7.rs:29:10\n     |\n\
    29   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp20fohj9_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp20fohj9_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered_strings\
    \ = strings.clone();\n    filtered_strings.retain(|s| s.contains(substring));\n\
    \    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp3t7wyq1n.rs:8:44\n     |\n8    |     filtered_strings.retain(|s|\
    \ s.contains(substring));\n     |                                   -------- ^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \              |\n     |                                   required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n8    |     filtered_strings.retain(|s|\
    \ s.contains(&substring));\n     |                                           \
    \ +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| {\n            if s.contains(substring) {\n         \
    \       Some(s)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp5n_y1jiq.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmp5n_y1jiq.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpmntc255y.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxmvkxz7q.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpxmvkxz7q.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|e| {\n            if e.contains(substring) {\n         \
    \       Some(e)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpq5lr7i86.rs:10:27\n     |\n10   |             if e.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ e.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpq5lr7i86.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|x| {\n            if x.contains(&substring) {\n        \
    \        Some(x)\n            } else {\n                None\n            }\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpqsr9geyu.rs:16:10\n     |\n\
    16   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpx_qqc4vl.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut matched: Vec<String>\
    \ = Vec::new();\n    for string in strings.iter() {\n        if string.contains(substring)\
    \ {\n            matched.push(string)\n        }\n    }\n    return matched\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_vovxsch.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp_vovxsch.rs:10:26\n   |\n10 |             matched.push(string)\n\
    \   |                          ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                          |\n   |                          expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if substring.is_empty()\
    \ {\n        strings\n    } else {\n        strings.iter().filter_map(|s| {\n\
    \            if s.contains(&substring) {\n                Some(s)\n          \
    \  } else {\n                None\n            }\n        }).collect()\n    }\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmplbraeim5.rs:16:12\n     |\n\
    16   |         }).collect()\n     |            ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpozqikljj.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpozqikljj.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmps60j1h11.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmps60j1h11.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmps71w9zym.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings;\n    }\n    let mut result = Vec::with_capacity(strings.len());\n\
    \    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp0u2ei631.rs:12:23\n     |\n12   |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n12   |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut string_iter =\
    \ strings.iter();\n    let mut substring_iter = substring.chars().cloned().collect::<Vec<_>>();\n\
    \    loop {\n        if let Some(found) = substring_iter.find(|&c| string_iter.next().contains(&c))\
    \ {\n            string_iter.next()\n        } else {\n            break;\n  \
    \      }\n    }\n    string_iter.collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmpb3pp029h.rs:8:48\n     |\n8    |     let mut substring_iter\
    \ = substring.chars().cloned().collect::<Vec<_>>();\n     |                  \
    \                              ^^^^^^ expected reference, found `char`\n     |\n\
    \     = note: expected reference `&_`\n                     found type `char`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<Chars<'_>>`, but its trait bounds were not satisfied\n  -->\
    \ /tmp/tmpb3pp029h.rs:8:57\n   |\n8  |       let mut substring_iter = substring.chars().cloned().collect::<Vec<_>>();\n\
    \   |                                                           ^^^^^^^ method\
    \ cannot be called on `Cloned<Chars<'_>>` due to unsatisfied trait bounds\n  \
    \ |\n   = note: the following trait bounds were not satisfied:\n           `<Chars<'_>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Chars<'_>>:\
    \ Iterator`\n           `Cloned<Chars<'_>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Chars<'_>>: Iterator`\n\nerror[E0658]: use of unstable library\
    \ feature 'option_result_contains'\n  --> /tmp/tmpb3pp029h.rs:10:74\n   |\n10\
    \ |         if let Some(found) = substring_iter.find(|&c| string_iter.next().contains(&c))\
    \ {\n   |                                                                    \
    \      ^^^^^^^^\n   |\n   = note: see issue #62358 <https://github.com/rust-lang/rust/issues/62358>\
    \ for more information\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb3pp029h.rs:11:13\n\
    \   |\n10 | /         if let Some(found) = substring_iter.find(|&c| string_iter.next().contains(&c))\
    \ {\n11 | |             string_iter.next()\n   | |             ^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found enum `Option`\n12 | |         } else {\n13 | |        \
    \     break;\n14 | |         }\n   | |_________- expected this to be `()`\n  \
    \ |\n   = note: expected unit type `()`\n                   found enum `Option<&String>`\n\
    help: consider using a semicolon here\n   |\n11 |             string_iter.next();\n\
    \   |                 "
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmph9c0fu8g.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmph9c0fu8g.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4jm7wiv6.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp4jm7wiv6.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut out = Vec::new();\n\
    \n    for s in strings {\n        if s.contains(substring) {\n            out.push(s);\n\
    \        }\n    }\n\n    out\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp54_5i6kk.rs:10:23\n     |\n10   |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n10   |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpm4eygs2n.rs:10:10\n     |\n\
    10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp368sr70h.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpp3nx7_v7.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|&s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmped5s460c.rs:9:33\n     |\n9    |         .filter(|&s| s.contains(substring))\n\
    \     |                        -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|&s| s.contains(&substring))\n     |         \
    \                        +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmped5s460c.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut iter = strings.iter();\n\
    \    let mut found = false;\n    while let Some(found_str) = iter.next() {\n \
    \       if found_str.contains(&substring) {\n            found = true;\n     \
    \       break;\n        }\n    }\n    if !found {\n        return vec![];\n  \
    \  }\n    iter\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsdtu11l1.rs:18:5\n   |\n\
    6  | fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n18 |     iter\n   |    \
    \ ^^^^ expected struct `Vec`, found struct `std::slice::Iter`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `std::slice::Iter<'_,\
    \ String>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4lryjor2.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmp4lryjor2.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter_map(|s| if s.contains(substring) {\n            Some(s)\n   \
    \     } else {\n            None\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpeumzy4c5.rs:9:39\n     |\n9    |         .filter_map(|s| if s.contains(substring)\
    \ {\n     |                              -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                              |\n     |      \
    \                        required by a bound introduced by this call\n     |\n\
    \     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::contains`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| if s.contains(&substring)\
    \ {\n     |                                       +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpeumzy4c5.rs:14:10\n     |\n14   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut filtered = Vec::new();\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.push(string);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpjxlw164w.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp8btc4l9_.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmp8btc4l9_.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut output = Vec::new();\n\
    \    for string in strings.iter() {\n        if string.contains(substring) {\n\
    \            output.push(string);\n        }\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpc00wow70.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpc00wow70.rs:13:5\n   |\n6  | fn filter_by_substring(strings: Vec<String>,\
    \ substring: String) -> Vec<String> {\n   |                                  \
    \                                  ----------- expected `Vec<String>` because\
    \ of return type\n...\n13 |     output\n   |     ^^^^^^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsitc35mm.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsitc35mm.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut res = Vec::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            res.push(s);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp195fpr_z.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    if strings.is_empty()\
    \ {\n        return strings;\n    }\n\n    let substrings = strings.split_first(|&s|\
    \ s.contains(substring));\n    if substrings.is_empty() {\n        return strings;\n\
    \    }\n\n    let mut strings_with_substrings = Vec::new();\n\n    for &s in strings\
    \ {\n        if s.contains(substring) {\n            strings_with_substrings.push((s));\n\
    \        }\n    }\n\n    strings_with_substrings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpyppq29am.rs:20:42\n\
    \   |\n20 |             strings_with_substrings.push((s));\n   |             \
    \                             ^ ^\n   |\n   = note: `#[warn(unused_parens)]` on\
    \ by default\nhelp: remove these parentheses\n   |\n20 -             strings_with_substrings.push((s));\n\
    20 +             strings_with_substrings.push(s);\n   | \n\nerror[E0282]: type\
    \ annotations needed for `&_`\n  --> /tmp/tmpyppq29am.rs:11:43\n   |\n11 |   \
    \  let substrings = strings.split_first(|&s| s.contains(substring));\n   |   \
    \                                        ^^ consider giving this closure parameter\
    \ the explicit type `&_`, with the type parameters specified\n   |\n   = note:\
    \ type must be known at this point\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n   --> /tmp/tmpyppq29am.rs:11:30\n    |\n11  |\
    \     let substrings = strings.split_first(|&s| s.contains(substring));\n    |\
    \                              ^^^^^^^^^^^ -------------------------- supplied\
    \ 1 argument\n    |                              |\n    |                    \
    \          expected 0 arguments\n    |\nnote: associated function defined here\n\
    \nerror[E0599]: no method named `is_empty` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpyppq29am.rs:12:19\n   |\n12 |     if substrings.is_empty()\
    \ {\n   |                   ^^^^^^^^ method not found in `Option<(&String, &[String])>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyppq29am.rs:18:9\n   |\n18 | \
    \    for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have\
    \ detailed explanations: E0061, E0282, E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut found = false;\n\
    \n    for (i, s) in strings.iter().enumerate() {\n        if substring == &s[..]\
    \ {\n            found = true;\n            break;\n        }\n    }\n\n    if\
    \ !found {\n        return strings;\n    }\n\n    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpx7_3ynv_.rs:22:32\n     |\n22   |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n22   |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n\
    \    for string in strings {\n        if string.find(substring).is_some() {\n\
    \            result.push(string);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpqjf04xgi.rs:9:24\n     |\n9    |         if string.find(substring).is_some()\
    \ {\n     |                   ---- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::find`\nhelp: consider borrowing here\n     |\n9    |         if string.find(&substring).is_some()\
    \ {\n     |                        +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut out = Vec::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            out.push(s);\n\
    \        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpfbzfp1n_.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Filter an input list of strings only for ones that contain given substring\n\
    /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n    let mut result: Vec<String>\
    \ = Vec::new();\n    strings.iter().for_each(|s| {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    });\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpk1qedpy2.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk1qedpy2.rs:10:25\n\
    \   |\n10 |             result.push(s);\n   |                         ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \ |\n   |                         expected struct `String`, found `&String`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
