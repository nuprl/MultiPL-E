name: HumanEval_136_largest_smallest_integers
language: swift
prompt: "\n/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a list.\n/// If there is no negative or positive integers, return them as None.\n\
  /// Examples:\n/// >>> largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7])\n/// (nil,\
  \ 1)\n/// >>> largest_smallest_integers(lst: [] as [Int])\n/// (nil, nil)\n/// >>>\
  \ largest_smallest_integers(lst: [0])\n/// (nil, nil)\nfunc largest_smallest_integers(lst:\
  \ [Int]) -> (Int?, Int?) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_smallest_integers(lst: [2, 4, 1,\
  \ 3, 5, 7]) == (nil, 1))\nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5,\
  \ 7, 0]) == (nil, 1))\nassert(largest_smallest_integers(lst: [1, 3, 2, 4, 5, 6,\
  \ -2]) == (-2, 1))\nassert(largest_smallest_integers(lst: [4, 5, 3, 6, 2, 7, -7])\
  \ == (-7, 2))\nassert(largest_smallest_integers(lst: [7, 3, 8, 4, 9, 2, 5, -9])\
  \ == (-9, 2))\nassert(largest_smallest_integers(lst: [] as [Int]) == (nil, nil))\n\
  assert(largest_smallest_integers(lst: [0]) == (nil, nil))\nassert(largest_smallest_integers(lst:\
  \ [-1, -3, -5, -6]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-1, -3,\
  \ -5, -6, 0]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-6, -4, -4,\
  \ -3, 1]) == (-3, 1))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, -100,\
  \ 1]) == (-3, 1))"
completions: ['    return (nil, nil)', "    var largest: Int? = nil\n    var smallest:\
    \ Int? = nil\n    for num in lst {\n        if num < 0 {\n            if largest\
    \ == nil {\n                largest = num\n            } else if num > largest!\
    \ {\n                largest = num\n            }\n        } else if num > 0 {\n\
    \            if smallest == nil {\n                smallest = num\n          \
    \  } else if num < smallest! {\n                smallest = num\n            }\n\
    \        }\n    }\n    return (largest, smallest)", "    var min = Int.max\n \
    \   var max = Int.min\n    for i in lst {\n        if i < 0 {\n            if\
    \ i > max {\n                max = i\n            }\n        } else {\n      \
    \      if i < min {\n                min = i\n            }\n        }\n    }\n\
    \    return (max == Int.min ? nil : max, min == Int.max ? nil : min)", '    return
    (nil, nil)', "    let negatives = lst.filter { $0 < 0 }\n    let positives = lst.filter\
    \ { $0 > 0 }\n    return (negatives.max(), positives.min())", '    return (nil,
    nil)', "    var largestNegative: Int? = nil\n    var smallestPositive: Int? =\
    \ nil\n    for num in lst {\n        if num < 0 {\n            if largestNegative\
    \ == nil {\n                largestNegative = num\n            } else if num >\
    \ largestNegative! {\n                largestNegative = num\n            }\n \
    \       } else if num > 0 {\n            if smallestPositive == nil {\n      \
    \          smallestPositive = num\n            } else if num < smallestPositive!\
    \ {\n                smallestPositive = num\n            }\n        }\n    }\n\
    \    return (largestNegative, smallestPositive)", '    return (nil, nil)', " \
    \   let negatives = lst.filter { $0 < 0 }\n    let positives = lst.filter { $0\
    \ > 0 }\n    let largestNegative = negatives.max()\n    let smallestPositive =\
    \ positives.min()\n    return (largestNegative, smallestPositive)", '    return
    (nil, nil)', "    let positives = lst.filter { $0 > 0 }\n    let negatives = lst.filter\
    \ { $0 < 0 }\n    return (negatives.max(), positives.min())", '    return (nil,
    nil)', '    return (nil, nil)', '    return (nil, nil)', "    var largestNegative:\
    \ Int? = nil\n    var smallestPositive: Int? = nil\n    for number in lst {\n\
    \        if number < 0 {\n            if largestNegative == nil {\n          \
    \      largestNegative = number\n            } else if number > largestNegative!\
    \ {\n                largestNegative = number\n            }\n        } else if\
    \ number > 0 {\n            if smallestPositive == nil {\n                smallestPositive\
    \ = number\n            } else if number < smallestPositive! {\n             \
    \   smallestPositive = number\n            }\n        }\n    }\n    return (largestNegative,\
    \ smallestPositive)", "    // TODO: Implement this function\n    return (nil,\
    \ nil)", '    return (nil, nil)', '    return (nil, nil)', "    var largestNegative:\
    \ Int? = nil\n    var smallestPositive: Int? = nil\n    for i in lst {\n     \
    \   if i < 0 {\n            if largestNegative == nil {\n                largestNegative\
    \ = i\n            } else if i > largestNegative! {\n                largestNegative\
    \ = i\n            }\n        } else if i > 0 {\n            if smallestPositive\
    \ == nil {\n                smallestPositive = i\n            } else if i < smallestPositive!\
    \ {\n                smallestPositive = i\n            }\n        }\n    }\n \
    \   return (largestNegative, smallestPositive)", "    var largestNegative: Int?\
    \ = nil\n    var smallestPositive: Int? = nil\n    for num in lst {\n        if\
    \ num < 0 {\n            if largestNegative == nil {\n                largestNegative\
    \ = num\n            } else if num > largestNegative! {\n                largestNegative\
    \ = num\n            }\n        } else if num > 0 {\n            if smallestPositive\
    \ == nil {\n                smallestPositive = num\n            } else if num\
    \ < smallestPositive! {\n                smallestPositive = num\n            }\n\
    \        }\n    }\n    return (largestNegative, smallestPositive)"]
stop_tokens:
- "\n}"
