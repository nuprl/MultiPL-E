name: HumanEval_98_count_upper
language: swift
prompt: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
  \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
  \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
  \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\")\
  \ == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
completions: ["    var count = 0\n    for (index, char) in s.enumerated() {\n    \
    \    if index % 2 == 0 && char.isUppercase {\n            count += 1\n       \
    \ }\n    }\n    return count", "    return s.enumerated().reduce(0) {\n      \
    \  $0 + ($1.offset % 2 == 0 && $1.element.isUppercase ? 1 : 0)\n    }", "    var\
    \ count = 0\n    for (index, char) in s.enumerated() {\n        if index % 2 ==\
    \ 0 && char.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", '    return 0', "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (index, char) in s.enumerated()\
    \ {\n        if index % 2 == 0 && char.isUppercase {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for (index, char)\
    \ in s.enumerated() {\n        if index % 2 == 0 && char.isUppercase {\n     \
    \       count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n\
    \            count += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase ? 1 : 0)\n   \
    \ }", "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2\
    \ == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for (index, char) in s.enumerated() {\n    \
    \    if index % 2 == 0 && char.isUppercase {\n            count += 1\n       \
    \ }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    return s.enumerated().reduce(0) { (result,\
    \ element) in\n        let (index, char) = element\n        return index % 2 ==\
    \ 0 && char.isUppercase ? result + 1 : result\n    }"]
stop_tokens:
- "\n}"
