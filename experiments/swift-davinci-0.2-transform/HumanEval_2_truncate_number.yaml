name: HumanEval_2_truncate_number
language: swift
prompt: "\n/// Given a positive floating point number, it can be decomposed into\n\
  /// and integer part (largest integer smaller than given number) and decimals\n\
  /// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  /// >>> truncate_number(number: 3.5)\n/// 0.5\nfunc truncate_number(number: Double)\
  \ -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(truncate_number(number: 3.5) == 0.5)\nassert(truncate_number(number:\
  \ 1.25) == 0.25)\nassert(truncate_number(number: 123.0) == 0.0)"
completions: ['    return number.truncatingRemainder(dividingBy: 1)', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - Double(Int(number))', '    return number.truncatingRemainder(dividingBy: 1)',
  '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - floor(number)',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - floor(number)',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - Double(Int(number))', '    return number.truncatingRemainder(dividingBy: 1)',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - floor(number)', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', "    let truncated = floor(number)\n    return number - truncated", '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number - floor(number)',
  "    let int_part = Int(number)\n    return number - Double(int_part)", '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - floor(number)',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - floor(number)',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - floor(number)',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - floor(number)', '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - floor(number)', '    return number.truncatingRemainder(dividingBy: 1)', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - floor(number)',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number - floor(number)',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - floor(number)', '    return number.truncatingRemainder(dividingBy: 1)', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - Double(Int(number))', '    return number.truncatingRemainder(dividingBy: 1)',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - floor(number)', '    return number.truncatingRemainder(dividingBy: 1)', '    return
    number - Double(Int(number))', '    return number - floor(number)', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)']
stop_tokens:
- "\n}"
