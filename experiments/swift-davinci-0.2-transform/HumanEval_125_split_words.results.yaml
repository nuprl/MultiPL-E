language: swift
name: HumanEval_125_split_words
results:
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp7yhs06hg/tmp7yhs06hg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcae1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcadea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcadea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcadea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yhs06hg                        0x0000561d005b568b <unavailable> + 9867

    5    libc.so.6                          0x00002afcae39c460 __libc_start_main +
    245

    6    tmp7yhs06hg                        0x0000561d005b4a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element.asciiValue! - 97 }.reduce(0, +))\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0m19u1na.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp7a1ol3f9/tmp7a1ol3f9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d00414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d0010bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d0010b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d0010a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7a1ol3f9                        0x0000558ffdcd265b <unavailable> + 9819

    5    libc.so.6                          0x00002b5d00600460 __libc_start_main +
    245

    6    tmp7a1ol3f9                        0x0000558ffdcd1a09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmptqobdsrr/tmptqobdsrr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb3f201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb3eef8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb3eef8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb3eef77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqobdsrr                        0x000055f07cd5084c <unavailable> + 6220

    5    libc.so.6                          0x00002acb3f3ed460 __libc_start_main +
    245

    6    tmptqobdsrr                        0x000055f07cd50389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ && (Int(char.asciiValue!) - 97) % 2 == 1 {\n                count += 1\n   \
    \         }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    return .failure(txt.filter { $0.isLowercase }.count % 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp5k81l8n2/tmp5k81l8n2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c1ed19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c1ea10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c1ea10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c1ea0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5k81l8n2                        0x000055969963c373 <unavailable> + 9075

    5    libc.so.6                          0x00002b7c1ef05460 __libc_start_main +
    245

    6    tmp5k81l8n2                        0x000055969963b859 <unavailable> + 6233

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6ggahwx6/tmp6ggahwx6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926635fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9266056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9266056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92660557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ggahwx6                        0x000055ae25b4363b <unavailable> + 9787

    5    libc.so.6                          0x00002b926654b460 __libc_start_main +
    245

    6    tmp6ggahwx6                        0x000055ae25b429e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element.asciiValue! - 97 }.reduce(0, +))\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0m19u1na.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map{String($0)})\n    } else {\n        var count = 0\n        for i\
    \ in 0..<txt.count {\n            if txt[txt.index(txt.startIndex, offsetBy: i)].isLowercase\
    \ && i % 2 == 0 {\n                count += 1\n            }\n        }\n    \
    \    return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpeada9qk6/tmpeada9qk6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f9c2a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f9bf99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f9bf99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f9bf987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeada9qk6                        0x000055952872167b <unavailable> + 9851

    5    libc.so.6                          0x00002b8f9c48e460 __libc_start_main +
    245

    6    tmpeada9qk6                        0x0000559528720a29 <unavailable> + 6697

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpa21n9csp/tmpa21n9csp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4d4c3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4d4935b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4d4935988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4d49347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa21n9csp                        0x000055d2275b084c <unavailable> + 6220

    5    libc.so.6                          0x00002ba4d4e2a460 __libc_start_main +
    245

    6    tmpa21n9csp                        0x000055d2275b0389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let index = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj_9xl0qb/tmpj_9xl0qb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ee73c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ee70bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ee70bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ee70be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_9xl0qb                        0x0000556d3a03cdec <unavailable> + 7660

    5    libc.so.6                          0x00002b8ee75b4460 __libc_start_main +
    245

    6    tmpj_9xl0qb                        0x0000556d3a03c929 <unavailable> + 6441

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        var count = 0\n        for (i,\
    \ c) in txt.enumerated() {\n            if i % 2 == 0 && c.isLowercase {\n   \
    \             count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpyh5w9duw/tmpyh5w9duw.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab397b30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab397827b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab397827988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3978267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh5w9duw                        0x000055b3cdbf563b <unavailable> + 9787

    5    libc.so.6                          0x00002ab397d1c460 __libc_start_main +
    245

    6    tmpyh5w9duw                        0x000055b3cdbf49e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().reduce(0)\
    \ { $1.offset % 2 == 0 ? $0 + $1.element.asciiValue! - 97 : $0 })\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpy4pmqlgg.swift:20:16: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().reduce(0) { $1.offset % 2 == 0 ? $0 + $1.element.asciiValue!\
    \ - 97 : $0 })\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821491
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpam043356/tmpam043356.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43b8470c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43b8167b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43b8167988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43b81667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam043356                        0x0000559e911fe5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b43b865c460 __libc_start_main +
    245

    6    tmpam043356                        0x0000559e911fd969 <unavailable> + 6505

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpoljcvn33/tmpoljcvn33.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef99a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef9976cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef9976c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef9976b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoljcvn33                        0x000055dcd89fd7c3 <unavailable> + 10179

    5    libc.so.6                          0x00002aef99c61460 __libc_start_main +
    245

    6    tmpoljcvn33                        0x000055dcd89fca39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for c in txt {\n            if c.isLowercase && (c.asciiValue!\
    \ - 97) % 2 == 1 {\n                count += 1\n            }\n        }\n   \
    \     return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821025
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ && (char.asciiValue! - 97) % 2 == 1 {\n                count += 1\n        \
    \    }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let index = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj_9xl0qb/tmpj_9xl0qb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ee73c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ee70bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ee70bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ee70be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_9xl0qb                        0x0000556d3a03cdec <unavailable> + 7660

    5    libc.so.6                          0x00002b8ee75b4460 __libc_start_main +
    245

    6    tmpj_9xl0qb                        0x0000556d3a03c929 <unavailable> + 6441

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for i in 0..<txt.count {\n            if txt[txt.index(txt.startIndex,\
    \ offsetBy: i)].isLowercase && i % 2 == 0 {\n                count += 1\n    \
    \        }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpymj_l12t/tmpymj_l12t.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96dc2ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96dbfe3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96dbfe3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96dbfe27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymj_l12t                        0x0000562a5511567b <unavailable> + 9851

    5    libc.so.6                          0x00002b96dc4d8460 __libc_start_main +
    245

    6    tmpymj_l12t                        0x0000562a55114a29 <unavailable> + 6697

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for c in txt {\n            if c.isLowercase && Int(c.asciiValue!)\
    \ % 2 == 1 {\n                count += 1\n            }\n        }\n        return\
    \ .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp_x8wjk8f/tmp_x8wjk8f.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4124a65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b412475cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b412475c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b412475b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_x8wjk8f                        0x0000563722f2e6bb <unavailable> + 9915

    5    libc.so.6                          0x00002b4124c51460 __libc_start_main +
    245

    6    tmp_x8wjk8f                        0x0000563722f2da69 <unavailable> + 6761

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3l77vjny/tmp3l77vjny.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab316ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab316bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab316bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab316bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3l77vjny                        0x000056066834d3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab3170c1460 __libc_start_main +
    245

    6    tmp3l77vjny                        0x000056066834c8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let split = txt.split(separator: \" \").map(String.init) as? [String]\
    \ {\n        return .success(split)\n    } else if let split = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(split)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp0fgr5698/tmp0fgr5698.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf3f3e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3f0e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3f0e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3f0df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fgr5698                        0x000055cbb6dcecbe <unavailable> + 7358

    5    libc.so.6                          0x00002abf3f5d5460 __libc_start_main +
    245

    6    tmp0fgr5698                        0x000055cbb6dce649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmptqobdsrr/tmptqobdsrr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb3f201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb3eef8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb3eef8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb3eef77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqobdsrr                        0x000055f07cd5084c <unavailable> + 6220

    5    libc.so.6                          0x00002acb3f3ed460 __libc_start_main +
    245

    6    tmptqobdsrr                        0x000055f07cd50389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    return .failure(txt.filter { $0.isLowercase }.count % 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp5k81l8n2/tmp5k81l8n2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c1ed19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c1ea10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c1ea10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c1ea0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5k81l8n2                        0x000055969963c373 <unavailable> + 9075

    5    libc.so.6                          0x00002b7c1ef05460 __libc_start_main +
    245

    6    tmp5k81l8n2                        0x000055969963b859 <unavailable> + 6233

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let index = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj_9xl0qb/tmpj_9xl0qb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ee73c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ee70bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ee70bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ee70be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_9xl0qb                        0x0000556d3a03cdec <unavailable> + 7660

    5    libc.so.6                          0x00002b8ee75b4460 __libc_start_main +
    245

    6    tmpj_9xl0qb                        0x0000556d3a03c929 <unavailable> + 6441

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (index, char) in txt.enumerated() {\n       \
    \     if index % 2 == 0 && char.isLowercase {\n                count += 1\n  \
    \          }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpujq29_0s/tmpujq29_0s.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3371a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab336e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab336e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab336e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpujq29_0s                        0x000055a3fd91f63b <unavailable> + 9787

    5    libc.so.6                          0x00002ab33738f460 __libc_start_main +
    245

    6    tmpujq29_0s                        0x000055a3fd91e9e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (index, char) in txt.enumerated() {\n       \
    \     if index % 2 == 0 && char.isLowercase {\n                count += 1\n  \
    \          }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpujq29_0s/tmpujq29_0s.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3371a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab336e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab336e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab336e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpujq29_0s                        0x000055a3fd91f63b <unavailable> + 9787

    5    libc.so.6                          0x00002ab33738f460 __libc_start_main +
    245

    6    tmpujq29_0s                        0x000055a3fd91e9e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexx0wz2q.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let index = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpewhcnilm/tmpewhcnilm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b1c8acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b1c5a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b1c5a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b1c5a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewhcnilm                        0x000056095104efac <unavailable> + 8108

    5    libc.so.6                          0x00002b7b1ca98460 __libc_start_main +
    245

    6    tmpewhcnilm                        0x000056095104eae9 <unavailable> + 6889

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ {\n                let index = char.asciiValue! - 97\n                if index\
    \ % 2 == 1 {\n                    count += 1\n                }\n            }\n\
    \        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    var count = 0\n    for c in txt {\n        if c.isLowercase {\n\
    \            let i = Int(c.asciiValue!) - Int(UnicodeScalar(\"a\").value)\n  \
    \          if i % 2 == 1 {\n                count += 1\n            }\n      \
    \  }\n    }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let index = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else {\n        var count = 0\n        for (index, char) in txt.enumerated()\
    \ {\n            if index % 2 == 0 && char.isLowercase {\n                count\
    \ += 1\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpuno26by_/tmpuno26by_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8bdf66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8bdc5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8bdc5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8bdc5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuno26by_                        0x000055db29998f5c <unavailable> + 8028

    5    libc.so.6                          0x00002ae8be152460 __libc_start_main +
    245

    6    tmpuno26by_                        0x000055db29998a99 <unavailable> + 6809

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6ggahwx6/tmp6ggahwx6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926635fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9266056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9266056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92660557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ggahwx6                        0x000055ae25b4363b <unavailable> + 9787

    5    libc.so.6                          0x00002b926654b460 __libc_start_main +
    245

    6    tmp6ggahwx6                        0x000055ae25b429e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.asciiValue! % 2 == 1 }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp_8jkxod6/tmp_8jkxod6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf2adf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf2aae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf2aae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf2aae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8jkxod6                        0x0000561a64a2056b <unavailable> + 9579

    5    libc.so.6                          0x00002aaf2afde460 __libc_start_main +
    245

    6    tmp_8jkxod6                        0x0000561a64a1f919 <unavailable> + 6425

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5wun5x4a/tmp5wun5x4a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf7b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf7883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf7883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf78827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wun5x4a                        0x00005598691f5343 <unavailable> + 9027

    5    libc.so.6                          0x00002b5cf7d78460 __libc_start_main +
    245

    6    tmp5wun5x4a                        0x00005598691f4829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp7yhs06hg/tmp7yhs06hg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcae1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcadea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcadea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcadea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yhs06hg                        0x0000561d005b568b <unavailable> + 9867

    5    libc.so.6                          0x00002afcae39c460 __libc_start_main +
    245

    6    tmp7yhs06hg                        0x0000561d005b4a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for c in txt {\n            if c.isLowercase && (c.asciiValue!\
    \ - 97) % 2 == 1 {\n                count += 1\n            }\n        }\n   \
    \     return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for i in txt.lowercased() {\n            if i.asciiValue!\
    \ % 2 == 1 {\n                count += 1\n            }\n        }\n        return\
    \ .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpzah2sd3f/tmpzah2sd3f.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad191728c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad19141fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad19141f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad19141e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzah2sd3f                        0x000055f79338353b <unavailable> + 9531

    5    libc.so.6                          0x00002ad191914460 __libc_start_main +
    245

    6    tmpzah2sd3f                        0x000055f7933828e9 <unavailable> + 6377

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpoljcvn33/tmpoljcvn33.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef99a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef9976cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef9976c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef9976b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoljcvn33                        0x000055dcd89fd7c3 <unavailable> + 10179

    5    libc.so.6                          0x00002aef99c61460 __libc_start_main +
    245

    6    tmpoljcvn33                        0x000055dcd89fca39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue! % 2\
    \ == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3d9iw3co/tmp3d9iw3co.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c8fd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c8cccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c8ccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c8ccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d9iw3co                        0x0000557ecf6ad50b <unavailable> + 9483

    5    libc.so.6                          0x00002b36c91c1460 __libc_start_main +
    245

    6    tmp3d9iw3co                        0x0000557ecf6ac8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6ggahwx6/tmp6ggahwx6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926635fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9266056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9266056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92660557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ggahwx6                        0x000055ae25b4363b <unavailable> + 9787

    5    libc.so.6                          0x00002b926654b460 __libc_start_main +
    245

    6    tmp6ggahwx6                        0x000055ae25b429e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpam043356/tmpam043356.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43b8470c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43b8167b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43b8167988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43b81667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam043356                        0x0000559e911fe5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b43b865c460 __libc_start_main +
    245

    6    tmpam043356                        0x0000559e911fd969 <unavailable> + 6505

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmptqobdsrr/tmptqobdsrr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb3f201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb3eef8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb3eef8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb3eef77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqobdsrr                        0x000055f07cd5084c <unavailable> + 6220

    5    libc.so.6                          0x00002acb3f3ed460 __libc_start_main +
    245

    6    tmptqobdsrr                        0x000055f07cd50389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpam043356/tmpam043356.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43b8470c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43b8167b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43b8167988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43b81667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam043356                        0x0000559e911fe5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b43b865c460 __libc_start_main +
    245

    6    tmpam043356                        0x0000559e911fd969 <unavailable> + 6505

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmptqobdsrr/tmptqobdsrr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb3f201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb3eef8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb3eef8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb3eef77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqobdsrr                        0x000055f07cd5084c <unavailable> + 6220

    5    libc.so.6                          0x00002acb3f3ed460 __libc_start_main +
    245

    6    tmptqobdsrr                        0x000055f07cd50389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6ggahwx6/tmp6ggahwx6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926635fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9266056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9266056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92660557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ggahwx6                        0x000055ae25b4363b <unavailable> + 9787

    5    libc.so.6                          0x00002b926654b460 __libc_start_main +
    245

    6    tmp6ggahwx6                        0x000055ae25b429e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmptqobdsrr/tmptqobdsrr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb3f201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb3eef8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb3eef8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb3eef77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqobdsrr                        0x000055f07cd5084c <unavailable> + 6220

    5    libc.so.6                          0x00002acb3f3ed460 __libc_start_main +
    245

    6    tmptqobdsrr                        0x000055f07cd50389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpam043356/tmpam043356.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43b8470c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43b8167b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43b8167988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43b81667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam043356                        0x0000559e911fe5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b43b865c460 __libc_start_main +
    245

    6    tmpam043356                        0x0000559e911fd969 <unavailable> + 6505

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3l77vjny/tmp3l77vjny.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab316ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab316bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab316bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab316bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3l77vjny                        0x000056066834d3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab3170c1460 __libc_start_main +
    245

    6    tmp3l77vjny                        0x000056066834c8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpa21n9csp/tmpa21n9csp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4d4c3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4d4935b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4d4935988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4d49347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa21n9csp                        0x000055d2275b084c <unavailable> + 6220

    5    libc.so.6                          0x00002ba4d4e2a460 __libc_start_main +
    245

    6    tmpa21n9csp                        0x000055d2275b0389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map{String($0)})\n    } else {\n        var count = 0\n        for char\
    \ in txt {\n            if char.isLowercase {\n                if (Int(char.asciiValue!)\
    \ - 97) % 2 == 1 {\n                    count += 1\n                }\n      \
    \      }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6ggahwx6/tmp6ggahwx6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926635fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9266056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9266056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92660557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ggahwx6                        0x000055ae25b4363b <unavailable> + 9787

    5    libc.so.6                          0x00002b926654b460 __libc_start_main +
    245

    6    tmp6ggahwx6                        0x000055ae25b429e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        var count = 0\n        for (i,\
    \ c) in txt.enumerated() {\n            if i % 2 == 0 && c.isLowercase {\n   \
    \             count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpyh5w9duw/tmpyh5w9duw.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab397b30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab397827b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab397827988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3978267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh5w9duw                        0x000055b3cdbf563b <unavailable> + 9787

    5    libc.so.6                          0x00002ab397d1c460 __libc_start_main +
    245

    6    tmpyh5w9duw                        0x000055b3cdbf49e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    let letters = txt.filter { $0.isLetter }\n    let oddLetters\
    \ = letters.filter { $0.lowercased().unicodeScalars.first!.value % 2 == 1 }\n\
    \    return .failure(oddLetters.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpgfubu199/tmpgfubu199.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0d1c10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0d1907b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0d1907988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0d19067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfubu199                        0x0000561ee1a376cb <unavailable> + 9931

    5    libc.so.6                          0x00002ae0d1dfc460 __libc_start_main +
    245

    6    tmpgfubu199                        0x0000561ee1a36a79 <unavailable> + 6777

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3l77vjny/tmp3l77vjny.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab316ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab316bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab316bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab316bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3l77vjny                        0x000056066834d3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab3170c1460 __libc_start_main +
    245

    6    tmp3l77vjny                        0x000056066834c8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ && (txt.firstIndex(of: char)!.encodedOffset % 2 == 1) {\n                count\
    \ += 1\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpbysgakk5/tmpbysgakk5.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13dbf0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13dbc03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13dbc03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13dbc027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbysgakk5                        0x000055568aeac6e3 <unavailable> + 9955

    5    libc.so.6                          0x00002b13dc0f8460 __libc_start_main +
    245

    6    tmpbysgakk5                        0x000055568aeab959 <unavailable> + 6489

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let index = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else {\n        var count = 0\n        for i in 0..<txt.count {\n     \
    \       if txt[txt.index(txt.startIndex, offsetBy: i)].isLowercase && i % 2 ==\
    \ 0 {\n                count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpvzrueywo/tmpvzrueywo.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2221752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2221449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2221449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22214487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvzrueywo                        0x00005613dab73f5c <unavailable> + 8028

    5    libc.so.6                          0x00002b222193e460 __libc_start_main +
    245

    6    tmpvzrueywo                        0x00005613dab73a99 <unavailable> + 6809

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp7yhs06hg/tmp7yhs06hg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcae1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcadea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcadea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcadea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yhs06hg                        0x0000561d005b568b <unavailable> + 9867

    5    libc.so.6                          0x00002afcae39c460 __libc_start_main +
    245

    6    tmp7yhs06hg                        0x0000561d005b4a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    } else {\n        let words\
    \ = txt.split(separator: \",\")\n        if words.count > 1 {\n            return\
    \ .success(words.map { String($0) })\n        } else {\n            let count\
    \ = txt.lowercased().filter { $0.isLetter }.filter { $0.asciiValue! % 2 == 1 }.count\n\
    \            return .failure(count)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp1480ud1r/tmp1480ud1r.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b691a42bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b691a122b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b691a122988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b691a1217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1480ud1r                        0x0000563edc82055b <unavailable> + 9563

    5    libc.so.6                          0x00002b691a617460 __libc_start_main +
    245

    6    tmp1480ud1r                        0x0000563edc81f909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let words = txt.split(separator: \" \").map(String.init) as? [String]\
    \ {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        var count = 0\n        for char in txt {\n            if let\
    \ ascii = char.asciiValue, ascii >= 97, ascii <= 122, ascii % 2 == 1 {\n     \
    \           count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpc93f7qdw/tmpc93f7qdw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7330b92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7330889b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7330889988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73308887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc93f7qdw                        0x0000559ea1bedcbe <unavailable> + 7358

    5    libc.so.6                          0x00002b7330d7e460 __libc_start_main +
    245

    6    tmpc93f7qdw                        0x0000559ea1bed649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3l77vjny/tmp3l77vjny.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab316ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab316bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab316bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab316bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3l77vjny                        0x000056066834d3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab3170c1460 __libc_start_main +
    245

    6    tmp3l77vjny                        0x000056066834c8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter{\
    \ $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpw6rgowbo/tmpw6rgowbo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6adb78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6adb485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6adb485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6adb4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6rgowbo                        0x000055f19543d3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002b6adb97a460 __libc_start_main +
    245

    6    tmpw6rgowbo                        0x000055f19543c8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3l77vjny/tmp3l77vjny.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab316ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab316bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab316bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab316bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3l77vjny                        0x000056066834d3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab3170c1460 __libc_start_main +
    245

    6    tmp3l77vjny                        0x000056066834c8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpoljcvn33/tmpoljcvn33.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef99a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef9976cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef9976c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef9976b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoljcvn33                        0x000055dcd89fd7c3 <unavailable> + 10179

    5    libc.so.6                          0x00002aef99c61460 __libc_start_main +
    245

    6    tmpoljcvn33                        0x000055dcd89fca39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    var count = 0\n    for (i, c) in txt.lowercased().enumerated()\
    \ {\n        if i % 2 == 0 && c >= \"a\" && c <= \"z\" {\n            count +=\
    \ 1\n        }\n    }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpohjn4zxy/tmpohjn4zxy.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7412f85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7412c7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7412c7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7412c7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohjn4zxy                        0x00005559a07e172b <unavailable> + 10027

    5    libc.so.6                          0x00002b7413171460 __libc_start_main +
    245

    6    tmpohjn4zxy                        0x00005559a07e0ad9 <unavailable> + 6873

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map{String($0)})\n    } else {\n        return .failure(txt.filter{$0.isLowercase}.count\
    \ % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpernrwc7s/tmpernrwc7s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af16fd20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af16fa17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af16fa17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af16fa167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpernrwc7s                        0x000056397d8153e3 <unavailable> + 9187

    5    libc.so.6                          0x00002af16ff0c460 __libc_start_main +
    245

    6    tmpernrwc7s                        0x000056397d8148c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5wun5x4a/tmp5wun5x4a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf7b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf7883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf7883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf78827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wun5x4a                        0x00005598691f5343 <unavailable> + 9027

    5    libc.so.6                          0x00002b5cf7d78460 __libc_start_main +
    245

    6    tmp5wun5x4a                        0x00005598691f4829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpcup9ky6x.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for char in txt {\n            let ascii = char.asciiValue!\n\
    \            if ascii >= 97 && ascii <= 122 {\n                if ascii % 2 ==\
    \ 1 {\n                    count += 1\n                }\n            }\n    \
    \    }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpx6xyvnhn/tmpx6xyvnhn.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39d193ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39d1631b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39d1631988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39d16307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6xyvnhn                        0x000056285f4c34db <unavailable> + 9435

    5    libc.so.6                          0x00002b39d1b26460 __libc_start_main +
    245

    6    tmpx6xyvnhn                        0x000056285f4c2889 <unavailable> + 6281

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for i in 0..<txt.count {\n            if txt[txt.index(txt.startIndex,\
    \ offsetBy: i)].lowercased() == \"a\" {\n                count += 1\n        \
    \    }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj0t97_v2/tmpj0t97_v2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc684acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc681a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc681a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc681a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0t97_v2                        0x0000563447ab75a3 <unavailable> + 9635

    5    libc.so.6                          0x00002acc68698460 __libc_start_main +
    245

    6    tmpj0t97_v2                        0x0000563447ab6a89 <unavailable> + 6793

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue! % 2\
    \ == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3d9iw3co/tmp3d9iw3co.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c8fd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c8cccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c8ccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c8ccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d9iw3co                        0x0000557ecf6ad50b <unavailable> + 9483

    5    libc.so.6                          0x00002b36c91c1460 __libc_start_main +
    245

    6    tmp3d9iw3co                        0x0000557ecf6ac8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    var count = 0\n    for c in txt {\n        if let i = c.asciiValue,\
    \ i >= 97, i <= 122, i % 2 == 1 {\n            count += 1\n        }\n    }\n\
    \    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpahnomwd7/tmpahnomwd7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfc2eadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfc2ba4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfc2ba4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfc2ba37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahnomwd7                        0x000055e3b55d33eb <unavailable> + 9195

    5    libc.so.6                          0x00002abfc3099460 __libc_start_main +
    245

    6    tmpahnomwd7                        0x000055e3b55d2799 <unavailable> + 6041

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5wun5x4a/tmp5wun5x4a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf7b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf7883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf7883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf78827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wun5x4a                        0x00005598691f5343 <unavailable> + 9027

    5    libc.so.6                          0x00002b5cf7d78460 __libc_start_main +
    245

    6    tmp5wun5x4a                        0x00005598691f4829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (index, char) in txt.enumerated() {\n       \
    \     if index % 2 == 0 && char.isLowercase {\n                count += 1\n  \
    \          }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpujq29_0s/tmpujq29_0s.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3371a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab336e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab336e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab336e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpujq29_0s                        0x000055a3fd91f63b <unavailable> + 9787

    5    libc.so.6                          0x00002ab33738f460 __libc_start_main +
    245

    6    tmpujq29_0s                        0x000055a3fd91e9e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp7yhs06hg/tmp7yhs06hg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcae1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcadea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcadea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcadea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yhs06hg                        0x0000561d005b568b <unavailable> + 9867

    5    libc.so.6                          0x00002afcae39c460 __libc_start_main +
    245

    6    tmp7yhs06hg                        0x0000561d005b4a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let words = txt.split(separator: \" \").map(String.init) as? [String]\
    \ {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count % 2)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmphx9r_rw_/tmphx9r_rw_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b521980ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5219505b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5219505988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52195047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphx9r_rw_                        0x000055cc36289cbe <unavailable> + 7358

    5    libc.so.6                          0x00002b52199fa460 __libc_start_main +
    245

    6    tmphx9r_rw_                        0x000055cc36289649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5wun5x4a/tmp5wun5x4a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf7b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf7883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf7883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf78827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wun5x4a                        0x00005598691f5343 <unavailable> + 9027

    5    libc.so.6                          0x00002b5cf7d78460 __libc_start_main +
    245

    6    tmp5wun5x4a                        0x00005598691f4829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        var count = 0\n        for (i,\
    \ c) in txt.lowercased().enumerated() {\n            if i % 2 == 0 && c.asciiValue!\
    \ >= 97 && c.asciiValue! <= 122 {\n                count += 1\n            }\n\
    \        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp8gred0jm/tmp8gred0jm.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f6c97ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f6c671b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f6c671988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f6c6707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gred0jm                        0x000055f052eba68b <unavailable> + 9867

    5    libc.so.6                          0x00002b4f6cb66460 __libc_start_main +
    245

    6    tmp8gred0jm                        0x000055f052eb9a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for c in txt {\n            if c.isLowercase {\n\
    \                let i = Int(c.asciiValue!) - Int(Unicode.Scalar(\"a\").value)\n\
    \                if i % 2 == 1 {\n                    count += 1\n           \
    \     }\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        var count = 0\n        for (i,\
    \ c) in txt.enumerated() {\n            if i % 2 == 0 && c.isLowercase {\n   \
    \             count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpyh5w9duw/tmpyh5w9duw.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab397b30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab397827b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab397827988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3978267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh5w9duw                        0x000055b3cdbf563b <unavailable> + 9787

    5    libc.so.6                          0x00002ab397d1c460 __libc_start_main +
    245

    6    tmpyh5w9duw                        0x000055b3cdbf49e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5wun5x4a/tmp5wun5x4a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf7b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf7883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf7883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf78827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wun5x4a                        0x00005598691f5343 <unavailable> + 9027

    5    libc.so.6                          0x00002b5cf7d78460 __libc_start_main +
    245

    6    tmp5wun5x4a                        0x00005598691f4829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp7yhs06hg/tmp7yhs06hg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcae1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcadea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcadea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcadea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yhs06hg                        0x0000561d005b568b <unavailable> + 9867

    5    libc.so.6                          0x00002afcae39c460 __libc_start_main +
    245

    6    tmp7yhs06hg                        0x0000561d005b4a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3l77vjny/tmp3l77vjny.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab316ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab316bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab316bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab316bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3l77vjny                        0x000056066834d3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab3170c1460 __libc_start_main +
    245

    6    tmp3l77vjny                        0x000056066834c8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue! % 2\
    \ == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3d9iw3co/tmp3d9iw3co.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c8fd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c8cccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c8ccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c8ccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d9iw3co                        0x0000557ecf6ad50b <unavailable> + 9483

    5    libc.so.6                          0x00002b36c91c1460 __libc_start_main +
    245

    6    tmp3d9iw3co                        0x0000557ecf6ac8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element.asciiValue! - 97 }.reduce(0, +))\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0m19u1na.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue! % 2\
    \ == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3d9iw3co/tmp3d9iw3co.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c8fd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c8cccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c8ccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c8ccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d9iw3co                        0x0000557ecf6ad50b <unavailable> + 9483

    5    libc.so.6                          0x00002b36c91c1460 __libc_start_main +
    245

    6    tmp3d9iw3co                        0x0000557ecf6ac8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let index = txt.firstIndex(of: \" \") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj_9xl0qb/tmpj_9xl0qb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ee73c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ee70bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ee70bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ee70be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_9xl0qb                        0x0000556d3a03cdec <unavailable> + 7660

    5    libc.so.6                          0x00002b8ee75b4460 __libc_start_main +
    245

    6    tmpj_9xl0qb                        0x0000556d3a03c929 <unavailable> + 6441

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map{String($0)})\n    } else {\n        var count = 0\n        for i\
    \ in txt.lowercased() {\n            if i.asciiValue! % 2 == 1 {\n           \
    \     count += 1\n            }\n        }\n        return .failure(count)\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpr_nnq9w5/tmpr_nnq9w5.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb2ff2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2fc23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2fc23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb2fc227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_nnq9w5                        0x000055e92e2a453b <unavailable> + 9531

    5    libc.so.6                          0x00002aeb30118460 __libc_start_main +
    245

    6    tmpr_nnq9w5                        0x000055e92e2a38e9 <unavailable> + 6377

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue! % 2\
    \ == 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpn6edgq4r.swift:20:55: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.filter { $0.isLowercase }.count { $0.asciiValue!\
    \ % 2 == 1 })\n                                                      ^\n"
  stdout: ''
  timestamp: 1659821027
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5wun5x4a/tmp5wun5x4a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf7b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf7883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf7883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf78827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wun5x4a                        0x00005598691f5343 <unavailable> + 9027

    5    libc.so.6                          0x00002b5cf7d78460 __libc_start_main +
    245

    6    tmp5wun5x4a                        0x00005598691f4829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if let words = txt.split(separator: \" \").map(String.init) as? [String]\
    \ {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        var count = 0\n        for char in txt {\n            if let\
    \ ascii = char.asciiValue, ascii >= 97, ascii <= 122, ascii % 2 == 1 {\n     \
    \           count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpc93f7qdw/tmpc93f7qdw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7330b92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7330889b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7330889988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73308887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc93f7qdw                        0x0000559ea1bedcbe <unavailable> + 7358

    5    libc.so.6                          0x00002b7330d7e460 __libc_start_main +
    245

    6    tmpc93f7qdw                        0x0000559ea1bed649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map{String($0)})\n    } else {\n        var count = 0\n        for char\
    \ in txt {\n            if let index = alphabet.firstIndex(of: char) {\n     \
    \           if index % 2 == 1 {\n                    count += 1\n            \
    \    }\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpi05z5tsz.swift:22:28: error: cannot find 'alphabet' in scope\n\
    \            if let index = alphabet.firstIndex(of: char) {\n                \
    \           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        var count = 0\n        for c\
    \ in txt {\n            if c.isLowercase && c.asciiValue! % 2 == 1 {\n       \
    \         count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp0p5_8biv/tmp0p5_8biv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5539083c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5538d7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5538d7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5538d797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0p5_8biv                        0x00005631ba71d53b <unavailable> + 9531

    5    libc.so.6                          0x00002b553926f460 __libc_start_main +
    245

    6    tmp0p5_8biv                        0x00005631ba71c8e9 <unavailable> + 6377

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for c in txt {\n            let i = Int(c.asciiValue!)\
    \ - Int(Unicode.Scalar(\"a\").value)\n            if i % 2 == 1 {\n          \
    \      count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5wun5x4a/tmp5wun5x4a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf7b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf7883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf7883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf78827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wun5x4a                        0x00005598691f5343 <unavailable> + 9027

    5    libc.so.6                          0x00002b5cf7d78460 __libc_start_main +
    245

    6    tmp5wun5x4a                        0x00005598691f4829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6ggahwx6/tmp6ggahwx6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926635fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9266056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9266056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92660557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ggahwx6                        0x000055ae25b4363b <unavailable> + 9787

    5    libc.so.6                          0x00002b926654b460 __libc_start_main +
    245

    6    tmp6ggahwx6                        0x000055ae25b429e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue! % 2\
    \ == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3d9iw3co/tmp3d9iw3co.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c8fd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c8cccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c8ccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c8ccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d9iw3co                        0x0000557ecf6ad50b <unavailable> + 9483

    5    libc.so.6                          0x00002b36c91c1460 __libc_start_main +
    245

    6    tmp3d9iw3co                        0x0000557ecf6ac8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6ggahwx6/tmp6ggahwx6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926635fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9266056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9266056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92660557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ggahwx6                        0x000055ae25b4363b <unavailable> + 9787

    5    libc.so.6                          0x00002b926654b460 __libc_start_main +
    245

    6    tmp6ggahwx6                        0x000055ae25b429e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ c.lowercased() == String(UnicodeScalar(i)!) {\n                count += 1\n\
    \            }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp5roz2_fo/tmp5roz2_fo.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f6577ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f65471b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f65471988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f654707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5roz2_fo                        0x000055f08c5bb613 <unavailable> + 9747

    5    libc.so.6                          0x00002b9f65966460 __libc_start_main +
    245

    6    tmp5roz2_fo                        0x000055f08c5baaf9 <unavailable> + 6905

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (i, c) in txt.enumerated() {\n            if\
    \ i % 2 == 0 && c.isLowercase {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6ggahwx6/tmp6ggahwx6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926635fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9266056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9266056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92660557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ggahwx6                        0x000055ae25b4363b <unavailable> + 9787

    5    libc.so.6                          0x00002b926654b460 __libc_start_main +
    245

    6    tmp6ggahwx6                        0x000055ae25b429e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5wun5x4a/tmp5wun5x4a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf7b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf7883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf7883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf78827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wun5x4a                        0x00005598691f5343 <unavailable> + 9027

    5    libc.so.6                          0x00002b5cf7d78460 __libc_start_main +
    245

    6    tmp5wun5x4a                        0x00005598691f4829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpoljcvn33/tmpoljcvn33.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef99a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef9976cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef9976c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef9976b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoljcvn33                        0x000055dcd89fd7c3 <unavailable> + 10179

    5    libc.so.6                          0x00002aef99c61460 __libc_start_main +
    245

    6    tmpoljcvn33                        0x000055dcd89fca39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ && (char.asciiValue! - 97) % 2 == 1 {\n                count += 1\n        \
    \    }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map{String($0)})\n    } else {\n        return .failure(txt.filter{$0.isLowercase}.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmps95lv65m/tmps95lv65m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bf7c9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bf7991b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bf7991988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bf79907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps95lv65m                        0x000055d965106343 <unavailable> + 9027

    5    libc.so.6                          0x00002b6bf7e86460 __libc_start_main +
    245

    6    tmps95lv65m                        0x000055d965105829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        var count = 0\n        for char\
    \ in txt {\n            if char.lowercased() == char && char.asciiValue! % 2 ==\
    \ 1 {\n                count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpj4u5arh2.swift:22:34: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n            if char.lowercased()\
    \ == char && char.asciiValue! % 2 == 1 {\n               ~~~~~~~~~~~~~~~~~ ^ \
    \ ~~~~\n/tmp/tmpj4u5arh2.swift:22:34: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Character, Character), (String, String)\n\
    \            if char.lowercased() == char && char.asciiValue! % 2 == 1 {\n   \
    \                              ^\n"
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp87fhv0tl/tmp87fhv0tl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f919dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f916d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f916d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f916d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87fhv0tl                        0x0000557c84a2684c <unavailable> + 6220

    5    libc.so.6                          0x00002b7f91bc7460 __libc_start_main +
    245

    6    tmp87fhv0tl                        0x0000557c84a26389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element.asciiValue! - 97 }.reduce(0, +))\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0m19u1na.swift:20:137: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element.asciiValue!\
    \ - 97 }.reduce(0, +))\n                                                     \
    \                                                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~\n\
    \                                                                            \
    \                                     Int(                       )\n"
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpoljcvn33/tmpoljcvn33.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef99a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef9976cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef9976c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef9976b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoljcvn33                        0x000055dcd89fd7c3 <unavailable> + 10179

    5    libc.so.6                          0x00002aef99c61460 __libc_start_main +
    245

    6    tmpoljcvn33                        0x000055dcd89fca39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { $0.isLetter }.enumerated().filter\
    \ { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfiw27joh/tmpfiw27joh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4da60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4da304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4da304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4da3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiw27joh                        0x0000564fd1a2868b <unavailable> + 9867

    5    libc.so.6                          0x00002ae4da7f9460 __libc_start_main +
    245

    6    tmpfiw27joh                        0x0000564fd1a27a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3l77vjny/tmp3l77vjny.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab316ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab316bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab316bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab316bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3l77vjny                        0x000056066834d3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab3170c1460 __libc_start_main +
    245

    6    tmp3l77vjny                        0x000056066834c8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ && (Int(char.asciiValue!) - 97) % 2 == 1 {\n                count += 1\n   \
    \         }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        var count = 0\n        for char\
    \ in txt {\n            if char.lowercased() == \"a\" {\n                count\
    \ += 1\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpk0a7euw_/tmpk0a7euw_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fdb41bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fdb112b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fdb112988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fdb1117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk0a7euw_                        0x00005583891d0363 <unavailable> + 9059

    5    libc.so.6                          0x00002b5fdb607460 __libc_start_main +
    245

    6    tmpk0a7euw_                        0x00005583891cf849 <unavailable> + 6217

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3l77vjny/tmp3l77vjny.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab316ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab316bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab316bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab316bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3l77vjny                        0x000056066834d3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002ab3170c1460 __libc_start_main +
    245

    6    tmp3l77vjny                        0x000056066834c8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.split(separator: \" \")\n    if words.count > 1 {\n     \
    \   return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue! % 2\
    \ == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3d9iw3co/tmp3d9iw3co.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c8fd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c8cccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c8ccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c8ccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d9iw3co                        0x0000557ecf6ad50b <unavailable> + 9483

    5    libc.so.6                          0x00002b36c91c1460 __libc_start_main +
    245

    6    tmp3d9iw3co                        0x0000557ecf6ac8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map(String.init))\n    } else if txt.contains(\",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5wun5x4a/tmp5wun5x4a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf7b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf7883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cf7883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cf78827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wun5x4a                        0x00005598691f5343 <unavailable> + 9027

    5    libc.so.6                          0x00002b5cf7d78460 __libc_start_main +
    245

    6    tmp5wun5x4a                        0x00005598691f4829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821026
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpaypmg465/tmpaypmg465.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaypmg465                        0x0000555e33d5f3e3 <unavailable> + 9187

    5    libc.so.6                          0x00002acf91351460 __libc_start_main +
    245

    6    tmpaypmg465                        0x0000555e33d5e8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1659821025
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    if txt.contains(\" \") {\n        return .success(txt.split(separator: \"\
    \ \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj6conbnx/tmpj6conbnx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a3c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57a3972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57a3972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57a39717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6conbnx                        0x0000563c5618c343 <unavailable> + 9027

    5    libc.so.6                          0x00002b57a3e67460 __libc_start_main +
    245

    6    tmpj6conbnx                        0x0000563c5618b829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1659821025
