name: HumanEval_19_sort_numbers
language: swift
prompt: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to\
  \ largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\
  \nfunc sort_numbers(numbers: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
  \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") ==\
  \ \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine\
  \ eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
  \ \"six five four three two one zero\") == \"zero one two three four five six\")"
completions: ["    let nums = numbers.components(separatedBy: \" \")\n    let sorted\
    \ = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number: a) <\
    \ number_to_int(number: b)\n    }\n    return sorted.joined(separator: \" \")",
  "    let nums = numbers.components(separatedBy: \" \")\n    let sorted = nums.sorted\
    \ { (a, b) -> Bool in\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n    }\n    return sorted.joined(separator: \" \")", "    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let numeral_map = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\"\
    : 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9]\n    let numeral_array = numbers.split(separator: \" \")\n    let numeral_int_array\
    \ = numeral_array.map { numeral_map[String($0)]! }\n    let numeral_int_array_sorted\
    \ = numeral_int_array.sorted()\n    let numeral_array_sorted = numeral_int_array_sorted.map\
    \ { String($0) }\n    return numeral_array_sorted.joined(separator: \" \")", " \
    \   let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted {\
    \ (a, b) -> Bool in\n        return Int(a)! < Int(b)!\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.split(separator: \" \")\n    let nums_int =\
    \ nums.map { Int(number_to_numeral(number: String($0))!) }\n    let sorted_nums\
    \ = nums_int.sorted()\n    let sorted_nums_str = sorted_nums.map { numeral_to_number(numeral:\
    \ String($0)) }\n    return sorted_nums_str.joined(separator: \" \")", "    let\
    \ words = numbers.split(separator: \" \")\n    let sorted = words.sorted { (a,\
    \ b) -> Bool in\n        return number_to_int(number: String(a)) < number_to_int(number:\
    \ String(b))\n    }\n    return sorted.joined(separator: \" \")", "    let numbers\
    \ = numbers.split(separator: \" \")\n    let sortedNumbers = numbers.sorted(by:\
    \ {\n        let num1 = Int(number_to_digit(number: String($0)))\n        let\
    \ num2 = Int(number_to_digit(number: String($1)))\n        return num1! < num2!\n\
    \    })\n    return sortedNumbers.joined(separator: \" \")", "    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")", "    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ numeral_to_int(numeral: String(lhs)) < numeral_to_int(numeral: String(rhs))\n\
    \    }\n    return sorted.joined(separator: \" \")", "    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = numbers.sorted {\n        switch $0 {\n        case\
    \ \"zero\":\n            return true\n        case \"one\":\n            return\
    \ $1 != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\"\n        case \"three\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1\
    \ != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")", "    let nums\
    \ = numbers.components(separatedBy: \" \")\n    let sorted = nums.sorted { (a,\
    \ b) -> Bool in\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n    }\n    return sorted.joined(separator: \" \")", "    let numberals =\
    \ numbers.split(separator: \" \")\n    let sortedNumberals = numberals.sorted\
    \ { (lhs, rhs) -> Bool in\n        return lhs < rhs\n    }\n    return sortedNumberals.joined(separator:\
    \ \" \")", "    let nums = numbers.components(separatedBy: \" \")\n    let sortedNums\
    \ = nums.sorted(by: { (a, b) -> Bool in\n        let numA = Int(a) ?? 0\n    \
    \    let numB = Int(b) ?? 0\n        return numA < numB\n    })\n    return sortedNums.joined(separator:\
    \ \" \")", "    let numberals = [\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    let input = numbers.split(separator:\
    \ \" \")\n    let sorted = input.sorted { numberals.firstIndex(of: String($0))!\
    \ < numberals.firstIndex(of: String($1))! }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ {\n        switch $0 {\n        case \"zero\":\n            return true\n  \
    \      case \"one\":\n            return $1 != \"zero\"\n        case \"two\"\
    :\n            return $1 != \"zero\" && $1 != \"one\"\n        case \"three\"\
    :\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\n     \
    \   case \"four\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 !=\
    \ \"two\" && $1 != \"three\"\n        case \"five\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \n        case \"six\":\n            return $1 != \"zero\" && $1 != \"one\" &&\
    \ $1 != \"two\" && $1 != \"three\" && $1 != \"four\" && $1 != \"five\"\n     \
    \   case \"seven\":\n            return $1 != \"zero\" && $1 != \"one\" && $1\
    \ != \"two\" && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"\
    six\"\n        case \"eight\":\n            return $1 != \"zero\" && $1 != \"\
    one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\" && $1 != \"five\"\
    \ && $1 != \"six\" && $1 != \"seven\"\n        case \"nine\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\" && $1 != \"eight\"\
    \n        default:\n            return false\n        }\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ { (lhs, rhs) -> Bool in\n        let lhsNum = Int(lhs)!\n        let rhsNum\
    \ = Int(rhs)!\n        return lhsNum < rhsNum\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ {\n        let num1 = Int(String($0)) ?? 0\n        let num2 = Int(String($1))\
    \ ?? 0\n        return num1 < num2\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.components(separatedBy: \" \")\n    let sortedNums\
    \ = nums.sorted { (s1, s2) -> Bool in\n        return s1 < s2\n    }\n    return\
    \ sortedNums.joined(separator: \" \")", "    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")"]
stop_tokens:
- "\n}"
