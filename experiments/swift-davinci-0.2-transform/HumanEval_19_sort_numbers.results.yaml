language: swift
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeral_map\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numeral_array\
    \ = numbers.split(separator: \" \")\n    let numeral_int_array = numeral_array.map\
    \ { numeral_map[String($0)]! }\n    let numeral_int_array_sorted = numeral_int_array.sorted()\n\
    \    let numeral_array_sorted = numeral_int_array_sorted.map { String($0) }\n\
    \    return numeral_array_sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpsuiyzib1/tmpsuiyzib1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5140a42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5140739b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5140739988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51407387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsuiyzib1                        0x0000563a367cdb85 <unavailable> + 7045

    5    libc.so.6                          0x00002b5140c2e460 __libc_start_main +
    245

    6    tmpsuiyzib1                        0x0000563a367cd6d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let nums_int = nums.map { Int(number_to_numeral(number: String($0))!)\
    \ }\n    let sorted_nums = nums_int.sorted()\n    let sorted_nums_str = sorted_nums.map\
    \ { numeral_to_number(numeral: String($0)) }\n    return sorted_nums_str.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppwi2kem5.swift:9:35: error: cannot find 'number_to_numeral' in\
    \ scope\n    let nums_int = nums.map { Int(number_to_numeral(number: String($0))!)\
    \ }\n                                  ^~~~~~~~~~~~~~~~~\n/tmp/tmppwi2kem5.swift:11:45:\
    \ error: cannot find 'numeral_to_number' in scope\n    let sorted_nums_str = sorted_nums.map\
    \ { numeral_to_number(numeral: String($0)) }\n                               \
    \             ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let words = numbers.split(separator:\
    \ \" \")\n    let sorted = words.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpys73657x.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpys73657x.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted(by: {\n        let num1 = Int(number_to_digit(number:\
    \ String($0)))\n        let num2 = Int(number_to_digit(number: String($1)))\n\
    \        return num1! < num2!\n    })\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjm7wbsyp.swift:10:24: error: cannot find 'number_to_digit' in scope\n\
    \        let num1 = Int(number_to_digit(number: String($0)))\n               \
    \        ^~~~~~~~~~~~~~~\n/tmp/tmpjm7wbsyp.swift:11:24: error: cannot find 'number_to_digit'\
    \ in scope\n        let num2 = Int(number_to_digit(number: String($1)))\n    \
    \                   ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ numeral_to_int(numeral: String(lhs)) < numeral_to_int(numeral: String(rhs))\n\
    \    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps5lv1fd2.swift:10:16: error: cannot find 'numeral_to_int' in scope\n\
    \        return numeral_to_int(numeral: String(lhs)) < numeral_to_int(numeral:\
    \ String(rhs))\n               ^~~~~~~~~~~~~~\n/tmp/tmps5lv1fd2.swift:10:55: error:\
    \ cannot find 'numeral_to_int' in scope\n        return numeral_to_int(numeral:\
    \ String(lhs)) < numeral_to_int(numeral: String(rhs))\n                      \
    \                                ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = numbers.sorted {\n        switch $0 {\n        case\
    \ \"zero\":\n            return true\n        case \"one\":\n            return\
    \ $1 != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\"\n        case \"three\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1\
    \ != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplyk0d24f.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.split(separator: \" \")\n    let sortedNumberals = numberals.sorted\
    \ { (lhs, rhs) -> Bool in\n        return lhs < rhs\n    }\n    return sortedNumberals.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpp8mghs_f/tmpp8mghs_f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed36e0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed36b06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed36b06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed36b057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8mghs_f                        0x0000560e73f198b2 <unavailable> + 6322

    5    libc.so.6                          0x00002aed36ffb460 __libc_start_main +
    245

    6    tmpp8mghs_f                        0x0000560e73f192e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNums = nums.sorted(by: { (a, b) -> Bool in\n        let\
    \ numA = Int(a) ?? 0\n        let numB = Int(b) ?? 0\n        return numA < numB\n\
    \    })\n    return sortedNums.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl9w_109c.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let input = numbers.split(separator: \" \")\n    let\
    \ sorted = input.sorted { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of:\
    \ String($1))! }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch $0 {\n        case \"\
    zero\":\n            return true\n        case \"one\":\n            return $1\
    \ != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" && $1\
    \ != \"one\"\n        case \"three\":\n            return $1 != \"zero\" && $1\
    \ != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        let lhsNum\
    \ = Int(lhs)!\n        let rhsNum = Int(rhs)!\n        return lhsNum < rhsNum\n\
    \    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpdo7thkiq/tmpdo7thkiq.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9820d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9820a70561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9820a70286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9820a7013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9820a6fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdo7thkiq                        0x000055f9b6dae05f <unavailable> + 8287

    6    libswiftCore.so                    0x00002b9820b91c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b9820b92110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b9820b90d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b9820b90d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b9820cb665a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b9820aa5720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b9820aa570f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b9820b90460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b9820b90370 Sequence.sorted(by:)
    + 193

    15   tmpdo7thkiq                        0x000055f9b6dadd6e <unavailable> + 7534

    16   tmpdo7thkiq                        0x000055f9b6dad8c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b9820f65460 __libc_start_main +
    245

    18   tmpdo7thkiq                        0x000055f9b6dad3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        let num1 = Int(String($0)) ??\
    \ 0\n        let num2 = Int(String($1)) ?? 0\n        return num1 < num2\n   \
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmposn362yl/tmposn362yl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab89bb90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab89b887b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab89b887988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab89b8867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmposn362yl                        0x000055cf34022a6f <unavailable> + 6767

    5    libc.so.6                          0x00002ab89bd7c460 __libc_start_main +
    245

    6    tmposn362yl                        0x000055cf34022389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNums = nums.sorted { (s1, s2) -> Bool in\n        return\
    \ s1 < s2\n    }\n    return sortedNums.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpghuqf_9o.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdgto7xyt.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    let sortedNumbers = numbersArray.sorted\
    \ { (first, second) -> Bool in\n        return first < second\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpi_pxl88f.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted(by: { (a, b) -> Bool in\n        return\
    \ number_to_int(number: a) < number_to_int(number: b)\n    })\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw22tjy26.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpw22tjy26.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpw22tjy26.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted {\n        return number_to_int(number:\
    \ String($0)) < number_to_int(number: String($1))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpug20m23b.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String($0)) < number_to_int(number: String($1))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpug20m23b.swift:10:52: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String($0)) <\
    \ number_to_int(number: String($1))\n                                        \
    \           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return Int(a)! < Int(b)!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpx36me12f.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9je61adz/tmp9je61adz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35289f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35286eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35286ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35286ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9je61adz                        0x000055fb868548b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b3528be3460 __libc_start_main +
    245

    6    tmp9je61adz                        0x000055fb868542e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let numsInt = nums.map { numeralToInt(numeral: $0) }\n    let sortedNums\
    \ = numsInt.sorted()\n    let sortedNumsStr = sortedNums.map { intToNumeral(int:\
    \ $0) }\n    return sortedNumsStr.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0y3kw_tt.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp0y3kw_tt.swift:9:30: error: cannot find\
    \ 'numeralToInt' in scope\n    let numsInt = nums.map { numeralToInt(numeral:\
    \ $0) }\n                             ^~~~~~~~~~~~\n/tmp/tmp0y3kw_tt.swift:11:42:\
    \ error: cannot find 'intToNumeral' in scope\n    let sortedNumsStr = sortedNums.map\
    \ { intToNumeral(int: $0) }\n                                         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let nums_sorted = nums.sorted {\n        switch $0 {\n        case\
    \ \"zero\":\n            return true\n        case \"one\":\n            if $1\
    \ == \"zero\" {\n                return false\n            }\n            return\
    \ true\n        case \"two\":\n            if $1 == \"zero\" || $1 == \"one\"\
    \ {\n                return false\n            }\n            return true\n  \
    \      case \"three\":\n            if $1 == \"zero\" || $1 == \"one\" || $1 ==\
    \ \"two\" {\n                return false\n            }\n            return true\n\
    \        case \"four\":\n            if $1 == \"zero\" || $1 == \"one\" || $1\
    \ == \"two\" || $1 == \"three\" {\n                return false\n            }\n\
    \            return true\n        case \"five\":\n            if $1 == \"zero\"\
    \ || $1 == \"one\" || $1 == \"two\" || $1 == \"three\" || $1 == \"four\" {\n \
    \               return false\n            }\n            return true\n       \
    \ case \"six\":\n            if $1 == \"zero\" || $1 == \"one\" || $1 == \"two\"\
    \ || $1 == \"three\" || $1 == \"four\" || $1 == \"five\" {\n                return\
    \ false\n            }\n            return true\n        case \"seven\":\n   \
    \         if $1 == \"zero\" || $1 == \"one\" || $1 == \"two\" || $1 == \"three\"\
    \ || $1 == \"four\" || $1 == \"five\" || $1 == \"six\" {\n                return\
    \ false\n            }\n            return true\n        case \"eight\":\n   \
    \         if $1 == \"zero\" || $1 == \"one\" || $1 == \"two\" || $1 == \"three\"\
    \ || $1 == \"four\" || $1 == \"five\" || $1 == \"six\" || $1 == \"seven\" {\n\
    \                return false\n            }\n            return true\n      \
    \  case \"nine\":\n            if $1 == \"zero\" || $1 == \"one\" || $1 == \"\
    two\" || $1 == \"three\" || $1 == \"four\" || $1 == \"five\" || $1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpd8w7bnho.swift:54:113: error: expected '{' after 'if' condition\n\
    \            if $1 == \"zero\" || $1 == \"one\" || $1 == \"two\" || $1 == \"three\"\
    \ || $1 == \"four\" || $1 == \"five\" || $1\n                                \
    \                                                                            \
    \    ^\n/tmp/tmpd8w7bnho.swift:74:104: error: expected '}' at end of closure\n\
    assert(sort_numbers(numbers: \"six five four three two one zero\") == \"zero one\
    \ two three four five six\")\n                                               \
    \                                                        ^\n/tmp/tmpd8w7bnho.swift:9:35:\
    \ note: to match this opening '{'\n    let nums_sorted = nums.sorted {\n     \
    \                             ^\n/tmp/tmpd8w7bnho.swift:74:104: error: expected\
    \ '}' at end of brace statement\nassert(sort_numbers(numbers: \"six five four\
    \ three two one zero\") == \"zero one two three four five six\")\n           \
    \                                                                            \
    \                ^\n/tmp/tmpd8w7bnho.swift:7:46: note: to match this opening '{'\n\
    func sort_numbers(numbers: String) -> String {\n                             \
    \                ^\n/tmp/tmpd8w7bnho.swift:54:111: error: cannot convert value\
    \ of type 'String.SubSequence' (aka 'Substring') to expected argument type 'Bool'\n\
    \            if $1 == \"zero\" || $1 == \"one\" || $1 == \"two\" || $1 == \"three\"\
    \ || $1 == \"four\" || $1 == \"five\" || $1\n                                \
    \                                                                            \
    \  ^\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.split(separator: \" \")\n    let sorted = numberals.sorted { (a, b)\
    \ -> Bool in\n        return a < b\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp8k6e__d8/tmp8k6e__d8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b148804cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1487d43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1487d43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1487d427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8k6e__d8                        0x000055b06759b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b1488238460 __libc_start_main +
    245

    6    tmp8k6e__d8                        0x000055b06759b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ String(a)) < numeral_to_int(numeral: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn3cxro_7.swift:10:16: error: cannot find 'numeral_to_int' in scope\n\
    \        return numeral_to_int(numeral: String(a)) < numeral_to_int(numeral: String(b))\n\
    \               ^~~~~~~~~~~~~~\n/tmp/tmpn3cxro_7.swift:10:53: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: String(a))\
    \ < numeral_to_int(numeral: String(b))\n                                     \
    \               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_hc9gjie/tmp_hc9gjie.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e95bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e92b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e92b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e92b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hc9gjie                        0x0000560ce17cf8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab0e97aa460 __libc_start_main +
    245

    6    tmp_hc9gjie                        0x0000560ce17cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch $0 {\n        case \"\
    zero\":\n            return true\n        case \"one\":\n            return $1\
    \ != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" && $1\
    \ != \"one\"\n        case \"three\":\n            return $1 != \"zero\" && $1\
    \ != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let number_array =\
    \ numbers.split(separator: \" \")\n    let sorted_array = number_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[String(a)]! < number_map[String(b)]!\n\
    \    }\n    return sorted_array.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.split(separator: \" \")\n    let sorted = numberals.sorted { (lhs, rhs)\
    \ -> Bool in\n        return numberal_to_int(numberal: String(lhs)) < numberal_to_int(numberal:\
    \ String(rhs))\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmps9erz09o.swift:10:16: error: cannot find 'numberal_to_int' in scope\n\
    \        return numberal_to_int(numberal: String(lhs)) < numberal_to_int(numberal:\
    \ String(rhs))\n               ^~~~~~~~~~~~~~~\n/tmp/tmps9erz09o.swift:10:57:\
    \ error: cannot find 'numberal_to_int' in scope\n        return numberal_to_int(numberal:\
    \ String(lhs)) < numberal_to_int(numberal: String(rhs))\n                    \
    \                                    ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.split(separator: \" \")\n    let sortedNumberals = numberals.sorted\
    \ { (lhs, rhs) -> Bool in\n        let lhsNumber = numberal(numberal: String(lhs))\n\
    \        let rhsNumber = numberal(numberal: String(rhs))\n        return lhsNumber\
    \ < rhsNumber\n    }\n    return sortedNumberals.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpup_qm5v2.swift:10:25: error: cannot find 'numberal' in scope\n\
    \        let lhsNumber = numberal(numberal: String(lhs))\n                   \
    \     ^~~~~~~~\n/tmp/tmpup_qm5v2.swift:11:25: error: cannot find 'numberal' in\
    \ scope\n        let rhsNumber = numberal(numberal: String(rhs))\n           \
    \             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.components(separatedBy: \" \")\n    let sorted = numberals.sorted {\
    \ (a, b) -> Bool in\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvt0yo0yf.swift:8:29: error: value of type 'String' has no member\
    \ 'components'\n    let numberals = numbers.components(separatedBy: \" \")\n \
    \                   ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpvt0yo0yf.swift:10:16: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpvt0yo0yf.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let numsInt = nums.map { number_to_int(number: $0) }\n    let sorted\
    \ = numsInt.sorted()\n    let sortedNums = sorted.map { int_to_number(int: $0)\
    \ }\n    return sortedNums.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp__mgfdak.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp__mgfdak.swift:9:30: error: cannot find\
    \ 'number_to_int' in scope\n    let numsInt = nums.map { number_to_int(number:\
    \ $0) }\n                             ^~~~~~~~~~~~~\n/tmp/tmp__mgfdak.swift:11:35:\
    \ error: cannot find 'int_to_number' in scope\n    let sortedNums = sorted.map\
    \ { int_to_number(int: $0) }\n                                  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return number_to_int(number: a) < number_to_int(number: b)\n    }\n    return\
    \ sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpxt_pm919.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxt_pm919.swift:10:16: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpxt_pm919.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (lhs, rhs) -> Bool in\n   \
    \     return Int(lhs)! < Int(rhs)!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpnveobtux/tmpnveobtux.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aae6540fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae65106561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aae65106286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aae6510613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aae65105bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnveobtux                        0x000055ce1ceb503c <unavailable> + 8252

    6    libswiftCore.so                    0x00002aae65227c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002aae65228110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002aae65226d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002aae65226d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002aae6534c65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002aae6513b720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002aae6513b70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002aae65226460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002aae65226370 Sequence.sorted(by:)
    + 193

    15   tmpnveobtux                        0x000055ce1ceb4d6e <unavailable> + 7534

    16   tmpnveobtux                        0x000055ce1ceb48c1 <unavailable> + 6337

    17   libc.so.6                          0x00002aae655fb460 __libc_start_main +
    245

    18   tmpnveobtux                        0x000055ce1ceb43e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        let a = Int(String($0))!\n\
    \        let b = Int(String($1))!\n        return a < b\n    })\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpc4ahxh59/tmpc4ahxh59.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af90aa87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af90a77e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af90a77e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af90a77e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af90a77dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpc4ahxh59                        0x00005631ba303036 <unavailable> + 8246

    6    libswiftCore.so                    0x00002af90a89fc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002af90a8a0110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002af90a89ed30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002af90a89ed15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002af90a9c465a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002af90a7b3720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002af90a7b370f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002af90a89e460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002af90a89e370 Sequence.sorted(by:)
    + 193

    15   tmpc4ahxh59                        0x00005631ba302dae <unavailable> + 7598

    16   tmpc4ahxh59                        0x00005631ba302901 <unavailable> + 6401

    17   libc.so.6                          0x00002af90ac73460 __libc_start_main +
    245

    18   tmpc4ahxh59                        0x00005631ba302429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013250
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (num1, num2) -> Bool in\n        return\
    \ num1 < num2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7l2y_1kk.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch $0 {\n        case \"\
    zero\":\n            return true\n        case \"one\":\n            return $1\
    \ != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" && $1\
    \ != \"one\"\n        case \"three\":\n            return $1 != \"zero\" && $1\
    \ != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numsSorted = nums.sorted {\n        switch $0 {\n        case\
    \ \"zero\":\n            return true\n        case \"one\":\n            return\
    \ $1 != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\"\n        case \"three\":\n            return $1 != \"zero\" &&\
    \ $1 != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1\
    \ != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return numsSorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppmc7p13e.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").map {\
    \ String($0) }.sorted { numberals.firstIndex(of: $0)! < numberals.firstIndex(of:\
    \ $1)! }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let nums_sorted = nums.sorted { (a, b) -> Bool in\n        return\
    \ Int(a)! < Int(b)!\n    }\n    return nums_sorted.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpw5amscrz/tmpw5amscrz.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c717d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c714cf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9c714cf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9c714cf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9c714cebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpw5amscrz                        0x000055853a0b303c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b9c715f0c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b9c715f1110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b9c715efd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b9c715efd15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b9c7171565a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b9c71504720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b9c7150470f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b9c715ef460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b9c715ef370 Sequence.sorted(by:)
    + 193

    15   tmpw5amscrz                        0x000055853a0b2d6e <unavailable> + 7534

    16   tmpw5amscrz                        0x000055853a0b28c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b9c719c4460 __libc_start_main +
    245

    18   tmpw5amscrz                        0x000055853a0b23e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: { Int($0)! < Int($1)! })\n    return\
    \ sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp68dfh5tc/tmp68dfh5tc.swift:9: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afaed50bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afaed202561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afaed202286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afaed20213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afaed201bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp68dfh5tc                        0x000055ab0916003c <unavailable> + 8252

    6    libswiftCore.so                    0x00002afaed323c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002afaed324110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002afaed322d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002afaed322d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002afaed44865a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002afaed237720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002afaed23770f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002afaed322460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002afaed322370 Sequence.sorted(by:)
    + 193

    15   tmp68dfh5tc                        0x000055ab0915fd6e <unavailable> + 7534

    16   tmp68dfh5tc                        0x000055ab0915f8c1 <unavailable> + 6337

    17   libc.so.6                          0x00002afaed6f7460 __libc_start_main +
    245

    18   tmp68dfh5tc                        0x000055ab0915f3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { (a, b) -> Bool in\n        return numberals.firstIndex(of: String(a))! < numberals.firstIndex(of:\
    \ String(b))!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ String(a)) < numeral_to_int(numeral: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn3cxro_7.swift:10:16: error: cannot find 'numeral_to_int' in scope\n\
    \        return numeral_to_int(numeral: String(a)) < numeral_to_int(numeral: String(b))\n\
    \               ^~~~~~~~~~~~~~\n/tmp/tmpn3cxro_7.swift:10:53: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: String(a))\
    \ < numeral_to_int(numeral: String(b))\n                                     \
    \               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_zofnyg4.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let numsInt = nums.map { numberToInt(number: $0) }\n    let sortedNums\
    \ = numsInt.sorted()\n    let sortedNumsStr = sortedNums.map { intToNumber(int:\
    \ $0) }\n    return sortedNumsStr.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp047n7jb_.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp047n7jb_.swift:9:30: error: cannot find\
    \ 'numberToInt' in scope\n    let numsInt = nums.map { numberToInt(number: $0)\
    \ }\n                             ^~~~~~~~~~~\n/tmp/tmp047n7jb_.swift:11:42: error:\
    \ cannot find 'intToNumber' in scope\n    let sortedNumsStr = sortedNums.map {\
    \ intToNumber(int: $0) }\n                                         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let number_array =\
    \ numbers.split(separator: \" \")\n    let sorted_numbers = number_array.sorted\
    \ {\n        number_map[String($0)]! < number_map[String($1)]!\n    }\n    return\
    \ sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numsInt = nums.map { Int(numeral_to_int(numeral: String($0))!)\
    \ }\n    let sortedNums = numsInt.sorted()\n    let sortedNumsStr = sortedNums.map\
    \ { int_to_numeral(number: $0) }\n    return sortedNumsStr.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpsznd0003.swift:9:34: error: cannot find 'numeral_to_int' in scope\n\
    \    let numsInt = nums.map { Int(numeral_to_int(numeral: String($0))!) }\n  \
    \                               ^~~~~~~~~~~~~~\n/tmp/tmpsznd0003.swift:11:42:\
    \ error: cannot find 'int_to_numeral' in scope\n    let sortedNumsStr = sortedNums.map\
    \ { int_to_numeral(number: $0) }\n                                         ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        return Int($0)! < Int($1)!\n\
    \    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpwtbm44mv/tmpwtbm44mv.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aad28e8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad28b85561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aad28b85286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aad28b8513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aad28b84bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwtbm44mv                        0x000055e71247103c <unavailable> + 8252

    6    libswiftCore.so                    0x00002aad28ca6c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002aad28ca7110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002aad28ca5d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002aad28ca5d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002aad28dcb65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002aad28bba720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002aad28bba70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002aad28ca5460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002aad28ca5370 Sequence.sorted(by:)
    + 193

    15   tmpwtbm44mv                        0x000055e712470d6e <unavailable> + 7534

    16   tmpwtbm44mv                        0x000055e7124708c1 <unavailable> + 6337

    17   libc.so.6                          0x00002aad2907a460 __libc_start_main +
    245

    18   tmpwtbm44mv                        0x000055e7124703e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted(by: {\n        let a = Int(String($0))!\n\
    \        let b = Int(String($1))!\n        return a < b\n    })\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpxbxn7dpp/tmpxbxn7dpp.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002abdd77d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdd74c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abdd74c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abdd74c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abdd74c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxbxn7dpp                        0x00005649765d9036 <unavailable> + 8246

    6    libswiftCore.so                    0x00002abdd75eac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002abdd75eb110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002abdd75e9d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002abdd75e9d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002abdd770f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002abdd74fe720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002abdd74fe70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002abdd75e9460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002abdd75e9370 Sequence.sorted(by:)
    + 193

    15   tmpxbxn7dpp                        0x00005649765d8dae <unavailable> + 7598

    16   tmpxbxn7dpp                        0x00005649765d8901 <unavailable> + 6401

    17   libc.so.6                          0x00002abdd79be460 __libc_start_main +
    245

    18   tmpxbxn7dpp                        0x00005649765d8429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted_numbers = numbers.sorted { (a, b) -> Bool in\n      \
    \  return number_map[String(a)]! < number_map[String(b)]!\n    }\n    return sorted_numbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let numbers = numbers.split(separator: \" \")\n  \
    \  let sortedNumbers = numbers.sorted { (lhs, rhs) -> Bool in\n        let lhsIndex\
    \ = numberals.firstIndex(of: String(lhs))!\n        let rhsIndex = numberals.firstIndex(of:\
    \ String(rhs))!\n        return lhsIndex < rhsIndex\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"\
    three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n\
    \        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n  \
    \  let number_list = numbers.split(separator: \" \").map { String($0) }\n    let\
    \ sorted_numbers = number_list.sorted { number_map[$0]! < number_map[$1]! }\n\
    \    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        let num1 = Int(String($0))!\n\
    \        let num2 = Int(String($1))!\n        return num1 < num2\n    }\n    return\
    \ sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpw7tm4q0d/tmpw7tm4q0d.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b448846ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4488165561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4488165286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b448816513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4488164bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpw7tm4q0d                        0x0000556987f48036 <unavailable> + 8246

    6    libswiftCore.so                    0x00002b4488286c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b4488287110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b4488285d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b4488285d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b44883ab65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b448819a720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b448819a70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b4488285460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b4488285370 Sequence.sorted(by:)
    + 193

    15   tmpw7tm4q0d                        0x0000556987f47dae <unavailable> + 7598

    16   tmpw7tm4q0d                        0x0000556987f47901 <unavailable> + 6401

    17   libc.so.6                          0x00002b448865a460 __libc_start_main +
    245

    18   tmpw7tm4q0d                        0x0000556987f47429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numbers_to_int(number:\
    \ a) < numbers_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5dr6cuug.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5dr6cuug.swift:10:16: error: cannot find\
    \ 'numbers_to_int' in scope\n        return numbers_to_int(number: a) < numbers_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmp5dr6cuug.swift:10:44: error: cannot\
    \ find 'numbers_to_int' in scope\n        return numbers_to_int(number: a) < numbers_to_int(number:\
    \ b)\n                                           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numsInt = nums.map { Int(number_to_int(number: String($0))!)\
    \ }\n    let sorted = numsInt.sorted()\n    let sortedStr = sorted.map { int_to_number(int:\
    \ String($0)) }\n    return sortedStr.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprf1kdesw.swift:9:34: error: cannot find 'number_to_int' in scope\n\
    \    let numsInt = nums.map { Int(number_to_int(number: String($0))!) }\n    \
    \                             ^~~~~~~~~~~~~\n/tmp/tmprf1kdesw.swift:11:34: error:\
    \ cannot find 'int_to_number' in scope\n    let sortedStr = sorted.map { int_to_number(int:\
    \ String($0)) }\n                                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9je61adz/tmp9je61adz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35289f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35286eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35286ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35286ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9je61adz                        0x000055fb868548b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b3528be3460 __libc_start_main +
    245

    6    tmp9je61adz                        0x000055fb868542e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0ithea0v.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { (a, b) -> Bool in\n        return numberals.firstIndex(of: String(a))! < numberals.firstIndex(of:\
    \ String(b))!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let sorted_numbers\
    \ = numbers.split(separator: \" \").map { String($0) }.map { number_map[$0]! }.sorted()\n\
    \    return sorted_numbers.map { String($0) }.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpju6oip9y/tmpju6oip9y.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af040d07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0409feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0409fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0409fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpju6oip9y                        0x000055f223a21b85 <unavailable> + 7045

    5    libc.so.6                          0x00002af040ef3460 __libc_start_main +
    245

    6    tmpju6oip9y                        0x000055f223a216d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let numsInt = nums.map { (num) -> Int in\n        switch num {\n\
    \        case \"zero\":\n            return 0\n        case \"one\":\n       \
    \     return 1\n        case \"two\":\n            return 2\n        case \"three\"\
    :\n            return 3\n        case \"four\":\n            return 4\n      \
    \  case \"five\":\n            return 5\n        case \"six\":\n            return\
    \ 6\n        case \"seven\":\n            return 7\n        case \"eight\":\n\
    \            return 8\n        case \"nine\":\n            return 9\n        default:\n\
    \            return 0\n        }\n    }\n    let sortedNums = numsInt.sorted()\n\
    \    let sortedNumsStr = sortedNums.map { (num) -> String in\n        switch num\
    \ {\n        case 0:\n            return \"zero\"\n        case 1:\n         \
    \   return \"one\"\n        case 2:\n            return \"two\"\n        case\
    \ 3:\n            return \"three\"\n        case 4:\n            return \"four\"\
    \n        case 5:\n            return \"five\"\n        case 6:\n            return\
    \ \"six\"\n        case 7:\n            return \"seven\"\n        case 8:\n  \
    \          return \"eight\"\n        case 9:\n            return \"nine\"\n  \
    \      default:\n            return \"zero\"\n        }\n    }\n    return sortedNumsStr.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpaec6tg0j.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return numberToInt(number: a) < numberToInt(number: b)\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptxirb7p3.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmptxirb7p3.swift:10:16: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: a) < numberToInt(number:\
    \ b)\n               ^~~~~~~~~~~\n/tmp/tmptxirb7p3.swift:10:41: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: a) < numberToInt(number:\
    \ b)\n                                        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let words = numbers.split(separator:\
    \ \" \")\n    let sorted = words.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpys73657x.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpys73657x.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeral_map\
    \ = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n      \
    \  \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\"\
    : 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n\
    \    let nums = numbers.split(separator: \" \").map { String($0) }\n    let sorted_nums\
    \ = nums.sorted { numeral_map[$0]! < numeral_map[$1]! }\n    return sorted_nums.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbersArray\
    \ = numbers.components(separatedBy: \" \")\n    let sortedNumbers = numbersArray.sorted\
    \ { (first, second) -> Bool in\n        return number_to_int(number: first) <\
    \ number_to_int(number: second)\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_1ygfkd2.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_1ygfkd2.swift:10:16: error:\
    \ cannot find 'number_to_int' in scope\n        return number_to_int(number: first)\
    \ < number_to_int(number: second)\n               ^~~~~~~~~~~~~\n/tmp/tmp_1ygfkd2.swift:10:47:\
    \ error: cannot find 'number_to_int' in scope\n        return number_to_int(number:\
    \ first) < number_to_int(number: second)\n                                   \
    \           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let numsInt = nums.map { number_to_int(number: $0) }\n    let sorted\
    \ = numsInt.sorted()\n    let sortedNums = sorted.map { int_to_number(number:\
    \ $0) }\n    return sortedNums.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyhwo1cv0.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpyhwo1cv0.swift:9:30: error: cannot find\
    \ 'number_to_int' in scope\n    let numsInt = nums.map { number_to_int(number:\
    \ $0) }\n                             ^~~~~~~~~~~~~\n/tmp/tmpyhwo1cv0.swift:11:35:\
    \ error: cannot find 'int_to_number' in scope\n    let sortedNums = sorted.map\
    \ { int_to_number(number: $0) }\n                                  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdgto7xyt.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let number_array =\
    \ numbers.split(separator: \" \")\n    let sorted_numbers = number_array.sorted\
    \ { number_map[String($0)]! < number_map[String($1)]! }\n    return sorted_numbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdgto7xyt.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (first, second) -> Bool in\n\
    \        return numberToInt(number: first) < numberToInt(number: second)\n   \
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdg1sf4ei.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpdg1sf4ei.swift:10:16: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: first) < numberToInt(number:\
    \ second)\n               ^~~~~~~~~~~\n/tmp/tmpdg1sf4ei.swift:10:45: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: first) < numberToInt(number:\
    \ second)\n                                            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return numberToInt(number: a) < numberToInt(number: b)\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptxirb7p3.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmptxirb7p3.swift:10:16: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: a) < numberToInt(number:\
    \ b)\n               ^~~~~~~~~~~\n/tmp/tmptxirb7p3.swift:10:41: error: cannot\
    \ find 'numberToInt' in scope\n        return numberToInt(number: a) < numberToInt(number:\
    \ b)\n                                        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0ithea0v.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_hc9gjie/tmp_hc9gjie.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e95bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e92b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e92b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e92b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hc9gjie                        0x0000560ce17cf8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab0e97aa460 __libc_start_main +
    245

    6    tmp_hc9gjie                        0x0000560ce17cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return Int(a)! < Int(b)!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpcwne_mrh/tmpcwne_mrh.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b713bb03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b713b7fa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b713b7fa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b713b7fa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b713b7f9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpcwne_mrh                        0x000055c06934b03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b713b91bc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b713b91c110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b713b91ad30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b713b91ad15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b713ba4065a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b713b82f720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b713b82f70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b713b91a460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b713b91a370 Sequence.sorted(by:)
    + 193

    15   tmpcwne_mrh                        0x000055c06934ad6e <unavailable> + 7534

    16   tmpcwne_mrh                        0x000055c06934a8c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b713bcef460 __libc_start_main +
    245

    18   tmpcwne_mrh                        0x000055c06934a3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numsInt = nums.map { Int(number_to_int(number: String($0))!)\
    \ }\n    let sorted = numsInt.sorted()\n    let sortedStr = sorted.map { int_to_number(number:\
    \ String($0)) }\n    return sortedStr.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplyzv5kbt.swift:9:34: error: cannot find 'number_to_int' in scope\n\
    \    let numsInt = nums.map { Int(number_to_int(number: String($0))!) }\n    \
    \                             ^~~~~~~~~~~~~\n/tmp/tmplyzv5kbt.swift:11:34: error:\
    \ cannot find 'int_to_number' in scope\n    let sortedStr = sorted.map { int_to_number(number:\
    \ String($0)) }\n                                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted {\n        switch ($0, $1) {\n\
    \        case (\"zero\", \"zero\"): return false\n        case (\"zero\", _):\
    \ return true\n        case (_, \"zero\"): return false\n        case (\"one\"\
    , \"one\"): return false\n        case (\"one\", _): return true\n        case\
    \ (_, \"one\"): return false\n        case (\"two\", \"two\"): return false\n\
    \        case (\"two\", _): return true\n        case (_, \"two\"): return false\n\
    \        case (\"three\", \"three\"): return false\n        case (\"three\", _):\
    \ return true\n        case (_, \"three\"): return false\n        case (\"four\"\
    , \"four\"): return false\n        case (\"four\", _): return true\n        case\
    \ (_, \"four\"): return false\n        case (\"five\", \"five\"): return false\n\
    \        case (\"five\", _): return true\n        case (_, \"five\"): return false\n\
    \        case (\"six\", \"six\"): return false\n        case (\"six\", _): return\
    \ true\n        case (_, \"six\"): return false\n        case (\"seven\", \"seven\"\
    ): return false\n        case (\"seven\", _): return true\n        case (_, \"\
    seven\"): return false\n        case (\"eight\", \"eight\"): return false\n  \
    \      case (\"eight\", _): return true\n        case (_, \"eight\"): return false\n\
    \        case (\"nine\", \"nine\"): return false\n        case (\"nine\", _):\
    \ return true\n        case (_, \"nine\"): return false\n        default: return\
    \ false\n        }\n    }\n    return sortedNumbers.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9je61adz/tmp9je61adz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35289f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35286eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35286ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35286ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9je61adz                        0x000055fb868548b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b3528be3460 __libc_start_main +
    245

    6    tmp9je61adz                        0x000055fb868542e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        let a = Int(String($0)) ?? 0\n\
    \        let b = Int(String($1)) ?? 0\n        return a < b\n    }\n    return\
    \ sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpblns4ph1/tmpblns4ph1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba11edf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba11eaedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba11eaed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba11eaec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblns4ph1                        0x000055ca11e34a6f <unavailable> + 6767

    5    libc.so.6                          0x00002ba11efe2460 __libc_start_main +
    245

    6    tmpblns4ph1                        0x000055ca11e34389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_hc9gjie/tmp_hc9gjie.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e95bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e92b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e92b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e92b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hc9gjie                        0x0000560ce17cf8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab0e97aa460 __libc_start_main +
    245

    6    tmp_hc9gjie                        0x0000560ce17cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return number_to_int(number:\
    \ s1) < number_to_int(number: s2)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpipv3fl1r.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpipv3fl1r.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: s1) < number_to_int(number:\
    \ s2)\n               ^~~~~~~~~~~~~\n/tmp/tmpipv3fl1r.swift:10:44: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: s1) < number_to_int(number:\
    \ s2)\n                                           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (num1, num2) -> Bool in\n        return\
    \ num1 < num2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7l2y_1kk.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_hc9gjie/tmp_hc9gjie.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e95bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e92b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e92b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e92b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hc9gjie                        0x0000560ce17cf8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab0e97aa460 __libc_start_main +
    245

    6    tmp_hc9gjie                        0x0000560ce17cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0ithea0v.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        let a = Int(numbers_to_digits[String($0)]!)\n\
    \        let b = Int(numbers_to_digits[String($1)]!)\n        return a < b\n \
    \   })\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyzjjz_y_.swift:10:21: error: cannot find 'numbers_to_digits' in\
    \ scope\n        let a = Int(numbers_to_digits[String($0)]!)\n               \
    \     ^~~~~~~~~~~~~~~~~\n/tmp/tmpyzjjz_y_.swift:11:21: error: cannot find 'numbers_to_digits'\
    \ in scope\n        let b = Int(numbers_to_digits[String($1)]!)\n            \
    \        ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return Int(a)! < Int(b)!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpx36me12f.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = numbers.sorted { (first, second) -> Bool in\n     \
    \   return first < second\n    }\n    return sorted.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphh2hp5qm.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (a, b) -> Bool in\n       \
    \ return Int(a)! < Int(b)!\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpcwne_mrh/tmpcwne_mrh.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b713bb03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b713b7fa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b713b7fa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b713b7fa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b713b7f9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpcwne_mrh                        0x000055c06934b03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b713b91bc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b713b91c110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b713b91ad30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b713b91ad15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b713ba4065a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b713b82f720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b713b82f70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b713b91a460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b713b91a370 Sequence.sorted(by:)
    + 193

    15   tmpcwne_mrh                        0x000055c06934ad6e <unavailable> + 7534

    16   tmpcwne_mrh                        0x000055c06934a8c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b713bcef460 __libc_start_main +
    245

    18   tmpcwne_mrh                        0x000055c06934a3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return number_to_int(number:\
    \ s1) < number_to_int(number: s2)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpipv3fl1r.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpipv3fl1r.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: s1) < number_to_int(number:\
    \ s2)\n               ^~~~~~~~~~~~~\n/tmp/tmpipv3fl1r.swift:10:44: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: s1) < number_to_int(number:\
    \ s2)\n                                           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        let a = Int(String($0)) ?? 0\n\
    \        let b = Int(String($1)) ?? 0\n        return a < b\n    }\n    return\
    \ sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpblns4ph1/tmpblns4ph1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba11edf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba11eaedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba11eaed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba11eaec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblns4ph1                        0x000055ca11e34a6f <unavailable> + 6767

    5    libc.so.6                          0x00002ba11efe2460 __libc_start_main +
    245

    6    tmpblns4ph1                        0x000055ca11e34389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numsInt = nums.map { Int(wordToNumber($0)) }\n    let sorted\
    \ = numsInt.sorted()\n    let sortedString = sorted.map { numberToWord(String($0))\
    \ }\n    return sortedString.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpozm83ri9.swift:9:34: error: cannot find 'wordToNumber' in scope\n\
    \    let numsInt = nums.map { Int(wordToNumber($0)) }\n                      \
    \           ^~~~~~~~~~~~\n/tmp/tmpozm83ri9.swift:11:37: error: cannot find 'numberToWord'\
    \ in scope\n    let sortedString = sorted.map { numberToWord(String($0)) }\n \
    \                                   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a <\
    \ b\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp_hc9gjie/tmp_hc9gjie.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e95bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e92b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e92b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e92b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hc9gjie                        0x0000560ce17cf8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ab0e97aa460 __libc_start_main +
    245

    6    tmp_hc9gjie                        0x0000560ce17cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        let a = Int($0)!\n     \
    \   let b = Int($1)!\n        return a < b\n    })\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp2kkqtu7i/tmp2kkqtu7i.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002adb5d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb5cda4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adb5cda4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adb5cda413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adb5cda3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2kkqtu7i                        0x000055dde4cd405f <unavailable> + 8287

    6    libswiftCore.so                    0x00002adb5cec5c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002adb5cec6110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002adb5cec4d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002adb5cec4d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002adb5cfea65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002adb5cdd9720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002adb5cdd970f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002adb5cec4460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002adb5cec4370 Sequence.sorted(by:)
    + 193

    15   tmp2kkqtu7i                        0x000055dde4cd3d6e <unavailable> + 7534

    16   tmp2kkqtu7i                        0x000055dde4cd38c1 <unavailable> + 6337

    17   libc.so.6                          0x00002adb5d299460 __libc_start_main +
    245

    18   tmp2kkqtu7i                        0x000055dde4cd33e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { (lhs, rhs) -> Bool in\n        return numberals.firstIndex(of: String(lhs))!\
    \ < numberals.firstIndex(of: String(rhs))!\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeralDict:\
    \ [String: Int] = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\"\
    : 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let\
    \ nums = numbers.split(separator: \" \")\n    var numsInt: [Int] = []\n    for\
    \ num in nums {\n        numsInt.append(numeralDict[String(num)]!)\n    }\n  \
    \  let sorted = numsInt.sorted()\n    var sortedStr: [String] = []\n    for num\
    \ in sorted {\n        sortedStr.append(String(num))\n    }\n    return sortedStr.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp3yqrs5lp/tmp3yqrs5lp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18ae4e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18ae1deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18ae1de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18ae1dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yqrs5lp                        0x000056367511acf5 <unavailable> + 7413

    5    libc.so.6                          0x00002b18ae6d3460 __libc_start_main +
    245

    6    tmp3yqrs5lp                        0x000056367511a849 <unavailable> + 6217

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ Int(lhs)! < Int(rhs)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpb_vkuxt6/tmpb_vkuxt6.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7961dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7961aa3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7961aa3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7961aa313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7961aa2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_vkuxt6                        0x000056122102803c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7961bc4c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7961bc5110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7961bc3d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7961bc3d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7961ce965a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7961ad8720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7961ad870f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7961bc3460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7961bc3370 Sequence.sorted(by:)
    + 193

    15   tmpb_vkuxt6                        0x0000561221027d6e <unavailable> + 7534

    16   tmpb_vkuxt6                        0x00005612210278c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7961f98460 __libc_start_main +
    245

    18   tmpb_vkuxt6                        0x00005612210273e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        let num1 = Int(word_to_numeral(word:\
    \ String($0)))\n        let num2 = Int(word_to_numeral(word: String($1)))\n  \
    \      return num1! < num2!\n    })\n    return sorted.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdyqv3zxw.swift:10:24: error: cannot find 'word_to_numeral' in scope\n\
    \        let num1 = Int(word_to_numeral(word: String($0)))\n                 \
    \      ^~~~~~~~~~~~~~~\n/tmp/tmpdyqv3zxw.swift:11:24: error: cannot find 'word_to_numeral'\
    \ in scope\n        let num2 = Int(word_to_numeral(word: String($1)))\n      \
    \                 ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ String(a)) < numeral_to_int(numeral: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn3cxro_7.swift:10:16: error: cannot find 'numeral_to_int' in scope\n\
    \        return numeral_to_int(numeral: String(a)) < numeral_to_int(numeral: String(b))\n\
    \               ^~~~~~~~~~~~~~\n/tmp/tmpn3cxro_7.swift:10:53: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: String(a))\
    \ < numeral_to_int(numeral: String(b))\n                                     \
    \               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp42usxd1v/tmp42usxd1v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bd606bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bd5d62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bd5d62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bd5d617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42usxd1v                        0x000055ec2d9358b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b5bd6257460 __libc_start_main +
    245

    6    tmp42usxd1v                        0x000055ec2d9352e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        let a = Int(number_to_numeral(number:\
    \ String($0)) ?? \"0\")\n        let b = Int(number_to_numeral(number: String($1))\
    \ ?? \"0\")\n        return a! < b!\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkkoc4oaw.swift:10:21: error: cannot find 'number_to_numeral' in\
    \ scope\n        let a = Int(number_to_numeral(number: String($0)) ?? \"0\")\n\
    \                    ^~~~~~~~~~~~~~~~~\n/tmp/tmpkkoc4oaw.swift:11:21: error: cannot\
    \ find 'number_to_numeral' in scope\n        let b = Int(number_to_numeral(number:\
    \ String($1)) ?? \"0\")\n                    ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        let num1\
    \ = number_to_int(number: s1)\n        let num2 = number_to_int(number: s2)\n\
    \        return num1 < num2\n    }\n    return sorted.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplekab9v6.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmplekab9v6.swift:10:20: error: cannot find\
    \ 'number_to_int' in scope\n        let num1 = number_to_int(number: s1)\n   \
    \                ^~~~~~~~~~~~~\n/tmp/tmplekab9v6.swift:11:20: error: cannot find\
    \ 'number_to_int' in scope\n        let num2 = number_to_int(number: s2)\n   \
    \                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeral_map\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted_nums = nums.sorted { (a, b) -> Bool in\n        return\
    \ numeral_map[String(a)]! < numeral_map[String(b)]!\n    }\n    return sorted_nums.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted(by: {\n        let a = Int(String($0))!\n\
    \        let b = Int(String($1))!\n        return a < b\n    })\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpc4ahxh59/tmpc4ahxh59.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af90aa87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af90a77e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af90a77e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af90a77e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af90a77dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpc4ahxh59                        0x00005631ba303036 <unavailable> + 8246

    6    libswiftCore.so                    0x00002af90a89fc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002af90a8a0110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002af90a89ed30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002af90a89ed15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002af90a9c465a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002af90a7b3720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002af90a7b370f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002af90a89e460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002af90a89e370 Sequence.sorted(by:)
    + 193

    15   tmpc4ahxh59                        0x00005631ba302dae <unavailable> + 7598

    16   tmpc4ahxh59                        0x00005631ba302901 <unavailable> + 6401

    17   libc.so.6                          0x00002af90ac73460 __libc_start_main +
    245

    18   tmpc4ahxh59                        0x00005631ba302429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sortedNumbers = numbers.split(separator: \" \"\
    ).sorted { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_array = numbers_array.sorted\
    \ { (a, b) -> Bool in\n        return number_map[a]! < number_map[b]!\n    }\n\
    \    return sorted_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpho23lvba.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return numeral_to_int(numeral:\
    \ a) < numeral_to_int(numeral: b)\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphscahzad.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphscahzad.swift:10:16: error: cannot find\
    \ 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) < numeral_to_int(numeral:\
    \ b)\n               ^~~~~~~~~~~~~~\n/tmp/tmphscahzad.swift:10:45: error: cannot\
    \ find 'numeral_to_int' in scope\n        return numeral_to_int(numeral: a) <\
    \ numeral_to_int(numeral: b)\n                                            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9je61adz/tmp9je61adz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35289f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35286eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35286ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35286ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9je61adz                        0x000055fb868548b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b3528be3460 __libc_start_main +
    245

    6    tmp9je61adz                        0x000055fb868542e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.components(separatedBy: \" \")\n    let sorted = numberals.sorted {\
    \ (lhs, rhs) -> Bool in\n        return word_to_number(word: lhs) < word_to_number(word:\
    \ rhs)\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph8i9lmd8.swift:8:29: error: value of type 'String' has no member\
    \ 'components'\n    let numberals = numbers.components(separatedBy: \" \")\n \
    \                   ~~~~~~~ ^~~~~~~~~~\n/tmp/tmph8i9lmd8.swift:10:16: error: cannot\
    \ find 'word_to_number' in scope\n        return word_to_number(word: lhs) < word_to_number(word:\
    \ rhs)\n               ^~~~~~~~~~~~~~\n/tmp/tmph8i9lmd8.swift:10:44: error: cannot\
    \ find 'word_to_number' in scope\n        return word_to_number(word: lhs) < word_to_number(word:\
    \ rhs)\n                                           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ number_to_int(number: String(lhs)) < number_to_int(number: String(rhs))\n  \
    \  }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_px6jqrz.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(lhs)) < number_to_int(number: String(rhs))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp_px6jqrz.swift:10:53: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(lhs))\
    \ < number_to_int(number: String(rhs))\n                                     \
    \               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let sorted = numbers.split(separator: \" \").sorted\
    \ { numberals.firstIndex(of: String($0))! < numberals.firstIndex(of: String($1))!\
    \ }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return a.count\
    \ < b.count\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpimtn9rgn/tmpimtn9rgn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46e076cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46e0463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46e0463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46e04627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpimtn9rgn                        0x000055ce566828e2 <unavailable> + 6370

    5    libc.so.6                          0x00002b46e0958460 __libc_start_main +
    245

    6    tmpimtn9rgn                        0x000055ce56682319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n    let numbers = numbers.split(separator: \" \")\n  \
    \  let sortedNumbers = numbers.sorted { numberals.firstIndex(of: String($0))!\
    \ < numberals.firstIndex(of: String($1))! }\n    return sortedNumbers.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdgto7xyt.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeralToNumber:\
    \ [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9\n    ]\n    let numbers = numbers.split(separator: \" \").map { String($0)\
    \ }\n    let sortedNumbers = numbers.sorted { numeralToNumber[$0]! < numeralToNumber[$1]!\
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numeralDict\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numeralArray\
    \ = numbers.components(separatedBy: \" \")\n    let sortedArray = numeralArray.sorted\
    \ { numeralDict[$0]! < numeralDict[$1]! }\n    return sortedArray.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphd34zwx7.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let numeralArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let number_map =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbers_array\
    \ = numbers.components(separatedBy: \" \")\n    let sorted_numbers = numbers_array.sorted\
    \ { (first, second) -> Bool in\n        return number_map[first]! < number_map[second]!\n\
    \    }\n    return sorted_numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppvqeqgao.swift:9:33: error: value of type 'String' has no member\
    \ 'components'\n    let numbers_array = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch $0 {\n        case \"\
    zero\":\n            return true\n        case \"one\":\n            return $1\
    \ != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" && $1\
    \ != \"one\"\n        case \"three\":\n            return $1 != \"zero\" && $1\
    \ != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sortedNums = nums.sorted { (a, b) -> Bool in\n        return\
    \ a.count < b.count\n    }\n    return sortedNums.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpeeczprt9/tmpeeczprt9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46bd9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46bd6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46bd6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46bd6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeeczprt9                        0x00005577c46d38e2 <unavailable> + 6370

    5    libc.so.6                          0x00002b46bdba0460 __libc_start_main +
    245

    6    tmpeeczprt9                        0x00005577c46d3319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ Int(lhs)! < Int(rhs)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpb_vkuxt6/tmpb_vkuxt6.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7961dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7961aa3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7961aa3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7961aa313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7961aa2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_vkuxt6                        0x000056122102803c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7961bc4c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7961bc5110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7961bc3d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7961bc3d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7961ce965a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7961ad8720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7961ad870f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7961bc3460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7961bc3370 Sequence.sorted(by:)
    + 193

    15   tmpb_vkuxt6                        0x0000561221027d6e <unavailable> + 7534

    16   tmpb_vkuxt6                        0x00005612210278c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7961f98460 __libc_start_main +
    245

    18   tmpb_vkuxt6                        0x00005612210273e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return convert(a)\
    \ < convert(b)\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxix8tgay.swift:10:16: error: cannot find 'convert' in scope\n \
    \       return convert(a) < convert(b)\n               ^~~~~~~\n/tmp/tmpxix8tgay.swift:10:29:\
    \ error: cannot find 'convert' in scope\n        return convert(a) < convert(b)\n\
    \                            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ String(a)) < number_to_int(number: String(b))\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp53yhqnlo.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmp53yhqnlo.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.split(separator: \" \")\n    let sorted = numberals.sorted { (lhs, rhs)\
    \ -> Bool in\n        return lhs < rhs\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp3do_i0dx/tmp3do_i0dx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9cddc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9cdabeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9cdabe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9cdabd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3do_i0dx                        0x00005632b0b848b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ac9cdfb3460 __libc_start_main +
    245

    6    tmp3do_i0dx                        0x00005632b0b842e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch $0 {\n        case \"\
    zero\":\n            return true\n        case \"one\":\n            return $1\
    \ != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" && $1\
    \ != \"one\"\n        case \"three\":\n            return $1 != \"zero\" && $1\
    \ != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let numsInt = nums.map { Int(word_to_numeral($0)) }\n    let sorted\
    \ = numsInt.sorted()\n    let sortedStr = sorted.map { numeral_to_word($0) }\n\
    \    return sortedStr.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0k8e08nj.swift:9:34: error: cannot find 'word_to_numeral' in scope\n\
    \    let numsInt = nums.map { Int(word_to_numeral($0)) }\n                   \
    \              ^~~~~~~~~~~~~~~\n/tmp/tmp0k8e08nj.swift:11:34: error: cannot find\
    \ 'numeral_to_word' in scope\n    let sortedStr = sorted.map { numeral_to_word($0)\
    \ }\n                                 ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch ($0, $1) {\n        case\
    \ (\"zero\", \"zero\"): return false\n        case (\"zero\", _): return true\n\
    \        case (_, \"zero\"): return false\n        case (\"one\", \"one\"): return\
    \ false\n        case (\"one\", _): return true\n        case (_, \"one\"): return\
    \ false\n        case (\"two\", \"two\"): return false\n        case (\"two\"\
    , _): return true\n        case (_, \"two\"): return false\n        case (\"three\"\
    , \"three\"): return false\n        case (\"three\", _): return true\n       \
    \ case (_, \"three\"): return false\n        case (\"four\", \"four\"): return\
    \ false\n        case (\"four\", _): return true\n        case (_, \"four\"):\
    \ return false\n        case (\"five\", \"five\"): return false\n        case\
    \ (\"five\", _): return true\n        case (_, \"five\"): return false\n     \
    \   case (\"six\", \"six\"): return false\n        case (\"six\", _): return true\n\
    \        case (_, \"six\"): return false\n        case (\"seven\", \"seven\"):\
    \ return false\n        case (\"seven\", _): return true\n        case (_, \"\
    seven\"): return false\n        case (\"eight\", \"eight\"): return false\n  \
    \      case (\"eight\", _): return true\n        case (_, \"eight\"): return false\n\
    \        case (\"nine\", \"nine\"): return false\n        case (\"nine\", _):\
    \ return true\n        case (_, \"nine\"): return false\n        default: return\
    \ false\n        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberals =\
    \ numbers.split(separator: \" \")\n    let sorted = numberals.sorted { (lhs, rhs)\
    \ -> Bool in\n        return lhs < rhs\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp3do_i0dx/tmp3do_i0dx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9cddc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9cdabeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9cdabe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9cdabd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3do_i0dx                        0x00005632b0b848b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ac9cdfb3460 __libc_start_main +
    245

    6    tmp3do_i0dx                        0x00005632b0b842e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdgto7xyt.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ Int(lhs)! < Int(rhs)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpb_vkuxt6/tmpb_vkuxt6.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7961dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7961aa3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7961aa3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7961aa313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7961aa2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_vkuxt6                        0x000056122102803c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7961bc4c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7961bc5110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7961bc3d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7961bc3d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7961ce965a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7961ad8720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7961ad870f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7961bc3460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7961bc3370 Sequence.sorted(by:)
    + 193

    15   tmpb_vkuxt6                        0x0000561221027d6e <unavailable> + 7534

    16   tmpb_vkuxt6                        0x00005612210278c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7961f98460 __libc_start_main +
    245

    18   tmpb_vkuxt6                        0x00005612210273e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(separator:\
    \ \" \")\n    let sorted = numbers.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp42usxd1v/tmp42usxd1v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bd606bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bd5d62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bd5d62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bd5d617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42usxd1v                        0x000055ec2d9358b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b5bd6257460 __libc_start_main +
    245

    6    tmp42usxd1v                        0x000055ec2d9352e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted(by: { (a, b) -> Bool in\n        return\
    \ Int(a)! < Int(b)!\n    })\n    return sorted.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpe5bm4_bo.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    var nums_int = [Int]()\n    for num in nums {\n        switch num\
    \ {\n        case \"zero\":\n            nums_int.append(0)\n        case \"one\"\
    :\n            nums_int.append(1)\n        case \"two\":\n            nums_int.append(2)\n\
    \        case \"three\":\n            nums_int.append(3)\n        case \"four\"\
    :\n            nums_int.append(4)\n        case \"five\":\n            nums_int.append(5)\n\
    \        case \"six\":\n            nums_int.append(6)\n        case \"seven\"\
    :\n            nums_int.append(7)\n        case \"eight\":\n            nums_int.append(8)\n\
    \        case \"nine\":\n            nums_int.append(9)\n        default:\n  \
    \          print(\"Invalid input\")\n        }\n    }\n    nums_int.sort()\n \
    \   var nums_str = [String]()\n    for num in nums_int {\n        switch num {\n\
    \        case 0:\n            nums_str.append(\"zero\")\n        case 1:\n   \
    \         nums_str.append(\"one\")\n        case 2:\n            nums_str.append(\"\
    two\")\n        case 3:\n            nums_str.append(\"three\")\n        case\
    \ 4:\n            nums_str.append(\"four\")\n        case 5:\n            nums_str.append(\"\
    five\")\n        case 6:\n            nums_str.append(\"six\")\n        case 7:\n\
    \            nums_str.append(\"seven\")\n        case 8:\n            nums_str.append(\"\
    eight\")\n        case 9:\n            nums_str.append(\"nine\")\n        default:\n\
    \            print(\"Invalid input\")\n        }\n    }\n    return nums_str.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs < rhs\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp9je61adz/tmp9je61adz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35289f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35286eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35286ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35286ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9je61adz                        0x000055fb868548b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b3528be3460 __libc_start_main +
    245

    6    tmp9je61adz                        0x000055fb868542e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch $0 {\n        case \"\
    zero\":\n            return true\n        case \"one\":\n            return $1\
    \ != \"zero\"\n        case \"two\":\n            return $1 != \"zero\" && $1\
    \ != \"one\"\n        case \"three\":\n            return $1 != \"zero\" && $1\
    \ != \"one\" && $1 != \"two\"\n        case \"four\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\"\n        case\
    \ \"five\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\"\n        case \"six\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\"\n        case \"seven\":\n            return $1 !=\
    \ \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 != \"four\"\
    \ && $1 != \"five\" && $1 != \"six\"\n        case \"eight\":\n            return\
    \ $1 != \"zero\" && $1 != \"one\" && $1 != \"two\" && $1 != \"three\" && $1 !=\
    \ \"four\" && $1 != \"five\" && $1 != \"six\" && $1 != \"seven\"\n        case\
    \ \"nine\":\n            return $1 != \"zero\" && $1 != \"one\" && $1 != \"two\"\
    \ && $1 != \"three\" && $1 != \"four\" && $1 != \"five\" && $1 != \"six\" && $1\
    \ != \"seven\" && $1 != \"eight\"\n        default:\n            return false\n\
    \        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013248
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp1_baq3it/tmp1_baq3it.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adad45a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad429cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adad429c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adad429b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_baq3it                        0x0000563f31c9b8b2 <unavailable> + 6322

    5    libc.so.6                          0x00002adad4791460 __libc_start_main +
    245

    6    tmp1_baq3it                        0x0000563f31c9b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013249
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return Int(a)!\
    \ < Int(b)!\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpynqhc_m4/tmpynqhc_m4.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a73162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72e59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a72e59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a72e5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a72e58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpynqhc_m4                        0x000055936b50a03c <unavailable> + 8252

    6    libswiftCore.so                    0x00002b7a72f7ac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b7a72f7b110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b7a72f79d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b7a72f79d15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b7a7309f65a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b7a72e8e720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b7a72e8e70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b7a72f79460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b7a72f79370 Sequence.sorted(by:)
    + 193

    15   tmpynqhc_m4                        0x000055936b509d6e <unavailable> + 7534

    16   tmpynqhc_m4                        0x000055936b5098c1 <unavailable> + 6337

    17   libc.so.6                          0x00002b7a7334e460 __libc_start_main +
    245

    18   tmpynqhc_m4                        0x000055936b5093e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted {\n        switch ($0, $1) {\n        case\
    \ (\"zero\", \"zero\"): return false\n        case (\"zero\", _): return true\n\
    \        case (_, \"zero\"): return false\n        case (\"one\", \"one\"): return\
    \ false\n        case (\"one\", _): return true\n        case (_, \"one\"): return\
    \ false\n        case (\"two\", \"two\"): return false\n        case (\"two\"\
    , _): return true\n        case (_, \"two\"): return false\n        case (\"three\"\
    , \"three\"): return false\n        case (\"three\", _): return true\n       \
    \ case (_, \"three\"): return false\n        case (\"four\", \"four\"): return\
    \ false\n        case (\"four\", _): return true\n        case (_, \"four\"):\
    \ return false\n        case (\"five\", \"five\"): return false\n        case\
    \ (\"five\", _): return true\n        case (_, \"five\"): return false\n     \
    \   case (\"six\", \"six\"): return false\n        case (\"six\", _): return true\n\
    \        case (_, \"six\"): return false\n        case (\"seven\", \"seven\"):\
    \ return false\n        case (\"seven\", _): return true\n        case (_, \"\
    seven\"): return false\n        case (\"eight\", \"eight\"): return false\n  \
    \      case (\"eight\", _): return true\n        case (_, \"eight\"): return false\n\
    \        case (\"nine\", \"nine\"): return false\n        case (\"nine\", _):\
    \ return true\n        case (_, \"nine\"): return false\n        default: return\
    \ false\n        }\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sortedNums = nums.sorted { (a, b) -> Bool in\n        return\
    \ number_to_int(number: String(a)) < number_to_int(number: String(b))\n    }\n\
    \    return sortedNums.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjysxprnm.swift:10:16: error: cannot find 'number_to_int' in scope\n\
    \        return number_to_int(number: String(a)) < number_to_int(number: String(b))\n\
    \               ^~~~~~~~~~~~~\n/tmp/tmpjysxprnm.swift:10:51: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: String(a)) <\
    \ number_to_int(number: String(b))\n                                         \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (num1, num2) -> Bool in\n \
    \       return number_to_int(number: num1) < number_to_int(number: num2)\n   \
    \ }\n    return sortedNumbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyell20xo.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    let numbers = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpyell20xo.swift:10:16: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: num1) <\
    \ number_to_int(number: num2)\n               ^~~~~~~~~~~~~\n/tmp/tmpyell20xo.swift:10:46:\
    \ error: cannot find 'number_to_int' in scope\n        return number_to_int(number:\
    \ num1) < number_to_int(number: num2)\n                                      \
    \       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdgto7xyt.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbtwbarw.swift:8:24: error: value of type 'String' has no member\
    \ 'components'\n    let nums = numbers.components(separatedBy: \" \")\n      \
    \         ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:16: error: cannot find\
    \ 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n               ^~~~~~~~~~~~~\n/tmp/tmpwbtwbarw.swift:10:43: error: cannot\
    \ find 'number_to_int' in scope\n        return number_to_int(number: a) < number_to_int(number:\
    \ b)\n                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three\
    \ five\"\nfunc sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return convert(a)\
    \ < convert(b)\n    }\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxix8tgay.swift:10:16: error: cannot find 'convert' in scope\n \
    \       return convert(a) < convert(b)\n               ^~~~~~~\n/tmp/tmpxix8tgay.swift:10:29:\
    \ error: cannot find 'convert' in scope\n        return convert(a) < convert(b)\n\
    \                            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013333
