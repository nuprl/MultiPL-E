language: swift
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpycp__voy.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for c in brackets {\n        if c == \"(\"\
    \ {\n            stack.append(c)\n        } else if c == \")\" {\n           \
    \ if stack.isEmpty {\n                return false\n            }\n          \
    \  stack.removeLast()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpycp__voy.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            count += 1\n        } else if bracket == \")\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            count += 1\n        } else if bracket == \")\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for c in brackets {\n        if c ==\
    \ \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n       \
    \     if stack.isEmpty {\n                return false\n            }\n      \
    \      stack.pop()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf6nd4tzc.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for c in brackets {\n        if c ==\
    \ \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n       \
    \     if stack.isEmpty {\n                return false\n            }\n      \
    \      stack.pop()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf6nd4tzc.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpycp__voy.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpycp__voy.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty() {\n                return false\n            }\
    \ else {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplqhb3gm_.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            count += 1\n        } else if bracket == \")\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            count += 1\n        } else if bracket == \")\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpycp__voy.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpycp__voy.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [Character] = []\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for c in brackets {\n        if c ==\
    \ \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n       \
    \     if stack.isEmpty {\n                return false\n            }\n      \
    \      stack.pop()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf6nd4tzc.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [Character] = []\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if char ==\
    \ \"(\" {\n            stack.append(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpycp__voy.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzsz4ukt.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.count == 0 {\n                return false\n \
    \           } else {\n                stack.removeLast()\n            }\n    \
    \    }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.count == 0 {\n                return false\n \
    \           } else {\n                stack.removeLast()\n            }\n    \
    \    }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if char ==\
    \ \"(\" {\n            stack.append(char)\n        } else if char == \")\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n        } else if stack.isEmpty {\n\
    \            return false\n        } else {\n            stack.pop()\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv266no83.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for c in brackets {\n        if c ==\
    \ \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n       \
    \     if stack.isEmpty {\n                return false\n            }\n      \
    \      stack.pop()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf6nd4tzc.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpycp__voy.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd5az0cr9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824747
