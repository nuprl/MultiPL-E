language: swift
name: HumanEval_118_get_closest_vowel
results:
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var closest_vowel = \"\"\n    var closest_index = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                if\
    \ !vowels.contains(word[word.index(word.startIndex, offsetBy: index - 1)]) &&\
    \ !vowels.contains(word[word.index(word.startIndex, offsetBy: index + 1)]) {\n\
    \                    if index < closest_index {\n                        closest_index\
    \ = index\n                        closest_vowel = String(char)\n            \
    \        }\n                }\n            }\n        }\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplb_ga1vh/tmplb_ga1vh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8ac9d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ac6c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ac6c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ac6c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplb_ga1vh                        0x000055ed3f8c37e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ae8acbbe460 __libc_start_main +
    245

    6    tmplb_ga1vh                        0x000055ed3f8c3429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\"\n\
    \    var closest_index = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                let previous_char = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                let next_char = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if !vowels.contains(String(previous_char))\
    \ && !vowels.contains(String(next_char)) {\n                    if index < closest_index\
    \ {\n                        closest_index = index\n                        closest_vowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwg04oqxj/tmpwg04oqxj.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b816cb6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b816c861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b816c861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b816c8607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwg04oqxj                        0x00005617ae5038f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b816cd56460 __libc_start_main +
    245

    6    tmpwg04oqxj                        0x00005617ae503539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex\
    \ = 0\n    var closestConsonant = \"\"\n    var index = 0\n    for letter in word\
    \ {\n        if vowels.contains(letter) {\n            closestVowel = String(letter)\n\
    \            closestVowelIndex = index\n        }\n        if consonants.contains(letter)\
    \ {\n            closestConsonant = String(letter)\n            closestConsonantIndex\
    \ = index\n        }\n        if closestVowelIndex > closestConsonantIndex {\n\
    \            return closestVowel\n        }\n        index += 1\n    }\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp8v9oma9h/tmp8v9oma9h.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86165e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86162dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86162da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86162d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8v9oma9h                        0x000055f2a63d6527 <unavailable> + 5415

    5    libc.so.6                          0x00002b86167cf460 __libc_start_main +
    245

    6    tmp8v9oma9h                        0x000055f2a63d6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel: Character = \" \"\n    var vowelIndex: Int = -1\n    var consonantIndex:\
    \ Int = -1\n    var consonant: Character = \" \"\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            vowel = char\n          \
    \  vowelIndex = index\n        }\n        if consonants.contains(char) {\n   \
    \         consonant = char\n            consonantIndex = index\n        }\n  \
    \      if vowelIndex > consonantIndex {\n            return String(vowel)\n  \
    \      }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwy3137d2/tmpwy3137d2.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4b04e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4b01ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4b01dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4b01dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwy3137d2                        0x0000559585eca717 <unavailable> + 5911

    5    libc.so.6                          0x00002ab4b06d2460 __libc_start_main +
    245

    6    tmpwy3137d2                        0x0000559585eca359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closest_vowel = \"\"\n    var closest_vowel_index = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   if index > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closest_vowel_index\
    \ {\n                        closest_vowel = String(char)\n                  \
    \      closest_vowel_index = index\n                    }\n                }\n\
    \            }\n        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpgjj7o_dw/tmpgjj7o_dw.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0654dcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0654ac6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0654ac6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0654ac57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjj7o_dw                        0x0000565342a417e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b0654fbb460 __libc_start_main +
    245

    6    tmpgjj7o_dw                        0x0000565342a41429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices.reversed()\
    \ {\n        if vowels.contains(word[i]) {\n            vowel = String(word[i])\n\
    \            index = word.distance(from: word.startIndex, to: i)\n        } else\
    \ if consonants.contains(word[i]) {\n            if index != 0 {\n           \
    \     return vowel\n            }\n        }\n    }\n    return \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpn8tyheu4/tmpn8tyheu4.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b663b16ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b663ae65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b663ae65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b663ae647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8tyheu4                        0x0000558f1176aceb <unavailable> + 7403

    5    libc.so.6                          0x00002b663b35a460 __libc_start_main +
    245

    6    tmpn8tyheu4                        0x0000558f1176a4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(String(char)) {\n            result\
    \ = String(char)\n            break\n        }\n        index -= 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnvh0wd16/tmpnvh0wd16.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0f8054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0f7d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0f7d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0f7d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvh0wd16                        0x000055b51b12f8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ac0f8240460 __libc_start_main +
    245

    6    tmpnvh0wd16                        0x000055b51b12f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var index = 0\n    var lastConsonantIndex = 0\n    var lastVowelIndex\
    \ = 0\n    var lastConsonant = \"\"\n    var lastVowel = \"\"\n    for char in\
    \ word.lowercased() {\n        if vowels.contains(String(char)) {\n          \
    \  lastVowel = String(char)\n            lastVowelIndex = index\n        }\n \
    \       if consonants.contains(String(char)) {\n            lastConsonant = String(char)\n\
    \            lastConsonantIndex = index\n        }\n        if lastConsonantIndex\
    \ > lastVowelIndex {\n            result = lastVowel\n        }\n        index\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpun6zfkcd/tmpun6zfkcd.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90aaf8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90aac81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90aac81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90aac807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpun6zfkcd                        0x0000559132bd9853 <unavailable> + 6227

    5    libc.so.6                          0x00002b90ab176460 __libc_start_main +
    245

    6    tmpun6zfkcd                        0x0000559132bd9289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowel_index = -1\n   \
    \ for (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            vowel_index = index\n        }\n    }\n    if vowel_index ==\
    \ -1 {\n        return \"\"\n    }\n    var closest_vowel = \"\"\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(String(char)) {\n \
    \           if vowel_index < index {\n                closest_vowel = String(char)\n\
    \                break\n            }\n        }\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3ary_nwz/tmp3ary_nwz.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67dd618c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67dd30fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67dd30f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67dd30e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ary_nwz                        0x0000558cf0343787 <unavailable> + 6023

    5    libc.so.6                          0x00002b67dd804460 __libc_start_main +
    245

    6    tmp3ary_nwz                        0x0000558cf03433c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var vowelIndex =\
    \ -1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            vowelIndex\
    \ = index\n        } else if consonants.contains(char) {\n            if vowelIndex\
    \ != -1 {\n                result = String(word[word.index(word.startIndex, offsetBy:\
    \ vowelIndex)])\n                break\n            }\n        }\n        index\
    \ -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp4fntcau6/tmp4fntcau6.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af23cccac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af23c9c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af23c9c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af23c9c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fntcau6                        0x000055aec3889a1b <unavailable> + 6683

    5    libc.so.6                          0x00002af23ceb6460 __libc_start_main +
    245

    6    tmp4fntcau6                        0x000055aec3889219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestIndex = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            if index\
    \ > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0cr4r6q1/tmp0cr4r6q1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98732b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9872faeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9872fae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9872fad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cr4r6q1                        0x0000557c9842e7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b98734a3460 __libc_start_main +
    245

    6    tmp0cr4r6q1                        0x0000557c9842e429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestDistance = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if consonants.contains(char) {\n           \
    \ let distance = word.distance(from: word.index(word.startIndex, offsetBy: index),\
    \ to: word.endIndex)\n            if distance < closestDistance {\n          \
    \      closestDistance = distance\n                closestVowel = \"\"\n     \
    \       }\n        } else if vowels.contains(char) {\n            let distance\
    \ = word.distance(from: word.index(word.startIndex, offsetBy: index), to: word.endIndex)\n\
    \            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp51cwy91t/tmp51cwy91t.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1defc80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1def977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1def977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1def9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp51cwy91t                        0x0000560a19562847 <unavailable> + 6215

    5    libc.so.6                          0x00002b1defe6c460 __libc_start_main +
    245

    6    tmp51cwy91t                        0x0000560a19562489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = 0\n    for char in word.reversed() {\n        if vowels.contains(String(char))\
    \ {\n            if index == 0 {\n                result = String(char)\n    \
    \        } else if index % 2 == 0 {\n                result = String(char)\n \
    \           }\n        }\n        index += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpb4ex2pek/tmpb4ex2pek.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf30bf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf308ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf308ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf308eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4ex2pek                        0x0000560f4804d807 <unavailable> + 6151

    5    libc.so.6                          0x00002abf30de1460 __libc_start_main +
    245

    6    tmpb4ex2pek                        0x0000560f4804d449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var vowel_distance = 0\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            if index\
    \ > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if vowel_index == -1 {\n     \
    \                   vowel_index = index\n                        vowel_distance\
    \ = 1\n                    } else {\n                        if vowel_distance\
    \ > index - vowel_index {\n                            vowel_index = index\n \
    \                           vowel_distance = index - vowel_index\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    if vowel_index == -1 {\n        return \"\"\n    } else {\n\
    \        return String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3_jaym6e/tmp3_jaym6e.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6136ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6133e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6133e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6133e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_jaym6e                        0x00005632a9fcc7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ab6138d7460 __libc_start_main +
    245

    6    tmp3_jaym6e                        0x00005632a9fcc429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices {\n     \
    \   if vowels.contains(word[i]) {\n            vowel = String(word[i])\n     \
    \       index = word.distance(from: word.startIndex, to: i)\n        }\n    }\n\
    \    if vowel == \"\" {\n        return \"\"\n    }\n    for i in stride(from:\
    \ index, to: 0, by: -1) {\n        if consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i)]) {\n            return vowel\n        }\n    }\n    return \"\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpltwrhhuj/tmpltwrhhuj.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb73efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb73bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb73bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb73bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltwrhhuj                        0x000055ec27624af7 <unavailable> + 6903

    5    libc.so.6                          0x00002abb740e8460 __libc_start_main +
    245

    6    tmpltwrhhuj                        0x000055ec27624649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ result = \"\"\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var\
    \ consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var wordArray = Array(word)\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelIndexArray = [Int]()\n    var consonantIndexArray = [Int]()\n\
    \    for i in 0..<wordArray.count {\n        for j in 0..<vowels.count {\n   \
    \         if wordArray[i] == Character(vowels[j]) {\n                vowelIndex\
    \ = i\n                vowelIndexArray.append(vowelIndex)\n            }\n   \
    \     }\n        for k in 0..<consonants.count {\n            if wordArray[i]\
    \ == Character(consonants[k]) {\n                consonantIndex = i\n        \
    \        consonantIndexArray.append(consonantIndex)\n            }\n        }\n\
    \    }\n    var vowelIndexArraySorted = vowelIndexArray.sorted()\n    var consonantIndexArraySorted\
    \ = consonantIndexArray.sorted()\n    var vowelIndexArraySortedFiltered = vowelIndexArraySorted.filter\
    \ { $0 > 0 }\n    var consonantIndexArraySortedFiltered = consonantIndexArraySorted.filter\
    \ { $0 > 0 }\n    var vowelIndexArraySortedFilteredReversed = vowelIndexArraySortedFiltered.reversed()\n\
    \    var consonantIndexArraySortedFilteredReversed = consonantIndexArraySortedFiltered.reversed()\n\
    \    var vowelIndexArraySortedFilteredReversedFiltered = vowelIndexArraySortedFilteredReversed.filter\
    \ { $0 < wordArray.count - 1 }\n    var consonantIndexArraySortedFilteredReversedFiltered\
    \ = consonantIndexArraySortedFilteredReversed.filter { $0 < wordArray.count -\
    \ 1 }\n    var vowelIndexArraySortedFilteredReversedFilteredFiltered =\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphhysslst.swift:47:64: error: expected initial value after '='\n\
    \    var vowelIndexArraySortedFilteredReversedFilteredFiltered =\n           \
    \                                                    ^\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var closestConsonant = \"\"\n    var vowelFound = false\n    var consonantFound\
    \ = false\n    for (index, letter) in word.lowercased().reversed().enumerated()\
    \ {\n        if vowels.contains(String(letter)) {\n            closestVowel =\
    \ String(letter)\n            closestVowelIndex = index\n            vowelFound\
    \ = true\n        }\n        if consonants.contains(String(letter)) && vowelFound\
    \ {\n            closestConsonant = String(letter)\n            closestConsonantIndex\
    \ = index\n            consonantFound = true\n        }\n        if vowelFound\
    \ && consonantFound {\n            break\n        }\n    }\n    if vowelFound\
    \ && consonantFound && closestVowelIndex < closestConsonantIndex {\n        return\
    \ closestVowel\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpziwmhr7y/tmpziwmhr7y.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375d23cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375cf33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375cf33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375cf327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziwmhr7y                        0x000056190ac8ad2b <unavailable> + 7467

    5    libc.so.6                          0x00002b375d428460 __libc_start_main +
    245

    6    tmpziwmhr7y                        0x000056190ac8a529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    var vowelDistance\
    \ = 0\n    var consonantDistance = 0\n    var closestVowelDistance = 0\n    var\
    \ closestConsonantDistance = 0\n    for i in 0..<word.count {\n        let index\
    \ = word.index(word.startIndex, offsetBy: i)\n        let character = word[index]\n\
    \        if vowels.contains(character) {\n            vowelFound = true\n    \
    \        vowelIndex = i\n            vowelDistance = word.count - vowelIndex\n\
    \            if vowelDistance < closestVowelDistance {\n                closestVowelDistance\
    \ = vowelDistance\n                closestVowel = String(character)\n        \
    \    }\n        }\n        if consonants.contains(character) {\n            consonantFound\
    \ = true\n            consonantIndex = i\n            consonantDistance = word.count\
    \ - consonantIndex\n            if consonantDistance < closestConsonantDistance\
    \ {\n                closestConsonantDistance = consonantDistance\n          \
    \      closestConsonant = String(character)\n            }\n        }\n      \
    \  if vowelFound && consonantFound {\n            if vowelDistance < consonantDistance\
    \ {\n                return closestVowel\n            }\n        }\n    }\n  \
    \  return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpf49x4wrt.swift:46:17: error: cannot find 'closestConsonant' in\
    \ scope\n                closestConsonant = String(character)\n              \
    \  ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var word_array\
    \ = Array(word)\n    var vowel_index = -1\n    var consonant_index = -1\n    for\
    \ i in 0..<word_array.count {\n        if vowels.contains(String(word_array[i]).lowercased())\
    \ {\n            vowel_index = i\n        }\n        if consonants.contains(String(word_array[i]).lowercased())\
    \ {\n            consonant_index = i\n        }\n        if vowel_index != -1\
    \ && consonant_index != -1 {\n            if vowel_index > consonant_index {\n\
    \                return String(word_array[vowel_index])\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpc9cvcq1c/tmpc9cvcq1c.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c47747c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c4743eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c4743e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c4743d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9cvcq1c                        0x000055d87e8b08a7 <unavailable> + 6311

    5    libc.so.6                          0x00002b5c47933460 __libc_start_main +
    245

    6    tmpc9cvcq1c                        0x000055d87e8b04e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices {\n     \
    \   if vowels.contains(word[i]) {\n            vowel = String(word[i])\n     \
    \       index = word.distance(from: word.startIndex, to: i)\n        }\n    }\n\
    \    if vowel == \"\" {\n        return \"\"\n    }\n    var left = 0\n    var\
    \ right = 0\n    for i in word.indices {\n        if consonants.contains(word[i])\
    \ {\n            left = word.distance(from: word.startIndex, to: i)\n        \
    \    break\n        }\n    }\n    for i in word.indices.reversed() {\n       \
    \ if consonants.contains(word[i]) {\n            right = word.distance(from: word.startIndex,\
    \ to: i)\n            break\n        }\n    }\n    if left == 0 || right == 0\
    \ {\n        return \"\"\n    }\n    if index - left < right - index {\n     \
    \   return vowel\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp1mns6cz6/tmp1mns6cz6.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bee88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bee583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bee583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bee5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mns6cz6                        0x00005623059ada17 <unavailable> + 6679

    5    libc.so.6                          0x00002b7beea78460 __libc_start_main +
    245

    6    tmp1mns6cz6                        0x00005623059ad659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestVowelDistance = 0\n    for (index, char)\
    \ in word.enumerated() {\n        if consonants.contains(char) {\n           \
    \ for (i, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ {\n                    let vowelIndex = word.index(of: vowel)\n            \
    \        let distance = word.distance(from: vowelIndex!, to: index)\n        \
    \            if distance > closestVowelDistance {\n                        closestVowelDistance\
    \ = distance\n                        closestVowel = String(vowel)\n         \
    \           }\n                }\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpdk74bjam.swift:25:43: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                    let vowelIndex = word.index(of: vowel)\n\
    \                                          ^\n/tmp/tmpdk74bjam.swift:25:43: note:\
    \ use 'firstIndex(of:)' instead\n                    let vowelIndex = word.index(of:\
    \ vowel)\n                                          ^~~~~\n                  \
    \                        firstIndex\n/tmp/tmpdk74bjam.swift:26:73: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String.Index'\n     \
    \               let distance = word.distance(from: vowelIndex!, to: index)\n \
    \                                                                       ^\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n    \
    \    let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(char) {\n            result = String(char)\n            break\n\
    \        } else if consonants.contains(char) {\n            break\n        }\n\
    \        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpkledn4dy/tmpkledn4dy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c7a07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c76feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c76fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c76fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkledn4dy                        0x0000563c089e95d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b80c7bf3460 __libc_start_main +
    245

    6    tmpkledn4dy                        0x0000563c089e9219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var index_of_closest_vowel = 0\n    var index_of_last_consonant\
    \ = 0\n    var index_of_first_consonant = 0\n    var index_of_last_vowel = 0\n\
    \    var index_of_first_vowel = 0\n    var index_of_last_letter = 0\n    var index_of_first_letter\
    \ = 0\n    var index_of_last_consonant_before_vowel = 0\n    var index_of_first_consonant_after_vowel\
    \ = 0\n    var index_of_last_vowel_before_consonant = 0\n    var index_of_first_vowel_after_consonant\
    \ = 0\n    var index_of_last_letter_before_vowel = 0\n    var index_of_first_letter_after_vowel\
    \ = 0\n    var index_of_last_letter_before_consonant = 0\n    var index_of_first_letter_after_consonant\
    \ = 0\n    var index_of_last_letter_before_letter = 0\n    var index_of_first_letter_after_letter\
    \ = 0\n    var index_of_last_vowel_before_vowel = 0\n    var index_of_first_vowel_after_vowel\
    \ = 0\n    var index_of_last_consonant_before_consonant = 0\n    var index_of_first_consonant_after_consonant\
    \ = 0\n    var index_of_last_vowel_before_letter = 0\n    var index_of_first_vowel_after_letter\
    \ = 0\n    var index_of_last_consonant_before_letter = 0\n    var index_of_first_consonant_after_letter\
    \ = 0\n    var index_of_last_letter_before_vowel_or_conson\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpd7gkastd.swift:45:9: error: type annotation missing in pattern\n\
    \    var index_of_last_letter_before_vowel_or_conson\n        ^\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = 0\n    var vowelIndex = 0\n   \
    \ var consonantIndex = 0\n    var vowelFound = false\n    var consonantFound =\
    \ false\n    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            vowelFound = true\n            vowelIndex = index\n        }\n\
    \        if consonants.containsString(String(char)) {\n            consonantFound\
    \ = true\n            consonantIndex = index\n        }\n        if vowelFound\
    \ && consonantFound {\n            if vowelIndex > consonantIndex {\n        \
    \        closestVowel = String(char)\n            }\n            vowelFound =\
    \ false\n            consonantFound = false\n        }\n        index += 1\n \
    \   }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnsuj9785.swift:25:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpnsuj9785.swift:26:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpnsuj9785.swift:30:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = -1\n    var consonantIndex\
    \ = -1\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelIndex = i\n        } else if consonants.contains(char) {\n\
    \            consonantIndex = i\n        }\n        if vowelIndex != -1 && consonantIndex\
    \ != -1 {\n            if vowelIndex > consonantIndex {\n                closestVowel\
    \ = char\n                break\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpe49duahf/tmpe49duahf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19c3b2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19c3821b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19c3821988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19c38207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe49duahf                        0x000055d28b433717 <unavailable> + 5911

    5    libc.so.6                          0x00002b19c3d16460 __libc_start_main +
    245

    6    tmpe49duahf                        0x000055d28b433359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n    var vowelFound\
    \ = false\n    var consonantFound = false\n    for i in 0..<word.count {\n   \
    \     let index = word.index(word.startIndex, offsetBy: i)\n        let char =\
    \ String(word[index])\n        if vowels.contains(char) {\n            vowelFound\
    \ = true\n            vowelIndex = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonantFound = true\n            consonantIndex = i\n     \
    \   }\n        if vowelFound && consonantFound {\n            if vowelIndex >\
    \ consonantIndex {\n                result = char\n                break\n   \
    \         }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_3fn1yyw/tmp_3fn1yyw.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf868dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf865d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf865d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf865d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3fn1yyw                        0x000055d3236aa827 <unavailable> + 6183

    5    libc.so.6                          0x00002abf86aca460 __libc_start_main +
    245

    6    tmp_3fn1yyw                        0x000055d3236aa469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n    var vowelCount\
    \ = 0\n    var consonantCount = 0\n    var vowelArray = [Int]()\n    var consonantArray\
    \ = [Int]()\n    for (index, char) in word.lowercased().enumerated() {\n     \
    \   if vowels.contains(String(char)) {\n            vowelIndex = index\n     \
    \       vowelCount += 1\n            vowelArray.append(vowelIndex)\n        }\
    \ else if consonants.contains(String(char)) {\n            consonantIndex = index\n\
    \            consonantCount += 1\n            consonantArray.append(consonantIndex)\n\
    \        }\n    }\n    if vowelCount == 0 || consonantCount == 0 {\n        return\
    \ \"\"\n    }\n    for i in 0..<vowelArray.count {\n        for j in 0..<consonantArray.count\
    \ {\n            if vowelArray[i] > consonantArray[j] {\n                if vowelArray[i]\
    \ - consonantArray[j] == 1 {\n                    result = String(word[word.index(word.startIndex,\
    \ offsetBy: vowelArray[i])])\n                    return result\n            \
    \    }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpynoxo679/tmpynoxo679.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76d9871c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76d9568b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76d9568988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76d95677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpynoxo679                        0x000055dff4f24bd7 <unavailable> + 7127

    5    libc.so.6                          0x00002b76d9a5d460 __libc_start_main +
    245

    6    tmpynoxo679                        0x000055dff4f24819 <unavailable> + 6169

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closest_vowel = \"\"\n    var closest_distance = 0\n    for (index, char) in\
    \ word.enumerated() {\n        if vowels.contains(char) {\n            var distance\
    \ = 0\n            for i in index..<word.count {\n                if consonants.contains(word[i])\
    \ {\n                    distance += 1\n                } else if vowels.contains(word[i])\
    \ {\n                    break\n                }\n            }\n           \
    \ if distance > 0 && (closest_distance == 0 || distance < closest_distance) {\n\
    \                closest_distance = distance\n                closest_vowel =\
    \ String(char)\n            }\n        }\n    }\n    return closest_vowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwultzpuy.swift:25:40: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ consonants.contains(word[i]) {\n                                       ^~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwultzpuy.swift:27:43:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                } else if vowels.contains(word[i])\
    \ {\n                                          ^~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\"\n\
    \    var distance = word.count\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < distance {\n     \
    \                   distance = index\n                        closest_vowel =\
    \ String(char)\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3g1q1e_s/tmp3g1q1e_s.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab781bb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7818afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7818af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7818ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3g1q1e_s                        0x00005569e46958f7 <unavailable> + 6391

    5    libc.so.6                          0x00002ab781da4460 __libc_start_main +
    245

    6    tmp3g1q1e_s                        0x00005569e4695539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowel_index = -1\n   \
    \ for (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            vowel_index = index\n        }\n    }\n    if vowel_index ==\
    \ -1 {\n        return \"\"\n    }\n    for (index, char) in word.enumerated()\
    \ {\n        if !vowels.contains(String(char)) && index > vowel_index {\n    \
    \        return String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    \        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpk23y1r9v/tmpk23y1r9v.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29ebd3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29eba32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29eba32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29eba317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk23y1r9v                        0x00005625abd13ab3 <unavailable> + 6835

    5    libc.so.6                          0x00002b29ebf27460 __libc_start_main +
    245

    6    tmpk23y1r9v                        0x00005625abd134e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var distance = 0\n    for (index, char) in\
    \ word.enumerated() {\n        if consonants.contains(char) {\n            for\
    \ (i, c) in word[index..<word.count].enumerated() {\n                if vowels.contains(c)\
    \ {\n                    if distance == 0 || i < distance {\n                \
    \        distance = i\n                        closest_vowel = String(c)\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpu_bcugdt.swift:23:27: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \            for (i, c) in word[index..<word.count].enumerated() {\n         \
    \                 ^~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ letter) in word.enumerated() {\n        if vowels.contains(letter) {\n     \
    \       var distance = word.count - index\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(letter)\n            }\n        }\n    }\n    if closestDistance ==\
    \ word.count {\n        return \"\"\n    }\n    for (index, letter) in word.enumerated()\
    \ {\n        if consonants.contains(letter) {\n            var distance = word.count\
    \ - index\n            if distance < closestDistance {\n                return\
    \ \"\"\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpg03w_pa6/tmpg03w_pa6.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae46eb54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae46e84bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae46e84b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae46e84a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg03w_pa6                        0x00005567439f56c7 <unavailable> + 5831

    5    libc.so.6                          0x00002ae46ed40460 __libc_start_main +
    245

    6    tmpg03w_pa6                        0x00005567439f5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    //\
    \ Write your code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpfxqgbac3/tmpfxqgbac3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d59fbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d59cb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d59cb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d59cb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxqgbac3                        0x0000558c46d03307 <unavailable> + 4871

    5    libc.so.6                          0x00002b8d5a1aa460 __libc_start_main +
    245

    6    tmpfxqgbac3                        0x0000558c46d02f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelIndex = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = i\n        }\n        if vowelIndex > consonantIndex\
    \ {\n            closestVowel = char\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvg703532/tmpvg703532.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba964f94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba964c8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba964c8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba964c8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg703532                        0x000055a653730923 <unavailable> + 6435

    5    libc.so.6                          0x00002ba965180460 __libc_start_main +
    245

    6    tmpvg703532                        0x000055a653730359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    for i in\
    \ 0..<word.count {\n        let index = word.index(word.startIndex, offsetBy:\
    \ i)\n        let character = word[index]\n        if vowels.contains(character)\
    \ {\n            vowelFound = true\n            vowelIndex = i\n        }\n  \
    \      if consonants.contains(character) {\n            consonantFound = true\n\
    \            consonantIndex = i\n        }\n        if vowelFound && consonantFound\
    \ {\n            if consonantIndex - vowelIndex == 1 {\n                closestVowel\
    \ = String(character)\n            }\n            vowelFound = false\n       \
    \     consonantFound = false\n        }\n    }\n    return closestVowel\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpbobf5z30/tmpbobf5z30.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad140c64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad14095bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad14095b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad14095a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbobf5z30                        0x000056535cb26757 <unavailable> + 5975

    5    libc.so.6                          0x00002ad140e50460 __libc_start_main +
    245

    6    tmpbobf5z30                        0x000056535cb26399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestIndex =\
    \ word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                if\
    \ word[word.index(word.startIndex, offsetBy: index - 1)] != \"a\" && word[word.index(word.startIndex,\
    \ offsetBy: index + 1)] != \"a\" {\n                    if index < closestIndex\
    \ {\n                        closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpr5d405jn/tmpr5d405jn.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e5c8efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e5c5e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e5c5e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e5c5e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5d405jn                        0x000055e2f8e928d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b5e5cadb460 __libc_start_main +
    245

    6    tmpr5d405jn                        0x000055e2f8e92519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let wordArray\
    \ = Array(word)\n    var vowelIndex = 0\n    var consonantIndex = 0\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   for i in 0..<wordArray.count {\n        if vowels.contains(String(wordArray[i]).lowercased())\
    \ {\n            vowelIndex = i\n            for j in (i+1)..<wordArray.count\
    \ {\n                if consonants.contains(String(wordArray[j]).lowercased())\
    \ {\n                    consonantIndex = j\n                    if consonantIndex\
    \ - vowelIndex < closestVowelIndex - closestConsonantIndex {\n               \
    \         closestVowel = String(wordArray[vowelIndex])\n                     \
    \   closestVowelIndex = vowelIndex\n                        closestConsonantIndex\
    \ = consonantIndex\n                    }\n                }\n            }\n\
    \        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplm7szqt1/tmplm7szqt1.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bccd18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bcca0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bcca0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bcca0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm7szqt1                        0x0000556b0ba6e8a7 <unavailable> + 6311

    5    libc.so.6                          0x00002b7bccf04460 __libc_start_main +
    245

    6    tmplm7szqt1                        0x0000556b0ba6e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var distance = word.count\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(String(char)) {\n            if index < distance {\n\
    \                distance = index\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp64_i9y3o/tmp64_i9y3o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb07df1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb07ae8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb07ae8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb07ae77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64_i9y3o                        0x00005581b29407d7 <unavailable> + 6103

    5    libc.so.6                          0x00002adb07fdd460 __libc_start_main +
    245

    6    tmp64_i9y3o                        0x00005581b2940419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            if index\
    \ > 0 && index < word.count - 1 {\n                if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]).lowercased()) && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]).lowercased()) {\n                    if index < closestVowelIndex\
    \ {\n                        closestVowel = String(char)\n                   \
    \     closestVowelIndex = index\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmph8skl9fk/tmph8skl9fk.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76b526dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76b4f64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76b4f64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76b4f637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph8skl9fk                        0x000055a8cad4b947 <unavailable> + 6471

    5    libc.so.6                          0x00002b76b5459460 __libc_start_main +
    245

    6    tmph8skl9fk                        0x000055a8cad4b589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices {\n     \
    \   if vowels.contains(word[i]) {\n            vowel = String(word[i])\n     \
    \       index = word.distance(from: word.startIndex, to: i)\n        }\n    }\n\
    \    if vowel == \"\" {\n        return \"\"\n    }\n    for i in stride(from:\
    \ index, to: 0, by: -1) {\n        if consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i)]) {\n            return vowel\n        }\n    }\n    return \"\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpltwrhhuj/tmpltwrhhuj.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb73efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb73bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb73bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb73bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltwrhhuj                        0x000055ec27624af7 <unavailable> + 6903

    5    libc.so.6                          0x00002abb740e8460 __libc_start_main +
    245

    6    tmpltwrhhuj                        0x000055ec27624649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    var found = false\n    while\
    \ index >= 0 && !found {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(char) {\n            if index\
    \ < word.count - 1 {\n                let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if vowels.contains(nextChar) {\n    \
    \                result = String(nextChar)\n                    found = true\n\
    \                }\n            }\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp9gijyugr/tmp9gijyugr.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6bf306c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6beffdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6beffd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6beffc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9gijyugr                        0x0000556eeb9b1a1b <unavailable> + 6683

    5    libc.so.6                          0x00002ac6bf4f2460 __libc_start_main +
    245

    6    tmp9gijyugr                        0x0000556eeb9b1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = 0\n    for char in word.reversed()\
    \ {\n        if vowels.contains(char) {\n            closestVowel = String(char)\n\
    \            break\n        }\n        if consonants.contains(char) {\n      \
    \      index += 1\n        }\n    }\n    if index == word.count {\n        return\
    \ \"\"\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp31d9i6ji/tmp31d9i6ji.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c86beac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c868e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c868e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c868e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31d9i6ji                        0x00005635f23cc903 <unavailable> + 6403

    5    libc.so.6                          0x00002b9c86dd6460 __libc_start_main +
    245

    6    tmp31d9i6ji                        0x00005635f23cc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    var vowelIndex = 0\n    var\
    \ consonantIndex = 0\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            vowelIndex\
    \ = index\n        } else if consonants.contains(char) {\n            consonantIndex\
    \ = index\n            break\n        }\n        index -= 1\n    }\n    if vowelIndex\
    \ > consonantIndex {\n        result = String(word[word.index(word.startIndex,\
    \ offsetBy: vowelIndex)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpu_0i6apq/tmpu_0i6apq.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1937d6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1937a61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1937a61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1937a607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_0i6apq                        0x00005627dcdac5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b1937f56460 __libc_start_main +
    245

    6    tmpu_0i6apq                        0x00005627dcdac219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n\
    \    for i in stride(from: word.count - 1, through: 0, by: -1) {\n        let\
    \ char = word[word.index(word.startIndex, offsetBy: i)]\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n            break\n        }\n    }\n    for\
    \ i in stride(from: vowel_index - 1, through: 0, by: -1) {\n        let char =\
    \ word[word.index(word.startIndex, offsetBy: i)]\n        if consonants.contains(char)\
    \ {\n            consonant_index = i\n            break\n        }\n    }\n  \
    \  if vowel_index > consonant_index {\n        result = String(word[word.index(word.startIndex,\
    \ offsetBy: vowel_index)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpkyhgiput/tmpkyhgiput.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3cd381c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3cd078b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3cd078988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3cd0777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkyhgiput                        0x000055cdbfc44a03 <unavailable> + 6659

    5    libc.so.6                          0x00002ac3cd56d460 __libc_start_main +
    245

    6    tmpkyhgiput                        0x000055cdbfc44439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var distance = word.count\n    for (index, char) in\
    \ word.enumerated() {\n        if consonants.contains(char) {\n            let\
    \ nextIndex = word.index(word.startIndex, offsetBy: index + 1)\n            let\
    \ nextChar = word[nextIndex]\n            if vowels.contains(nextChar) {\n   \
    \             if index < distance {\n                    distance = index\n  \
    \                  closestVowel = String(nextChar)\n                }\n      \
    \      }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b30bfb77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30bf86e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b30bf86e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b30bf86e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b30bf86dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b30bf9a1ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b30bf95a660 String.subscript.getter
    + 34

    7    tmpgjnuujt7                        0x000055aa498638a1 <unavailable> + 10401

    8    tmpgjnuujt7                        0x000055aa49862726 <unavailable> + 5926

    9    libc.so.6                          0x00002b30bfd63460 __libc_start_main +
    245

    10   tmpgjnuujt7                        0x000055aa49862429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            result = String(char)\n \
    \           break\n        }\n        if consonants.contains(char) {\n       \
    \     index += 1\n        }\n    }\n    if index == word.characters.count {\n\
    \        return \"\"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpncc4luqy.swift:21:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpncc4luqy.swift:30:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    if index == word.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    for\
    \ (i, char) in word.enumerated() {\n        if vowels.contains(String(char)) {\n\
    \            if i != 0 && i != word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i + 1)])) {\n                    result = String(char)\n         \
    \           break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmptwroc2e3/tmptwroc2e3.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c54361c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c54058b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c54058988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c540577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwroc2e3                        0x0000559c93d438f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b7c5454d460 __libc_start_main +
    245

    6    tmptwroc2e3                        0x0000559c93d43539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var consonant = \"\"\n    var result = \"\"\n    for\
    \ char in word.characters {\n        if vowels.containsString(String(char)) {\n\
    \            vowel = String(char)\n        }\n        if consonants.containsString(String(char))\
    \ {\n            consonant = String(char)\n        }\n        if vowel != \"\"\
    \ && consonant != \"\" {\n            result = vowel\n            vowel = \"\"\
    \n            consonant = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpoqsm4zn7.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpoqsm4zn7.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpoqsm4zn7.swift:26:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n    var index =\
    \ 0\n    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            if index > 0 && consonants.containsString(String(word[word.startIndex.advancedBy(index\
    \ - 1)])) {\n                if closestVowelIndex == 0 {\n                   \
    \ closestVowel = String(char)\n                    closestVowelIndex = index\n\
    \                } else if index < closestVowelIndex {\n                    closestVowel\
    \ = String(char)\n                    closestVowelIndex = index\n            \
    \    }\n            }\n        }\n        index += 1\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6atje7so.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp6atje7so.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp6atje7so.swift:24:40: error: value\
    \ of type 'String' has no member 'containsString'\n            if index > 0 &&\
    \ consonants.containsString(String(word[word.startIndex.advancedBy(index - 1)]))\
    \ {\n                            ~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp6atje7so.swift:24:83:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ if index > 0 && consonants.containsString(String(word[word.startIndex.advancedBy(index\
    \ - 1)])) {\n                                                                \
    \  ~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex\
    \ = 0\n    var vowelIndex = 0\n    var consonantIndex = 0\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            vowelIndex\
    \ = index\n            for (index, char) in word.enumerated() {\n            \
    \    if consonants.contains(char) {\n                    consonantIndex = index\n\
    \                    if vowelIndex > consonantIndex && vowelIndex < closestVowelIndex\
    \ {\n                        closestVowelIndex = vowelIndex\n                \
    \        closestConsonantIndex = consonantIndex\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnq2kwr6_/tmpnq2kwr6_.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e0167dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e01374b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e01374988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e013737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnq2kwr6_                        0x000055d59a274677 <unavailable> + 5751

    5    libc.so.6                          0x00002b0e01869460 __libc_start_main +
    245

    6    tmpnq2kwr6_                        0x000055d59a2742b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestDistance = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            let\
    \ distance = word.count - index\n            if distance < closestDistance {\n\
    \                closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpy60151mj/tmpy60151mj.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae030a7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae030771b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae030771988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0307707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy60151mj                        0x000055b90f6b78d3 <unavailable> + 6355

    5    libc.so.6                          0x00002ae030c66460 __libc_start_main +
    245

    6    tmpy60151mj                        0x000055b90f6b7309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            if index\
    \ < closestIndex && index > 0 && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]).lowercased()) && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]).lowercased()) {\n                closestVowel = String(char)\n\
    \                closestIndex = index\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpka9df93d/tmpka9df93d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d6bf9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d6bc94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d6bc94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d6bc937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpka9df93d                        0x0000560ff7bc3947 <unavailable> + 6471

    5    libc.so.6                          0x00002b8d6c189460 __libc_start_main +
    245

    6    tmpka9df93d                        0x0000560ff7bc3589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var distance = 0\n    for (index, char) in\
    \ word.enumerated() {\n        if consonants.contains(char) {\n            for\
    \ (i, c) in word[index..<word.count].enumerated() {\n                if vowels.contains(c)\
    \ {\n                    if distance == 0 {\n                        distance\
    \ = i\n                        closestVowel = String(c)\n                    }\
    \ else if i < distance {\n                        distance = i\n             \
    \           closestVowel = String(c)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpdmii4qeo.swift:23:27: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \            for (i, c) in word[index..<word.count].enumerated() {\n         \
    \                 ^~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestDistance = word.count\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = String(word[index])\n        if vowels.contains(char) {\n           \
    \ for j in stride(from: i, to: -1, by: -1) {\n                let index = word.index(word.startIndex,\
    \ offsetBy: j)\n                let char = String(word[index])\n             \
    \   if consonants.contains(char) {\n                    if i - j < closestDistance\
    \ {\n                        closestDistance = i - j\n                       \
    \ closestVowel = char\n                    }\n                    break\n    \
    \            }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjt3hpoxj/tmpjt3hpoxj.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d2508c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d21ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d21ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d21fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjt3hpoxj                        0x00005625b7484927 <unavailable> + 6439

    5    libc.so.6                          0x00002b22d26f4460 __libc_start_main +
    245

    6    tmpjt3hpoxj                        0x00005625b7484569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ last_vowel_index = -1\n    for (index, char) in word.enumerated() {\n      \
    \  if vowels.contains(String(char)) {\n            last_vowel_index = index\n\
    \        }\n        if last_vowel_index != -1 && !vowels.contains(String(char))\
    \ {\n            result = String(word[word.index(word.startIndex, offsetBy: last_vowel_index)])\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppptqmzr3/tmppptqmzr3.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad09a515c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad09a20cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad09a20c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad09a20b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppptqmzr3                        0x00005562dc9318a7 <unavailable> + 6311

    5    libc.so.6                          0x00002ad09a701460 __libc_start_main +
    245

    6    tmppptqmzr3                        0x00005562dc9314e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = 0\n    var consonant_index = 0\n    var vowel_count =\
    \ 0\n    var consonant_count = 0\n    var vowel_index_array = [Int]()\n    var\
    \ consonant_index_array = [Int]()\n    for i in 0..<word.count {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        let char = word[index]\n\
    \        if vowels.contains(char) {\n            vowel_index = i\n           \
    \ vowel_index_array.append(vowel_index)\n            vowel_count += 1\n      \
    \  }\n        if consonants.contains(char) {\n            consonant_index = i\n\
    \            consonant_index_array.append(consonant_index)\n            consonant_count\
    \ += 1\n        }\n    }\n    if vowel_count == 0 || consonant_count == 0 {\n\
    \        return \"\"\n    }\n    var vowel_distance_array = [Int]()\n    for i\
    \ in 0..<vowel_index_array.count {\n        vowel_distance_array.append(vowel_index_array[i]\
    \ - consonant_index_array[consonant_index_array.count - 1])\n    }\n    var min_distance\
    \ = vowel_distance_array[0]\n    var min_distance_index = 0\n    for i in 0..<vowel_distance_array.count\
    \ {\n        if vowel_distance_array[i] < min_distance && vowel_distance_array[i]\
    \ > 0 {\n            min_distance = vowel_distance_array[i]\n            min_distance_index\
    \ = i\n        }\n    }\n    if min_distance == vowel_distance_array[0] && min_distance\
    \ > 0 {\n        let index = word.index(word.startIndex, offsetBy: vowel_index_array[min_distance_index])\n\
    \        return String(word[index])\n    }\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp8gm0hx53/tmp8gm0hx53.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14ee3f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ee0ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ee0eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ee0ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gm0hx53                        0x00005557ac9a0907 <unavailable> + 6407

    5    libc.so.6                          0x00002b14ee5e0460 __libc_start_main +
    245

    6    tmp8gm0hx53                        0x00005557ac9a0549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index)])) {\n            result = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n            break\n        }\n        index -= 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphbnlvzrc/tmphbnlvzrc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b946d8e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b946d5d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b946d5d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b946d5d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbnlvzrc                        0x0000562a5187b8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b946dacd460 __libc_start_main +
    245

    6    tmphbnlvzrc                        0x0000562a5187b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestDistance = word.count\n    for (i, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            var distance = word.count\
    \ - i\n            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpajd_78ia/tmpajd_78ia.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6027816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b602750db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b602750d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b602750c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajd_78ia                        0x00005564d1cca9e3 <unavailable> + 6627

    5    libc.so.6                          0x00002b6027a02460 __libc_start_main +
    245

    6    tmpajd_78ia                        0x00005564d1cca419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            result =\
    \ char\n            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6sc2vqyn/tmp6sc2vqyn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c5b1dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5aed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5aed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5aed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sc2vqyn                        0x000055787fbac8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b9c5b3c7460 __libc_start_main +
    245

    6    tmp6sc2vqyn                        0x000055787fbac2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelIndex = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = i\n        }\n        if vowelIndex > consonantIndex\
    \ {\n            closestVowel = char\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvg703532/tmpvg703532.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba964f94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba964c8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba964c8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba964c8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg703532                        0x000055a653730923 <unavailable> + 6435

    5    libc.so.6                          0x00002ba965180460 __libc_start_main +
    245

    6    tmpvg703532                        0x000055a653730359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n\
    \    var vowel_found = false\n    var consonant_found = false\n    var i = word.count\
    \ - 1\n    while i >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if vowels.contains(char) {\n            vowel_index =\
    \ i\n            vowel_found = true\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = i\n            consonant_found = true\n   \
    \     }\n        if vowel_found && consonant_found {\n            if vowel_index\
    \ > consonant_index {\n                result = String(char)\n               \
    \ break\n            }\n        }\n        i -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpefydvgf7/tmpefydvgf7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfb468fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfb4386b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfb4386988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfb43857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefydvgf7                        0x0000556aeafd65d7 <unavailable> + 5591

    5    libc.so.6                          0x00002acfb487b460 __libc_start_main +
    245

    6    tmpefydvgf7                        0x0000556aeafd6219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var index = word.count - 1\n    var is_consonant = false\n    var\
    \ is_vowel = false\n    while index >= 0 {\n        if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index)])) {\n            if is_consonant {\n                result\
    \ = String(word[word.index(word.startIndex, offsetBy: index)])\n             \
    \   break\n            }\n            is_vowel = true\n        } else if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index)])) {\n            if is_vowel {\n                result = String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])\n                break\n            }\n            is_consonant\
    \ = true\n        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmprfjspw75/tmprfjspw75.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b8982dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b89524b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b89524988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b895237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfjspw75                        0x000055a8761a28a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b2b89a19460 __libc_start_main +
    245

    6    tmprfjspw75                        0x000055a8761a22d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    var index = word.count -\
    \ 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzu19aqc3/tmpzu19aqc3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad952e61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad952b58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad952b58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad952b577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzu19aqc3                        0x00005590705d37e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ad95304d460 __libc_start_main +
    245

    6    tmpzu19aqc3                        0x00005590705d3219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var index_of_closest_vowel = 0\n    var index_of_previous_consonant\
    \ = 0\n    var index_of_next_consonant = 0\n    for (index, letter) in word.enumerated()\
    \ {\n        if vowels.contains(letter) {\n            index_of_closest_vowel\
    \ = index\n            for (index, letter) in word.enumerated() {\n          \
    \      if consonants.contains(letter) {\n                    if index < index_of_closest_vowel\
    \ {\n                        index_of_previous_consonant = index\n           \
    \         }\n                    if index > index_of_closest_vowel {\n       \
    \                 index_of_next_consonant = index\n                        break\n\
    \                    }\n                }\n            }\n            if index_of_previous_consonant\
    \ != 0 && index_of_next_consonant != 0 {\n                if index_of_closest_vowel\
    \ - index_of_previous_consonant < index_of_next_consonant - index_of_closest_vowel\
    \ {\n                    closest_vowel = String(word[word.index(word.startIndex,\
    \ offsetBy: index_of_closest_vowel)])\n                }\n            }\n    \
    \    }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_4mfmyyf/tmp_4mfmyyf.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94dfdf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94dfaedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94dfaed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94dfaec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4mfmyyf                        0x000055c4ef648797 <unavailable> + 6039

    5    libc.so.6                          0x00002b94dffe2460 __libc_start_main +
    245

    6    tmp_4mfmyyf                        0x000055c4ef6483d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            var distance = 0\n\
    \            var isVowel = false\n            for i in index..<word.count {\n\
    \                if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ i)])) {\n                    isVowel = true\n                    break\n   \
    \             }\n                distance += 1\n            }\n            if\
    \ !isVowel && distance < closestDistance {\n                closestDistance =\
    \ distance\n                closestVowel = String(char)\n            }\n     \
    \   }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzh5s9hqd/tmpzh5s9hqd.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2e05f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2e02efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2e02ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2e02ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzh5s9hqd                        0x0000562238b86a77 <unavailable> + 6775

    5    libc.so.6                          0x00002af2e07e4460 __libc_start_main +
    245

    6    tmpzh5s9hqd                        0x0000562238b866b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var closestConsonant = \"\"\n    var closestConsonantIndex2 = 0\n    var closestConsonant2\
    \ = \"\"\n    var closestVowelIndex2 = 0\n    var closestVowel2 = \"\"\n    var\
    \ closestVowelIndex3 = 0\n    var closestVowel3 = \"\"\n    var closestConsonantIndex3\
    \ = 0\n    var closestConsonant3 = \"\"\n    var closestVowelIndex4 = 0\n    var\
    \ closestVowel4 = \"\"\n    var closestConsonantIndex4 = 0\n    var closestConsonant4\
    \ = \"\"\n    var closestVowelIndex5 = 0\n    var closestVowel5 = \"\"\n    var\
    \ closestConsonantIndex5 = 0\n    var closestConsonant5 = \"\"\n    var closestVowelIndex6\
    \ = 0\n    var closestVowel6 = \"\"\n    var closestConsonantIndex6 = 0\n    var\
    \ closestConsonant6 = \"\"\n    var closestVowelIndex7 = 0\n    var closestVowel7\
    \ = \"\"\n    var closestConsonantIndex7 = 0\n    var closestConsonant7 = \"\"\
    \n    var closestVowelIndex8 = 0\n    var closestVowel8 = \"\"\n    var closestConsonantIndex8\
    \ = 0\n    var closestConsonant8 = \"\"\n    var closestVowelIndex9 = 0\n    var\
    \ closestVowel9 = \"\"\n    var closestConsonantIndex9 = 0\n    var closestConsonant9\
    \ = \"\"\n    var closestVowelIndex10 = 0\n    var closestVowel10 = \"\"\n   \
    \ var closestConsonantIndex10 = 0\n    var closestConsonant10 = \"\"\n    var\
    \ closestVow\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwr45dd5d.swift:59:9: error: type annotation missing in pattern\n\
    \    var closestVow\n        ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = 0\n    var right_consonant = false\n    var left_consonant\
    \ = false\n    var right_vowel = false\n    var left_vowel = false\n    for char\
    \ in word.characters {\n        if vowels.contains(char) {\n            right_vowel\
    \ = true\n            if right_consonant && !left_vowel {\n                result\
    \ = String(char)\n                break\n            }\n        } else {\n   \
    \         right_consonant = true\n            if right_vowel && !left_consonant\
    \ {\n                result = String(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)])\n                break\n            }\n        }\n        index\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmprqgtl25_.swift:25:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmprqgtl25_.swift:18:9:\
    \ warning: initialization of immutable value 'consonants' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmprqgtl25_.swift:22:9: warning: variable 'left_consonant'\
    \ was never mutated; consider changing to 'let' constant\n    var left_consonant\
    \ = false\n    ~~~ ^\n    let\n/tmp/tmprqgtl25_.swift:24:9: warning: variable\
    \ 'left_vowel' was never mutated; consider changing to 'let' constant\n    var\
    \ left_vowel = false\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    var result = \"\"\
    \n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n        } else if consonants.contains(char)\
    \ {\n            consonant_index = i\n        }\n        if vowel_index != -1\
    \ && consonant_index != -1 && vowel_index > consonant_index {\n            result\
    \ = String(char)\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpem2epsoe/tmpem2epsoe.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab906806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9064fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9064fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9064fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpem2epsoe                        0x0000556a78a34757 <unavailable> + 5975

    5    libc.so.6                          0x00002ab9069f2460 __libc_start_main +
    245

    6    tmpem2epsoe                        0x0000556a78a34399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = 0\n    for char in word.reversed()\
    \ {\n        if vowels.contains(char) {\n            closestVowel = String(char)\n\
    \            break\n        }\n        if consonants.contains(char) {\n      \
    \      index += 1\n        }\n    }\n    if index == word.count {\n        return\
    \ \"\"\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp31d9i6ji/tmp31d9i6ji.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c86beac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c868e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c868e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c868e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31d9i6ji                        0x00005635f23cc903 <unavailable> + 6403

    5    libc.so.6                          0x00002b9c86dd6460 __libc_start_main +
    245

    6    tmp31d9i6ji                        0x00005635f23cc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for (i, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ && word.index(of: vowel)! > index && word.index(of: vowel)! < closestVowelIndex\
    \ {\n                    closestVowel = String(vowel)\n                    closestVowelIndex\
    \ = word.index(of: vowel)!\n                }\n            }\n        }\n    }\n\
    \    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0l2d0jd4.swift:24:67: error: referencing operator function '>'\
    \ on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \                if word.contains(vowel) && word.index(of: vowel)! > index &&\
    \ word.index(of: vowel)! < closestVowelIndex {\n                             \
    \                                     ^\nSwift.BinaryInteger:1:11: note: where\
    \ 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmp0l2d0jd4.swift:24:101:\
    \ error: referencing operator function '<' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n                if word.contains(vowel) && word.index(of:\
    \ vowel)! > index && word.index(of: vowel)! < closestVowelIndex {\n          \
    \                                                                            \
    \              ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\n\
    extension BinaryInteger {\n          ^\n/tmp/tmp0l2d0jd4.swift:26:62: error: cannot\
    \ assign value of type 'String.Index' to type 'Int'\n                    closestVowelIndex\
    \ = word.index(of: vowel)!\n                                        ~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            if index\
    \ > 0 && consonants.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]).lowercased()) {\n                if index < word.count - 1 && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]).lowercased()) {\n                    if index < closestIndex\
    \ {\n                        closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxngrnhag/tmpxngrnhag.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25e3e23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25e3b1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25e3b1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25e3b197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxngrnhag                        0x000055d3d9e58947 <unavailable> + 6471

    5    libc.so.6                          0x00002b25e400f460 __libc_start_main +
    245

    6    tmpxngrnhag                        0x000055d3d9e58589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       let distance = word.distance(from: word.index(word.startIndex, offsetBy:\
    \ index), to: word.endIndex)\n            if distance < closestDistance {\n  \
    \              closestDistance = distance\n                closestVowel = \"\"\
    \n            }\n        } else if vowels.contains(char) {\n            let distance\
    \ = word.distance(from: word.index(word.startIndex, offsetBy: index), to: word.endIndex)\n\
    \            if distance == closestDistance {\n                closestVowel =\
    \ String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpimfgxser/tmpimfgxser.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9246f3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9246c33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9246c33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9246c327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpimfgxser                        0x000055dfd22ba847 <unavailable> + 6215

    5    libc.so.6                          0x00002b9247128460 __libc_start_main +
    245

    6    tmpimfgxser                        0x000055dfd22ba489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ result = \"\"\n    var vowel = \"\"\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n    let word = word.lowercased()\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(String(char)) {\n \
    \           vowel = String(char)\n            if index != 0 && index != word.count\
    \ - 1 {\n                if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    result = vowel\n            \
    \        break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpg5rof_r0/tmpg5rof_r0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5237fb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5237caab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5237caa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5237ca97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5rof_r0                        0x0000565448b8d947 <unavailable> + 6471

    5    libc.so.6                          0x00002b523819f460 __libc_start_main +
    245

    6    tmpg5rof_r0                        0x0000565448b8d589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var is_consonant\
    \ = false\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(char) {\n            if is_consonant\
    \ {\n                return result\n            }\n            is_consonant =\
    \ true\n        } else if vowels.contains(char) {\n            if is_consonant\
    \ {\n                result = String(char)\n            }\n        }\n       \
    \ index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp1fhgdh_w/tmp1fhgdh_w.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60af98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac60ac8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac60ac8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac60ac8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fhgdh_w                        0x000055c9ebeeb5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002ac60b184460 __libc_start_main +
    245

    6    tmp1fhgdh_w                        0x000055c9ebeeb219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel:\
    \ String = \"\"\n    var closestIndex: Int = 0\n    var index: Int = 0\n    var\
    \ isVowel: Bool = false\n    for char in word.lowercased().reversed() {\n    \
    \    if isVowel {\n            if consonants.contains(char) {\n              \
    \  closestVowel = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \                break\n            }\n        } else {\n            if vowels.contains(char)\
    \ {\n                isVowel = true\n                closestIndex = index\n  \
    \          }\n        }\n        index += 1\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpvehnp48z.swift:25:36: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n            if consonants.contains(char)\
    \ {\n                                   ^\n/tmp/tmpvehnp48z.swift:30:32: error:\
    \ cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n            if vowels.contains(char) {\n           \
    \                    ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var distance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   if index > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < distance {\n      \
    \                  distance = index\n                        closestVowel = String(char)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5vsjn3e_/tmp5vsjn3e_.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04477dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae044474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae044474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0444737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vsjn3e_                        0x0000563eb8fed7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ae044969460 __libc_start_main +
    245

    6    tmp5vsjn3e_                        0x0000563eb8fed429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        let charString = String(char)\n        if vowels.contains(charString)\
    \ {\n            if index < closestVowelIndex {\n                closestVowel\
    \ = charString\n                closestVowelIndex = index\n            }\n   \
    \     }\n    }\n    if closestVowelIndex == word.count {\n        return \"\"\n\
    \    }\n    var closestConsonantIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        let charString = String(char)\n        if consonants.contains(charString)\
    \ {\n            if index > closestVowelIndex && index < closestConsonantIndex\
    \ {\n                closestConsonantIndex = index\n            }\n        }\n\
    \    }\n    if closestConsonantIndex == word.count {\n        return \"\"\n  \
    \  }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmpozj0ru/tmpmpozj0ru.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60b93f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60b90f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60b90f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60b90ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmpozj0ru                        0x000055d9125077d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b60b95e5460 __libc_start_main +
    245

    6    tmpmpozj0ru                        0x000055d912507419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ vowel = \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n    for\
    \ (index, char) in word.enumerated() {\n        if char == \"a\" || char == \"\
    e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            vowel =\
    \ String(char)\n            vowel_index = index\n        }\n        if char !=\
    \ \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char != \"u\" &&\
    \ char != \"A\" && char != \"E\" && char != \"I\" && char != \"O\" && char !=\
    \ \"U\" {\n            consonant_index = index\n        }\n    }\n    if vowel_index\
    \ > consonant_index {\n        return vowel\n    }\n    return \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6qdamuq3/tmp6qdamuq3.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4db2a4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4db2742b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4db2742988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4db27417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qdamuq3                        0x000055b8294c76c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b4db2c37460 __libc_start_main +
    245

    6    tmp6qdamuq3                        0x000055b8294c7309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var vowel_index = -1\n    var consonant_index = -1\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = String(word[index])\n        if vowels.contains(char) {\n           \
    \ vowel_index = i\n        }\n        if consonants.contains(char) {\n       \
    \     consonant_index = i\n        }\n        if vowel_index != -1 && consonant_index\
    \ != -1 && vowel_index > consonant_index {\n            result = String(word[index])\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp33pkbvt_/tmp33pkbvt_.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab50e0e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab50ddddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab50dddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab50dddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33pkbvt_                        0x00005621d1ac7827 <unavailable> + 6183

    5    libc.so.6                          0x00002ab50e2d2460 __libc_start_main +
    245

    6    tmp33pkbvt_                        0x00005621d1ac7469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    var index = word.count -\
    \ 1\n    while index >= 0 {\n        if vowels.contains(word[index]) {\n     \
    \       result = String(word[index])\n            break\n        }\n        index\
    \ -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp8m0_35l_.swift:21:28: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if vowels.contains(word[index])\
    \ {\n                           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp8m0_35l_.swift:22:29: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            result = String(word[index])\n                            ^~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            result =\
    \ char\n            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6sc2vqyn/tmp6sc2vqyn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c5b1dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5aed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5aed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5aed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sc2vqyn                        0x000055787fbac8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b9c5b3c7460 __libc_start_main +
    245

    6    tmp6sc2vqyn                        0x000055787fbac2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = 0\n    var vowel_index = 0\n    var vowel_distance\
    \ = 0\n    var vowel_distance_min = 0\n    var vowel_distance_min_index = 0\n\
    \    var vowel_distance_min_index_old = 0\n    var vowel_distance_min_old = 0\n\
    \    var vowel_distance_old = 0\n    var vowel_index_old = 0\n    var vowel_index_old_old\
    \ = 0\n    var vowel_index_old_old_old = 0\n    var vowel_index_old_old_old_old\
    \ = 0\n    var vowel_index_old_old_old_old_old = 0\n    var vowel_index_old_old_old_old_old_old\
    \ = 0\n    var vowel_index_old_old_old_old_old_old_old = 0\n    var vowel_index_old_old_old_old_old_old_old_old\
    \ = 0\n    var vowel_index_old_old_old_old_old_old_old_old_old = 0\n    var vowel_index_old_old_old_old_old_old_old_old_old_old\
    \ = 0\n    var vowel_index_old_old_old_old_old_old_old_old_old_old_old = 0\n \
    \   var vowel_index_old_old_old_old_old_old_old_old_old_old_old_old = 0\n    var\
    \ vowel_index_old_old_old_old_old_old_old_old_old_old_old_old_old = 0\n    var\
    \ vowel_index_old_old_old_old_old_old_old_old_old_old_old_old_old_old = 0\n  \
    \  var vowel_index_old_old_old_old_old_old_old_old_old_old_old_old_old_old_old\
    \ = 0\n    var vowel_index_old_old_old_old_old_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp8o4rd2cd.swift:43:9: error: type annotation missing in pattern\n\
    \    var vowel_index_old_old_old_old_old_\n        ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var consonantCount = 0\n    var vowelCount = 0\n    for (index, char) in word.lowercased().enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            vowelCount += 1\n\
    \            if consonantCount == 1 {\n                closestVowel = String(char)\n\
    \                closestVowelIndex = index\n                closestConsonantIndex\
    \ = index - 1\n            }\n            consonantCount = 0\n        } else if\
    \ consonants.contains(String(char)) {\n            consonantCount += 1\n     \
    \   }\n    }\n    if vowelCount == 1 {\n        return \"\"\n    }\n    if closestVowelIndex\
    \ == 0 {\n        return \"\"\n    }\n    if closestVowelIndex == word.count -\
    \ 1 {\n        return \"\"\n    }\n    if closestConsonantIndex == 0 {\n     \
    \   return \"\"\n    }\n    if closestConsonantIndex == word.count - 1 {\n   \
    \     return \"\"\n    }\n    if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: closestConsonantIndex - 1)])) {\n        return \"\"\n    }\n    if\
    \ consonants.contains(String(word[word.index(word.startIndex, offsetBy: closestConsonantIndex\
    \ + 1)])) {\n        return \"\"\n    }\n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpyhhqi3ps/tmpyhhqi3ps.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52040a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5203d9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5203d9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5203d9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyhhqi3ps                        0x00005627b0c80a37 <unavailable> + 6711

    5    libc.so.6                          0x00002b5204294460 __libc_start_main +
    245

    6    tmpyhhqi3ps                        0x00005627b0c80589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            var distance = 0\n\
    \            for i in index..<word.count {\n                let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n                if vowels.contains(String(char)) {\n        \
    \            break\n                }\n                distance += 1\n       \
    \     }\n            if distance < closestVowelDistance {\n                closestVowelDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpny0cwipw/tmpny0cwipw.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1b356c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c1b04db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c1b04d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c1b04c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny0cwipw                        0x000055f0d2354a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b3c1b542460 __libc_start_main +
    245

    6    tmpny0cwipw                        0x000055f0d23546b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelCount = 0\n    var consonantCount = 0\n    var vowelFound\
    \ = false\n    var consonantFound = false\n    var vowelIndexArray = [Int]()\n\
    \    var consonantIndexArray = [Int]()\n    var vowelCountArray = [Int]()\n  \
    \  var consonantCountArray = [Int]()\n    var vowelFoundArray = [Bool]()\n   \
    \ var consonantFoundArray = [Bool]()\n    var vowelIndexArray2 = [Int]()\n   \
    \ var consonantIndexArray2 = [Int]()\n    var vowelCountArray2 = [Int]()\n   \
    \ var consonantCountArray2 = [Int]()\n    var vowelFoundArray2 = [Bool]()\n  \
    \  var consonantFoundArray2 = [Bool]()\n    var vowelIndexArray3 = [Int]()\n \
    \   var consonantIndexArray3 = [Int]()\n    var vowelCountArray3 = [Int]()\n \
    \   var consonantCountArray3 = [Int]()\n    var vowelFoundArray3 = [Bool]()\n\
    \    var consonantFoundArray3 = [Bool]()\n    var vowelIndexArray4 = [Int]()\n\
    \    var consonantIndexArray4 = [Int]()\n    var vowelCountArray4 = [Int]()\n\
    \    var consonantCountArray4 = [Int]()\n    var vowelFoundArray4 = [Bool]()\n\
    \    var consonantFoundArray4 = [Bool]()\n    var vowelIndexArray5 = [Int]()\n\
    \    var consonantIndexArray5 = [Int]()\n    var vowelCountArray5 = [Int]()\n\
    \    var consonantCountArray5 = [Int]()\n    var vowelFoundArray5 = [Bool]()\n\
    \    var consonantFoundArray5 = [Bool]()\n    var vowelIndexArray6 = [Int]()\n\
    \    var consonantIndexArray6 = [Int]()\n    var vowelCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7m68jsn8.swift:58:9: error: type annotation missing in pattern\n\
    \    var vowelCount\n        ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ vowel: String = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let consonants: Set<Character> = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var prev_char: Character =\
    \ \" \"\n    var next_char: Character = \" \"\n    for char in word.lowercased()\
    \ {\n        if vowels.contains(char) {\n            if consonants.contains(prev_char)\
    \ && consonants.contains(next_char) {\n                vowel = String(char)\n\
    \                break\n            }\n        }\n        prev_char = char\n \
    \   }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3j1ontjx/tmp3j1ontjx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b457c475c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b457c16cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b457c16c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b457c16b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3j1ontjx                        0x0000558d7eb69737 <unavailable> + 5943

    5    libc.so.6                          0x00002b457c661460 __libc_start_main +
    245

    6    tmp3j1ontjx                        0x0000558d7eb69379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n    \
    \    let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(char) {\n            result = String(char)\n            break\n\
    \        } else if consonants.contains(char) {\n            break\n        }\n\
    \        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpkledn4dy/tmpkledn4dy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c7a07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c76feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c76fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c76fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkledn4dy                        0x0000563c089e95d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b80c7bf3460 __libc_start_main +
    245

    6    tmpkledn4dy                        0x0000563c089e9219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let wordArray\
    \ = Array(word)\n    var vowelIndex = -1\n    var consonantIndex = -1\n    for\
    \ i in 0..<wordArray.count {\n        if vowels.contains(String(wordArray[i]).lowercased())\
    \ {\n            vowelIndex = i\n        }\n        if consonants.contains(String(wordArray[i]).lowercased())\
    \ {\n            consonantIndex = i\n        }\n        if vowelIndex != -1 &&\
    \ consonantIndex != -1 && vowelIndex > consonantIndex {\n            return String(wordArray[vowelIndex])\n\
    \        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_aw274s8/tmp_aw274s8.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8ae19ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ade91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ade91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ade907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_aw274s8                        0x00005610f8d148a7 <unavailable> + 6311

    5    libc.so.6                          0x00002ae8ae386460 __libc_start_main +
    245

    6    tmp_aw274s8                        0x00005610f8d144e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestIndex =\
    \ word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                let\
    \ prevChar = word[word.index(word.startIndex, offsetBy: index - 1)]\n        \
    \        let nextChar = word[word.index(word.startIndex, offsetBy: index + 1)]\n\
    \                if !vowels.contains(prevChar) && !vowels.contains(nextChar) {\n\
    \                    if index < closestIndex {\n                        closestIndex\
    \ = index\n                        closestVowel = String(char)\n             \
    \       }\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5ouxhe21/tmp5ouxhe21.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ee13f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ee10efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ee10ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ee10ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ouxhe21                        0x0000562df79607e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ee15e4460 __libc_start_main +
    245

    6    tmp5ouxhe21                        0x0000562df7960429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let word = word.lowercased()\n    var closestVowel =\
    \ \"\"\n    var closestIndex = 0\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(char) {\n            if index > closestIndex {\n \
    \               closestVowel = String(char)\n                closestIndex = index\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpic_u0ahn/tmpic_u0ahn.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b724c6fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b724c3f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b724c3f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b724c3f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic_u0ahn                        0x000055fcfb5278e3 <unavailable> + 6371

    5    libc.so.6                          0x00002b724c8e9460 __libc_start_main +
    245

    6    tmpic_u0ahn                        0x000055fcfb527319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    for i in stride(from: word.count - 1, through:\
    \ 0, by: -1) {\n        let index = word.index(word.startIndex, offsetBy: i)\n\
    \        let char = String(word[index])\n        if vowels.contains(char) {\n\
    \            closestVowel = char\n            break\n        }\n    }\n    for\
    \ i in stride(from: word.count - 1, through: 0, by: -1) {\n        let index =\
    \ word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if consonants.contains(char) {\n            if closestVowel != \"\" {\n\
    \                return closestVowel\n            }\n        } else {\n      \
    \      closestVowel = \"\"\n        }\n    }\n    return closestVowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp17nta8gb/tmp17nta8gb.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d78666c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d7835db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d7835d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d7835c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17nta8gb                        0x0000558d58b879d3 <unavailable> + 6611

    5    libc.so.6                          0x00002b7d78852460 __libc_start_main +
    245

    6    tmp17nta8gb                        0x0000558d58b87409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n    \
    \    let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(char) {\n            result = String(char)\n            break\n\
    \        } else if consonants.contains(char) {\n            break\n        }\n\
    \        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpkledn4dy/tmpkledn4dy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c7a07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c76feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c76fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c76fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkledn4dy                        0x0000563c089e95d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b80c7bf3460 __libc_start_main +
    245

    6    tmpkledn4dy                        0x0000563c089e9219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestIndex = 0\n    var vowelIndex =\
    \ 0\n    var consonantIndex = 0\n    for i in 0..<word.count {\n        let index\
    \ = word.index(word.startIndex, offsetBy: i)\n        let character = word[index]\n\
    \        if vowels.contains(character) {\n            vowelIndex = i\n       \
    \     if consonantIndex != 0 && vowelIndex - consonantIndex < closestIndex {\n\
    \                closestIndex = vowelIndex - consonantIndex\n                closestVowel\
    \ = String(character)\n            }\n        } else if consonants.contains(character)\
    \ {\n            consonantIndex = i\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpc3yi8l00/tmpc3yi8l00.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e7bd80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e7ba77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e7ba77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e7ba767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc3yi8l00                        0x000055d2c4483757 <unavailable> + 5975

    5    libc.so.6                          0x00002b9e7bf6c460 __libc_start_main +
    245

    6    tmpc3yi8l00                        0x000055d2c4483399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closest_vowel\
    \ = \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n    var index\
    \ = 0\n    var vowel_found = false\n    var consonant_found = false\n    for letter\
    \ in word.reversed() {\n        if !vowel_found && vowels.contains(String(letter))\
    \ {\n            vowel_found = true\n            vowel_index = index\n       \
    \ }\n        if !consonant_found && consonants.contains(String(letter)) {\n  \
    \          consonant_found = true\n            consonant_index = index\n     \
    \   }\n        if vowel_found && consonant_found {\n            break\n      \
    \  }\n        index += 1\n    }\n    if vowel_found && consonant_found && vowel_index\
    \ < consonant_index {\n        closest_vowel = String(word.reversed()[vowel_index])\n\
    \    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpniignixu/tmpniignixu.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada550bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada54db5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada54db5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada54db47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpniignixu                        0x000055db7829c867 <unavailable> + 6247

    5    libc.so.6                          0x00002ada552aa460 __libc_start_main +
    245

    6    tmpniignixu                        0x000055db7829c4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n\
    \    var vowel_count = 0\n    var consonant_count = 0\n    for char in word.reversed()\
    \ {\n        if vowels.contains(char) {\n            vowel_count += 1\n      \
    \      if consonant_count == 1 {\n                vowel_index = word.count - vowel_count\n\
    \                break\n            }\n        } else if consonants.contains(char)\
    \ {\n            consonant_count += 1\n            if vowel_count == 1 {\n   \
    \             consonant_index = word.count - consonant_count\n               \
    \ break\n            }\n        }\n    }\n    if vowel_index > consonant_index\
    \ {\n        result = String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplargeytr/tmplargeytr.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4150e4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4150b44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4150b44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4150b437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplargeytr                        0x000055d2bf15e807 <unavailable> + 6151

    5    libc.so.6                          0x00002b4151039460 __libc_start_main +
    245

    6    tmplargeytr                        0x000055d2bf15e449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestDistance = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            var\
    \ distance = 0\n            var leftConsonant = false\n            var rightConsonant\
    \ = false\n            for i in index+1..<word.count {\n                let char\
    \ = word[word.index(word.startIndex, offsetBy: i)]\n                if consonants.contains(char)\
    \ {\n                    rightConsonant = true\n                    break\n  \
    \              }\n                distance += 1\n            }\n            for\
    \ i in stride(from: index-1, through: 0, by: -1) {\n                let char =\
    \ word[word.index(word.startIndex, offsetBy: i)]\n                if consonants.contains(char)\
    \ {\n                    leftConsonant = true\n                    break\n   \
    \             }\n                distance += 1\n            }\n            if\
    \ leftConsonant && rightConsonant && distance < closestDistance {\n          \
    \      closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5aqmj2_0/tmp5aqmj2_0.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b072ebb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b072e8acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b072e8ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b072e8ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5aqmj2_0                        0x00005580ca181b97 <unavailable> + 7063

    5    libc.so.6                          0x00002b072eda1460 __libc_start_main +
    245

    6    tmp5aqmj2_0                        0x00005580ca1817d9 <unavailable> + 6105

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var found = false\n\
    \    while index >= 0 && !found {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            found = true\n        } else if consonants.contains(char)\
    \ {\n            index -= 1\n        } else {\n            index -= 1\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxjiw7xd1/tmpxjiw7xd1.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfc43c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfc40bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfc40ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfc40b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjiw7xd1                        0x0000559682eda7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002acfc45af460 __libc_start_main +
    245

    6    tmpxjiw7xd1                        0x0000559682eda219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestIndex =\
    \ word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                if\
    \ word[word.index(word.startIndex, offsetBy: index - 1)] != \"a\" && word[word.index(word.startIndex,\
    \ offsetBy: index + 1)] != \"a\" {\n                    if index < closestIndex\
    \ {\n                        closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpr5d405jn/tmpr5d405jn.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e5c8efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e5c5e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e5c5e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e5c5e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5d405jn                        0x000055e2f8e928d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b5e5cadb460 __libc_start_main +
    245

    6    tmpr5d405jn                        0x000055e2f8e92519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestDistance\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            var distance = word.count - index\n            if distance <\
    \ closestDistance {\n                closestDistance = distance\n            \
    \    closestVowel = String(char)\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpq38qnhip/tmpq38qnhip.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9debcd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9deb9cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9deb9cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9deb9cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq38qnhip                        0x000055768ef338d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b9debec2460 __libc_start_main +
    245

    6    tmpq38qnhip                        0x000055768ef33309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ closest_vowel = \"\"\n    var vowel_index = -1\n    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let word_array = Array(word)\n  \
    \  for i in 0..<word_array.count {\n        if vowels.contains(String(word_array[i]).lowercased())\
    \ {\n            vowel_index = i\n            break\n        }\n    }\n    if\
    \ vowel_index == -1 {\n        return closest_vowel\n    }\n    for i in (vowel_index\
    \ + 1)..<word_array.count {\n        if consonants.contains(String(word_array[i]).lowercased())\
    \ {\n            closest_vowel = String(word_array[vowel_index])\n           \
    \ break\n        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplkgt1xdn/tmplkgt1xdn.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87784bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87781b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87781b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87781b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplkgt1xdn                        0x0000562072af28a7 <unavailable> + 6311

    5    libc.so.6                          0x00002b87786a7460 __libc_start_main +
    245

    6    tmplkgt1xdn                        0x0000562072af24e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelIndexArray = [Int]()\n    var consonantIndexArray = [Int]()\n\
    \    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        if vowels.contains(word[index]) {\n            vowelIndexArray.append(i)\n\
    \        } else if consonants.contains(word[index]) {\n            consonantIndexArray.append(i)\n\
    \        }\n    }\n    if vowelIndexArray.count == 0 || consonantIndexArray.count\
    \ == 0 {\n        return \"\"\n    }\n    for i in 0..<vowelIndexArray.count {\n\
    \        for j in 0..<consonantIndexArray.count {\n            if vowelIndexArray[i]\
    \ > consonantIndexArray[j] {\n                if vowelIndexArray[i] - consonantIndexArray[j]\
    \ < vowelIndex {\n                    vowelIndex = vowelIndexArray[i]\n      \
    \              consonantIndex = consonantIndexArray[j]\n                }\n  \
    \          }\n        }\n    }\n    if vowelIndex == 0 && consonantIndex == 0\
    \ {\n        return \"\"\n    }\n    let vowelIndex2 = word.index(word.startIndex,\
    \ offsetBy: vowelIndex)\n    closestVowel = String(word[vowelIndex2])\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp7mfxnln4/tmp7mfxnln4.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc7368c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc705fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc705f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc705e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7mfxnln4                        0x000055eb31c19907 <unavailable> + 6407

    5    libc.so.6                          0x00002b0fc7554460 __libc_start_main +
    245

    6    tmp7mfxnln4                        0x000055eb31c19549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = 0\n    var found = false\n    while index < word.count\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    result = String(char)\n      \
    \              found = true\n                    break\n                }\n  \
    \          }\n        }\n        index += 1\n    }\n    if !found {\n        result\
    \ = \"\"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2assr4nn/tmp2assr4nn.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eb5275c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eb4f6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2eb4f6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2eb4f6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2assr4nn                        0x00005633ec30c5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b2eb5461460 __libc_start_main +
    245

    6    tmp2assr4nn                        0x00005633ec30c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex\
    \ = 0\n    var currentVowelIndex = 0\n    var currentConsonantIndex = 0\n    var\
    \ currentVowel = \"\"\n    var currentConsonant = \"\"\n    var word = word.lowercased()\n\
    \    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            currentVowel = char\n            currentVowelIndex = i\n    \
    \    }\n        if consonants.contains(char) {\n            currentConsonant =\
    \ char\n            currentConsonantIndex = i\n        }\n        if currentVowel\
    \ != \"\" && currentConsonant != \"\" {\n            if currentVowelIndex > closestVowelIndex\
    \ && currentConsonantIndex > closestConsonantIndex {\n                closestVowel\
    \ = currentVowel\n                closestVowelIndex = currentVowelIndex\n    \
    \            closestConsonantIndex = currentConsonantIndex\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpg7o_4_dc/tmpg7o_4_dc.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b978c8d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b978c5cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b978c5cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b978c5ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7o_4_dc                        0x0000555c99ea7983 <unavailable> + 6531

    5    libc.so.6                          0x00002b978cac4460 __libc_start_main +
    245

    6    tmpg7o_4_dc                        0x0000555c99ea73b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    var vowel_index = 0\n   \
    \ var consonant_index = 0\n    var vowel_index_found = false\n    var consonant_index_found\
    \ = false\n    while index >= 0 {\n        if !vowel_index_found {\n         \
    \   vowel_index = vowels.index(of: word[index]) ?? -1\n            if vowel_index\
    \ != -1 {\n                vowel_index_found = true\n            }\n        }\n\
    \        if !consonant_index_found {\n            consonant_index = consonants.index(of:\
    \ word[index]) ?? -1\n            if consonant_index != -1 {\n               \
    \ consonant_index_found = true\n            }\n        }\n        if vowel_index_found\
    \ && consonant_index_found {\n            result = String(word[index])\n     \
    \       break\n        }\n        index -= 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3qp976f4.swift:27:57: error: cannot assign value of type 'String.Index'\
    \ to type 'Int'\n            vowel_index = vowels.index(of: word[index]) ?? -1\n\
    \                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp3qp976f4.swift:27:60:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \            vowel_index = vowels.index(of: word[index]) ?? -1\n             \
    \                                              ^\n/tmp/tmp3qp976f4.swift:33:65:\
    \ error: cannot assign value of type 'String.Index' to type 'Int'\n          \
    \  consonant_index = consonants.index(of: word[index]) ?? -1\n               \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp3qp976f4.swift:33:68:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \            consonant_index = consonants.index(of: word[index]) ?? -1\n     \
    \                                                              ^\n/tmp/tmp3qp976f4.swift:39:29:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            result = String(word[index])\n    \
    \                        ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var distance = 0\n    for (index, char) in\
    \ word.enumerated() {\n        if vowels.contains(char) {\n            let start\
    \ = word.index(word.startIndex, offsetBy: index)\n            let end = word.index(word.startIndex,\
    \ offsetBy: index + 1)\n            let substring = word[start..<end]\n      \
    \      if consonants.contains(word[word.index(before: start)]) && consonants.contains(word[word.index(after:\
    \ end)]) {\n                if distance == 0 {\n                    distance =\
    \ index\n                    closestVowel = String(substring)\n              \
    \  } else if index < distance {\n                    distance = index\n      \
    \              closestVowel = String(substring)\n                }\n         \
    \   }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:93: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e191eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e18ee1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7e18ee1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7e18ee113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7e18ee0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b7e190146c9 <unavailable> + 2692809

    6    tmpwumrdhyz                        0x000056000c789af7 <unavailable> + 10999

    7    tmpwumrdhyz                        0x000056000c788a63 <unavailable> + 6755

    8    libc.so.6                          0x00002b7e193d6460 __libc_start_main +
    245

    9    tmpwumrdhyz                        0x000056000c788589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ i = word.count - 1\n    while i >= 0 {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            result = char\n            break\n        }\n        i -= 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpu4x70ps7/tmpu4x70ps7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5ceab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5ce7a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5ce7a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5ce7a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4x70ps7                        0x0000564948cee8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ab5cec9e460 __libc_start_main +
    245

    6    tmpu4x70ps7                        0x0000564948cee2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowel_index = -1\n   \
    \ for (index, char) in word.reversed().enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            vowel_index = word.count - index - 1\n            break\n   \
    \     }\n    }\n    if vowel_index == -1 {\n        return \"\"\n    }\n    for\
    \ (index, char) in word.reversed().enumerated() {\n        if index > vowel_index\
    \ {\n            if !vowels.contains(String(char)) {\n                return String(word[word.index(word.startIndex,\
    \ offsetBy: vowel_index)])\n            }\n        }\n    }\n    return \"\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3c6ynby5/tmp3c6ynby5.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b362fff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b362fcecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b362fcec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b362fceb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3c6ynby5                        0x000055cfbd46ad2f <unavailable> + 7471

    5    libc.so.6                          0x00002b36301e1460 __libc_start_main +
    245

    6    tmp3c6ynby5                        0x000055cfbd46a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestDistance = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if consonants.contains(char) {\n           \
    \ for (index2, char2) in word.enumerated() {\n                if vowels.contains(char2)\
    \ && index2 > index {\n                    if index2 - index < closestDistance\
    \ {\n                        closestDistance = index2 - index\n              \
    \          closestVowel = String(char2)\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpq2vjqyvp/tmpq2vjqyvp.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b087a123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0879e1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0879e1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0879e197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq2vjqyvp                        0x000055ce228c66c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b087a30f460 __libc_start_main +
    245

    6    tmpq2vjqyvp                        0x000055ce228c6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"AEIOUaeiou\"\n    let consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var vowel_index = -1\n    var consonant_index = -1\n\
    \    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n        } else if consonants.contains(char)\
    \ {\n            consonant_index = i\n        }\n        if vowel_index != -1\
    \ && consonant_index != -1 {\n            if consonant_index - vowel_index > 1\
    \ {\n                result = String(char)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp52rlmxi2/tmp52rlmxi2.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15b6751c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15b6448b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15b6448988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15b64477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52rlmxi2                        0x0000562276975757 <unavailable> + 5975

    5    libc.so.6                          0x00002b15b693d460 __libc_start_main +
    245

    6    tmp52rlmxi2                        0x0000562276975399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   let distance = word.count - index\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5242u0wu/tmp5242u0wu.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91d4045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91d3d3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91d3d3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91d3d3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5242u0wu                        0x0000557c7f7bd8d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b91d4231460 __libc_start_main +
    245

    6    tmp5242u0wu                        0x0000557c7f7bd309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            vowel_index\
    \ = index\n        }\n        if consonants.contains(char) {\n            consonant_index\
    \ = index\n        }\n        if vowel_index != -1 && consonant_index != -1 {\n\
    \            if vowel_index > consonant_index {\n                return String(char)\n\
    \            }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppedx0w2z/tmppedx0w2z.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af849ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af849ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af849ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af849ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppedx0w2z                        0x0000560e7a600677 <unavailable> + 5751

    5    libc.so.6                          0x00002af849fcb460 __libc_start_main +
    245

    6    tmppedx0w2z                        0x0000560e7a6002b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel: String =\
    \ \"\"\n    var closestIndex: Int = 0\n    var index: Int = 0\n    for char in\
    \ word.characters.reversed() {\n        if vowels.contains(String(char)) {\n \
    \           closestVowel = String(char)\n            closestIndex = index\n  \
    \      }\n        index += 1\n    }\n    if closestIndex == 0 {\n        return\
    \ \"\"\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphz4bmcp5.swift:21:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var last_consonant = \"\"\n    var last_vowel = \"\
    \"\n    for char in word {\n        if vowels.contains(char) {\n            last_vowel\
    \ = String(char)\n        } else if consonants.contains(char) {\n            last_consonant\
    \ = String(char)\n        }\n        if last_consonant != \"\" && last_vowel !=\
    \ \"\" {\n            result = last_vowel\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppb76n0zn/tmppb76n0zn.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9aeccfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9ae9c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9ae9c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9ae9c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppb76n0zn                        0x000055e732f10527 <unavailable> + 5415

    5    libc.so.6                          0x00002af9aeebb460 __libc_start_main +
    245

    6    tmppb76n0zn                        0x000055e732f10169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < closestVowelIndex\
    \ {\n                        closestVowelIndex = index\n                     \
    \   closestVowel = String(char)\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmv1gi_04/tmpmv1gi_04.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a5df07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a5dbfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a5dbfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a5dbfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmv1gi_04                        0x000056449db1e8f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b9a5e0f3460 __libc_start_main +
    245

    6    tmpmv1gi_04                        0x000056449db1e539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = word.count - 1\n    var vowelIndex\
    \ = -1\n    var consonantIndex = -1\n    while index >= 0 {\n        let char\
    \ = word[word.index(word.startIndex, offsetBy: index)]\n        if vowels.contains(char)\
    \ {\n            vowelIndex = index\n        } else if consonants.contains(char)\
    \ {\n            consonantIndex = index\n        }\n        if vowelIndex != -1\
    \ && consonantIndex != -1 {\n            if vowelIndex > consonantIndex {\n  \
    \              closestVowel = String(char)\n                break\n          \
    \  }\n        }\n        index -= 1\n    }\n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp179v3b2v/tmp179v3b2v.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c15fe9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c15ce0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c15ce0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c15cdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp179v3b2v                        0x000055e6abec15d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b2c161d5460 __libc_start_main +
    245

    6    tmp179v3b2v                        0x000055e6abec1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index < closestVowelIndex\
    \ {\n                closestVowelIndex = index\n                closestVowel =\
    \ String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzsny5bl1/tmpzsny5bl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b253f11dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b253ee14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b253ee14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b253ee137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzsny5bl1                        0x00005610637ba7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b253f309460 __libc_start_main +
    245

    6    tmpzsny5bl1                        0x00005610637ba419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if consonants.contains(char) {\n\
    \            for (vowelIndex, vowel) in word[index..<word.count].enumerated()\
    \ {\n                if vowels.contains(vowel) {\n                    if vowelIndex\
    \ < closestVowelIndex {\n                        closestVowelIndex = vowelIndex\n\
    \                        closestVowel = String(vowel)\n                    }\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpv97wbxt1.swift:23:40: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \            for (vowelIndex, vowel) in word[index..<word.count].enumerated()\
    \ {\n                                       ^~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            break\n        }\n       \
    \ index -= 1\n    }\n    if index < 0 {\n        return result\n    }\n    index\
    \ -= 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3abj0z_b/tmp3abj0z_b.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7c58ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7c285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7c285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7c2847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3abj0z_b                        0x00005605a01b77e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b2f7c77a460 __libc_start_main +
    245

    6    tmp3abj0z_b                        0x00005605a01b7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var prev = \"\"\n    var next = \"\"\n    for i in\
    \ word.indices {\n        if vowels.contains(word[i]) {\n            if prev !=\
    \ \"\" && next != \"\" {\n                result = word[i]\n                break\n\
    \            }\n        } else if consonants.contains(word[i]) {\n           \
    \ if prev == \"\" {\n                prev = word[i]\n            } else {\n  \
    \              next = word[i]\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9kgwy7lc.swift:25:30: error: cannot assign value of type 'Character'\
    \ to type 'String'\n                result = word[i]\n                       \
    \  ~~~~^~~\n/tmp/tmp9kgwy7lc.swift:30:28: error: cannot assign value of type 'Character'\
    \ to type 'String'\n                prev = word[i]\n                       ~~~~^~~\n\
    /tmp/tmp9kgwy7lc.swift:32:28: error: cannot assign value of type 'Character' to\
    \ type 'String'\n                next = word[i]\n                       ~~~~^~~\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if word[word.index(word.startIndex, offsetBy:\
    \ index - 1)] != \"a\" &&\n                    word[word.index(word.startIndex,\
    \ offsetBy: index - 1)] != \"e\" &&\n                    word[word.index(word.startIndex,\
    \ offsetBy: index - 1)] != \"i\" &&\n                    word[word.index(word.startIndex,\
    \ offsetBy: index - 1)] != \"o\" &&\n                    word[word.index(word.startIndex,\
    \ offsetBy: index - 1)] != \"u\" &&\n                    word[word.index(word.startIndex,\
    \ offsetBy: index + 1)] != \"a\" &&\n                    word[word.index(word.startIndex,\
    \ offsetBy: index + 1)] != \"e\" &&\n                    word[word.index(word.startIndex,\
    \ offsetBy: index + 1)] != \"i\" &&\n                    word[word.index(word.startIndex,\
    \ offsetBy: index + 1)] != \"o\" &&\n                    word[word.index(word.startIndex,\
    \ offsetBy: index + 1)] != \"u\" {\n                    if index < closestVowelIndex\
    \ {\n                        closestVowelIndex = index\n                     \
    \   closestVowel = String(char)\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5xsprde8/tmp5xsprde8.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6988c35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b698892cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b698892c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b698892b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5xsprde8                        0x0000559dc91ba9d7 <unavailable> + 6615

    5    libc.so.6                          0x00002b6988e21460 __libc_start_main +
    245

    6    tmp5xsprde8                        0x0000559dc91ba619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = word.count\n    for (index, char) in word.reversed().enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index < closestIndex\
    \ {\n                closestIndex = index\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpyvh0nnsl/tmpyvh0nnsl.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50dfeabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50dfba2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50dfba2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50dfba17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyvh0nnsl                        0x0000556b39c27af3 <unavailable> + 6899

    5    libc.so.6                          0x00002b50e0097460 __libc_start_main +
    245

    6    tmpyvh0nnsl                        0x0000556b39c27529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closest_vowel\
    \ = \"\"\n    var closest_distance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            var\
    \ distance = 0\n            var left_consonant = false\n            var right_consonant\
    \ = false\n            for i in index..<word.count {\n                if consonants.contains(String(Array(word)[i]).lowercased())\
    \ {\n                    distance += 1\n                    right_consonant =\
    \ true\n                } else {\n                    break\n                }\n\
    \            }\n            for i in (0..<index).reversed() {\n              \
    \  if consonants.contains(String(Array(word)[i]).lowercased()) {\n           \
    \         distance += 1\n                    left_consonant = true\n         \
    \       } else {\n                    break\n                }\n            }\n\
    \            if left_consonant && right_consonant && distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_vowel\
    \ = String(char)\n            }\n        }\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpt7256wib/tmpt7256wib.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25bdf88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25bdc7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25bdc7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25bdc7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7256wib                        0x0000556e0c20cd77 <unavailable> + 7543

    5    libc.so.6                          0x00002b25be174460 __libc_start_main +
    245

    6    tmpt7256wib                        0x0000556e0c20c9b9 <unavailable> + 6585

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = 0\n    for (index, char) in word.reversed().enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            closestVowel = String(char)\n\
    \            closestIndex = index\n            break\n        }\n    }\n    for\
    \ (index, char) in word.reversed().enumerated() {\n        if vowels.contains(String(char))\
    \ && index < closestIndex {\n            closestVowel = String(char)\n       \
    \     closestIndex = index\n        }\n    }\n    return closestVowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0359dkj5/tmp0359dkj5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07a97cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07a94c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07a94c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07a94c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0359dkj5                        0x0000560fc520baa3 <unavailable> + 6819

    5    libc.so.6                          0x00002b07a99b9460 __libc_start_main +
    245

    6    tmp0359dkj5                        0x0000560fc520b4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = word.count - 1\n    var vowelIndex\
    \ = 0\n    var consonantIndex = 0\n    while index >= 0 {\n        let char =\
    \ word[word.index(word.startIndex, offsetBy: index)]\n        if vowels.contains(char)\
    \ {\n            vowelIndex = index\n        } else if consonants.contains(char)\
    \ {\n            consonantIndex = index\n            break\n        }\n      \
    \  index -= 1\n    }\n    if vowelIndex > consonantIndex {\n        closestVowel\
    \ = String(word[word.index(word.startIndex, offsetBy: vowelIndex)])\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmptfpdh170/tmptfpdh170.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c74a0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c74701b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c74701988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c747007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfpdh170                        0x0000560e13e6b5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b8c74bf6460 __libc_start_main +
    245

    6    tmptfpdh170                        0x0000560e13e6b219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let\
    \ word = word.lowercased()\n    var result = \"\"\n    var index = word.count\
    \ - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ char.uppercased()\n            break\n        }\n        if consonants.contains(char)\
    \ {\n            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplo0zvkg8/tmplo0zvkg8.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b85791c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b85488b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b85488988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b854877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo0zvkg8                        0x000055df2d455637 <unavailable> + 5687

    5    libc.so.6                          0x00002b2b8597d460 __libc_start_main +
    245

    6    tmplo0zvkg8                        0x000055df2d455279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var index = word.count - 1\n    var prev_char\
    \ = word[word.index(word.startIndex, offsetBy: index)]\n    var curr_char = \"\
    \"\n    while index > 0 {\n        curr_char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(curr_char) {\n            if consonants.contains(prev_char)\
    \ {\n                closest_vowel = String(curr_char)\n                break\n\
    \            }\n        }\n        prev_char = curr_char\n        index -= 1\n\
    \    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpt_2hbt7_.swift:24:25: error: cannot assign value of type 'Character'\
    \ to type 'String'\n        curr_char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpt_2hbt7_.swift:31:21: error: cannot assign value of type 'String' to type\
    \ 'Character'\n        prev_char = curr_char\n                    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                let previousChar = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if !vowels.contains(String(previousChar))\
    \ && !vowels.contains(String(nextChar)) {\n                    if index < closestIndex\
    \ {\n                        closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpl8p4v5iz/tmpl8p4v5iz.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0458e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0455d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0455d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0455d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8p4v5iz                        0x00005563b90058f7 <unavailable> + 6391

    5    libc.so.6                          0x00002af045ace460 __libc_start_main +
    245

    6    tmpl8p4v5iz                        0x00005563b9005539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closest_vowel\
    \ = \"\"\n    var closest_distance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if consonants.contains(String(char).lowercased()) {\n           \
    \ for i in index..<word.count {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)]).lowercased()) {\n                    if i - index < closest_distance\
    \ {\n                        closest_distance = i - index\n                  \
    \      closest_vowel = String(word[word.index(word.startIndex, offsetBy: i)])\n\
    \                    }\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmprznig4gg/tmprznig4gg.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4cf9eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4cf6e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4cf6e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4cf6e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprznig4gg                        0x000056402cd86ad7 <unavailable> + 6871

    5    libc.so.6                          0x00002ab4cfbd6460 __libc_start_main +
    245

    6    tmprznig4gg                        0x000056402cd86719 <unavailable> + 5913

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var lastConsonant = \"\"\n    var lastVowel\
    \ = \"\"\n    for char in word {\n        if vowels.contains(char) {\n       \
    \     lastVowel = String(char)\n            if lastConsonant != \"\" {\n     \
    \           closestVowel = lastVowel\n            }\n        } else if consonants.contains(char)\
    \ {\n            lastConsonant = String(char)\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_xhdukbi/tmp_xhdukbi.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4dfa93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4df78ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4df78a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4df7897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xhdukbi                        0x000055a408dfd96b <unavailable> + 6507

    5    libc.so.6                          0x00002af4dfc7f460 __libc_start_main +
    245

    6    tmp_xhdukbi                        0x000055a408dfd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < closestIndex {\n \
    \                       closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6fwcl5de/tmp6fwcl5de.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b534d409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b534d100b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b534d100988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b534d0ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fwcl5de                        0x000055aa100678f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b534d5f5460 __libc_start_main +
    245

    6    tmp6fwcl5de                        0x000055aa10067539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var distance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   var leftConsonant = false\n            var rightConsonant = false\n      \
    \      if index > 0 {\n                let leftChar = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                leftConsonant = consonants.contains(leftChar)\n\
    \            }\n            if index < word.count - 1 {\n                let rightChar\
    \ = word[word.index(word.startIndex, offsetBy: index + 1)]\n                rightConsonant\
    \ = consonants.contains(rightChar)\n            }\n            if leftConsonant\
    \ && rightConsonant {\n                if index < distance {\n               \
    \     distance = index\n                    closestVowel = String(char)\n    \
    \            }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzrjnj7qj/tmpzrjnj7qj.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f3c530c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f3c227b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f3c227988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f3c2267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrjnj7qj                        0x000055beef7e97e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9f3c71c460 __libc_start_main +
    245

    6    tmpzrjnj7qj                        0x000055beef7e9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestDistance = Int.max\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   let distance = word.distance(from: word.startIndex, to: word.index(word.startIndex,\
    \ offsetBy: index))\n            if distance < closestDistance {\n           \
    \     closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    if closestDistance == Int.max {\n      \
    \  return \"\"\n    }\n    for (index, char) in word.enumerated() {\n        if\
    \ consonants.contains(char) {\n            let distance = word.distance(from:\
    \ word.startIndex, to: word.index(word.startIndex, offsetBy: index))\n       \
    \     if distance > closestDistance {\n                return closestVowel\n \
    \           }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6001vmrp/tmp6001vmrp.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad475d01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4759f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4759f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4759f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6001vmrp                        0x000055e1fc8bf7a7 <unavailable> + 6055

    5    libc.so.6                          0x00002ad475eed460 __libc_start_main +
    245

    6    tmp6001vmrp                        0x000055e1fc8bf3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = 0\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowel = \"\"\n    var consonant = \"\"\n    var vowelCount = 0\n\
    \    var consonantCount = 0\n    var vowelIndexArray = [Int]()\n    var consonantIndexArray\
    \ = [Int]()\n    for char in word {\n        for vowelChar in vowels {\n     \
    \       if char == vowelChar {\n                vowel = String(char)\n       \
    \         vowelIndex = index\n                vowelCount += 1\n              \
    \  vowelIndexArray.append(vowelIndex)\n            }\n        }\n        for consonantChar\
    \ in consonants {\n            if char == consonantChar {\n                consonant\
    \ = String(char)\n                consonantIndex = index\n                consonantCount\
    \ += 1\n                consonantIndexArray.append(consonantIndex)\n         \
    \   }\n        }\n        index += 1\n    }\n    if vowelCount == 0 || consonantCount\
    \ == 0 {\n        return \"\"\n    }\n    for i in 0..<vowelIndexArray.count {\n\
    \        for j in 0..<consonantIndexArray.count {\n            if vowelIndexArray[i]\
    \ > consonantIndexArray[j] {\n                if vowelIndexArray[i] - consonantIndexArray[j]\
    \ == 1 {\n                    return vowel\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpyug36e92/tmpyug36e92.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b826475ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8264451b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8264451988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82644507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyug36e92                        0x00005653b3ccabdb <unavailable> + 7131

    5    libc.so.6                          0x00002b8264946460 __libc_start_main +
    245

    6    tmpyug36e92                        0x00005653b3cca3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for i in index..<word.count {\n                if vowels.contains(word[i])\
    \ {\n                    if i < closestVowelIndex {\n                        closestVowelIndex\
    \ = i\n                        closestVowel = String(word[i])\n              \
    \      }\n                    break\n                }\n            }\n      \
    \  }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpckgg88c1.swift:24:36: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ vowels.contains(word[i]) {\n                                   ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpckgg88c1.swift:27:47:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                        closestVowel = String(word[i])\n\
    \                                              ^~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = -1\n    var consonantIndex\
    \ = -1\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            vowelIndex = index\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = index\n        }\n        if vowelIndex != -1\
    \ && consonantIndex != -1 && vowelIndex > consonantIndex {\n            closestVowel\
    \ = String(char)\n            break\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpqsn9q18o/tmpqsn9q18o.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3191d07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31919feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31919fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31919fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsn9q18o                        0x0000561ca78de677 <unavailable> + 5751

    5    libc.so.6                          0x00002b3191ef3460 __libc_start_main +
    245

    6    tmpqsn9q18o                        0x0000561ca78de2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var vowelIndex = -1\n    var consonantIndex = -1\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = String(word[index])\n        if vowels.contains(char) {\n           \
    \ vowelIndex = i\n        }\n        if consonants.contains(char) {\n        \
    \    consonantIndex = i\n        }\n        if vowelIndex != -1 && consonantIndex\
    \ != -1 && vowelIndex < consonantIndex {\n            closestVowel = char\n  \
    \          break\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpswxumgue/tmpswxumgue.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaab4898c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaab458fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaab458f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaab458e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpswxumgue                        0x00005627ade7e827 <unavailable> + 6183

    5    libc.so.6                          0x00002aaab4a84460 __libc_start_main +
    245

    6    tmpswxumgue                        0x00005627ade7e469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var distance = word.count\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(String(char)) {\n            let leftDistance = index\
    \ - word.startIndex.encodedOffset\n            let rightDistance = word.endIndex.encodedOffset\
    \ - index\n            if leftDistance > 0 && rightDistance > 0 {\n          \
    \      if leftDistance < rightDistance && leftDistance < distance {\n        \
    \            distance = leftDistance\n                    closestVowel = String(char)\n\
    \                } else if rightDistance < leftDistance && rightDistance < distance\
    \ {\n                    distance = rightDistance\n                    closestVowel\
    \ = String(char)\n                }\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplj46az1a/tmplj46az1a.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f59bd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f598c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f598c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f598c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj46az1a                        0x000055b38eaf78e7 <unavailable> + 6375

    5    libc.so.6                          0x00002b5f59dbc460 __libc_start_main +
    245

    6    tmplj46az1a                        0x000055b38eaf7529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestIndex = 0\n    var index = 0\n    var foundVowel = false\n\
    \    var foundConsonant = false\n    for letter in word.lowercased() {\n     \
    \   if vowels.contains(String(letter)) {\n            foundVowel = true\n    \
    \        closestVowel = String(letter)\n            closestIndex = index\n   \
    \     } else if consonants.contains(String(letter)) && foundVowel {\n        \
    \    foundConsonant = true\n            break\n        }\n        index += 1\n\
    \    }\n    if foundVowel && foundConsonant {\n        return closestVowel\n \
    \   } else {\n        return \"\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpqmeirqfo/tmpqmeirqfo.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ef95b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ef92adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ef92ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ef92ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmeirqfo                        0x00005647285bf647 <unavailable> + 5703

    5    libc.so.6                          0x00002b1ef97a2460 __libc_start_main +
    245

    6    tmpqmeirqfo                        0x00005647285bf289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestDistance\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            var distance = 0\n            for i in index..<word.count {\n\
    \                if !vowels.contains(word[i]) {\n                    distance\
    \ += 1\n                } else {\n                    break\n                }\n\
    \            }\n            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjhsmy9e9.swift:24:37: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ !vowels.contains(word[i]) {\n                                    ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var i = word.count - 1\n    while i >= 0 {\n    \
    \    if vowels.contains(word[i]) {\n            result = String(word[i])\n   \
    \         break\n        }\n        i -= 1\n    }\n    if result == \"\" {\n \
    \       return result\n    }\n    i -= 1\n    while i >= 0 {\n        if consonants.contains(word[i])\
    \ {\n            return result\n        }\n        i -= 1\n    }\n    return \"\
    \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\"\
    ) == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppxrsp538.swift:22:28: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if vowels.contains(word[i])\
    \ {\n                           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmppxrsp538.swift:23:29: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            result = String(word[i])\n                            ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppxrsp538.swift:33:32:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if consonants.contains(word[i]) {\n   \
    \                            ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            vowel = String(char)\n  \
    \          break\n        }\n        index += 1\n    }\n    if index == 0 {\n\
    \        return \"\"\n    }\n    for char in word.characters.reversed() {\n  \
    \      if consonants.contains(char) {\n            return vowel\n        }\n \
    \       index -= 1\n        if index == 0 {\n            return \"\"\n       \
    \ }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpscekl9ed.swift:21:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpscekl9ed.swift:31:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n    \
    \    let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ consonants.contains(char) {\n            result = \"\"\n        } else if vowels.contains(char)\
    \ {\n            result = String(char)\n        }\n        if result != \"\" {\n\
    \            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp7h2s22u3/tmp7h2s22u3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81ff4ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81ff1e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81ff1e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81ff1e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7h2s22u3                        0x00005602061527e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b81ff6d8460 __libc_start_main +
    245

    6    tmp7h2s22u3                        0x0000560206152219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if vowels.contains(char) {\n \
    \           if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestVowelIndex {\n\
    \                        closestVowel = String(char)\n                       \
    \ closestVowelIndex = index\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2n4f0s_2/tmp2n4f0s_2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2569c0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2569902b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2569902988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25699017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n4f0s_2                        0x0000560c4aa107e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2569df7460 __libc_start_main +
    245

    6    tmp2n4f0s_2                        0x0000560c4aa10429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    var vowelIndex = -1\n  \
    \  var consonantIndex = -1\n    for (index, char) in word.enumerated() {\n   \
    \     if vowels.contains(char) {\n            vowelIndex = index\n        } else\
    \ {\n            consonantIndex = index\n        }\n        if vowelIndex != -1\
    \ && consonantIndex != -1 {\n            if consonantIndex - vowelIndex > 1 {\n\
    \                result = String(char)\n            }\n            vowelIndex\
    \ = -1\n            consonantIndex = -1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp661pg6s8/tmp661pg6s8.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49733e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49730e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49730e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49730df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp661pg6s8                        0x0000556dd49b2677 <unavailable> + 5751

    5    libc.so.6                          0x00002b49735d5460 __libc_start_main +
    245

    6    tmp661pg6s8                        0x0000556dd49b22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    var prev = \"\"\n    while index >= 0 {\n      \
    \  let char = String(word[word.index(word.startIndex, offsetBy: index)])\n   \
    \     if vowels.contains(char) {\n            if prev != \"\" {\n            \
    \    result = char\n                break\n            }\n        } else {\n \
    \           prev = char\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpsr_ijtmf/tmpsr_ijtmf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34cb70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34cb405b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34cb405988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34cb4047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsr_ijtmf                        0x000055abbce5a8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b34cb8fa460 __libc_start_main +
    245

    6    tmpsr_ijtmf                        0x000055abbce5a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestDistance = word.count\n    for (i, c) in word.enumerated() {\n\
    \        if vowels.contains(String(c)) {\n            var distance = 0\n     \
    \       for j in (i+1)..<word.count {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: j)])) {\n                    break\n                }\n          \
    \      distance += 1\n            }\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(c)\n            }\n        }\n    }\n    return closestVowel\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpo41xot7l/tmpo41xot7l.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e05d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e02cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e02ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e02c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo41xot7l                        0x0000556137a9aa77 <unavailable> + 6775

    5    libc.so.6                          0x00002b78e07bf460 __libc_start_main +
    245

    6    tmpo41xot7l                        0x0000556137a9a6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closest_vowel = \"\"\n    var closest_distance = word.count\n    for (i, c)\
    \ in word.enumerated() {\n        if vowels.contains(c) {\n            var distance\
    \ = word.count\n            if i > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i - 1)]) {\n                distance = i\n            }\n        \
    \    if i < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i + 1)]) {\n                distance = word.count - i - 1\n      \
    \      }\n            if distance < closest_distance {\n                closest_distance\
    \ = distance\n                closest_vowel = String(c)\n            }\n     \
    \   }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplrt31pgo/tmplrt31pgo.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba3f902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba3f5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba3f5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba3f5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplrt31pgo                        0x00005601c67919f3 <unavailable> + 6643

    5    libc.so.6                          0x00002aba3faee460 __libc_start_main +
    245

    6    tmplrt31pgo                        0x00005601c6791429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            vowel_index\
    \ = index\n        }\n        if consonants.contains(char) {\n            consonant_index\
    \ = index\n        }\n        if vowel_index != -1 && consonant_index != -1 {\n\
    \            break\n        }\n    }\n    if vowel_index == -1 || consonant_index\
    \ == -1 {\n        return \"\"\n    }\n    if vowel_index > consonant_index {\n\
    \        return \"\"\n    }\n    return String(word[word.index(word.startIndex,\
    \ offsetBy: vowel_index)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5p18hbyj/tmp5p18hbyj.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9efa738c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9efa42fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9efa42f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9efa42e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5p18hbyj                        0x0000564f5d7af797 <unavailable> + 6039

    5    libc.so.6                          0x00002b9efa924460 __libc_start_main +
    245

    6    tmp5p18hbyj                        0x0000564f5d7af3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            vowel_index\
    \ = index\n        }\n        if consonants.contains(char) {\n            consonant_index\
    \ = index\n        }\n        if vowel_index != -1 && consonant_index != -1 {\n\
    \            if vowel_index > consonant_index {\n                return String(char)\n\
    \            }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppedx0w2z/tmppedx0w2z.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af849ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af849ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af849ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af849ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppedx0w2z                        0x0000560e7a600677 <unavailable> + 5751

    5    libc.so.6                          0x00002af849fcb460 __libc_start_main +
    245

    6    tmppedx0w2z                        0x0000560e7a6002b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var previous_is_consonant\
    \ = false\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            if previous_is_consonant\
    \ {\n                result = String(char)\n                break\n          \
    \  }\n        } else if consonants.contains(char) {\n            previous_is_consonant\
    \ = true\n        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjdn_givq/tmpjdn_givq.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcb5978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcb566fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcb566f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcb566e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjdn_givq                        0x000055f90ce357e3 <unavailable> + 6115

    5    libc.so.6                          0x00002adcb5b64460 __libc_start_main +
    245

    6    tmpjdn_givq                        0x000055f90ce35219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    for i in\
    \ 0..<word.count {\n        let index = word.index(word.startIndex, offsetBy:\
    \ i)\n        let letter = String(word[index])\n        if vowels.contains(letter)\
    \ {\n            vowelFound = true\n            vowelIndex = i\n        }\n  \
    \      if consonants.contains(letter) && vowelFound {\n            consonantFound\
    \ = true\n            consonantIndex = i\n        }\n        if consonantFound\
    \ && vowelFound {\n            closestVowel = String(word[word.index(word.startIndex,\
    \ offsetBy: vowelIndex)])\n            break\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwojnbx0w/tmpwojnbx0w.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e999b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e996aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e996aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e996a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwojnbx0w                        0x00005583dab02717 <unavailable> + 5911

    5    libc.so.6                          0x00002b2e99b9f460 __libc_start_main +
    245

    6    tmpwojnbx0w                        0x00005583dab02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var index = word.count - 1\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            closestVowel\
    \ = char\n            break\n        }\n        index -= 1\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp4n_k_bm5/tmp4n_k_bm5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71e1c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71e1922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71e1922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71e19217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n_k_bm5                        0x00005625303cc8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b71e1e17460 __libc_start_main +
    245

    6    tmp4n_k_bm5                        0x00005625303cc2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            closest_vowel = String(char)\n\
    \            break\n        }\n        if consonants.contains(char) {\n      \
    \      index += 1\n        }\n    }\n    if index < 2 {\n        return \"\"\n\
    \    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpg4pn1n4w.swift:21:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n    var currentVowelIndex\
    \ = 0\n    var currentConsonantIndex = 0\n    var currentConsonantIndex2 = 0\n\
    \    var currentVowel = \"\"\n    var currentConsonant = \"\"\n    var currentConsonant2\
    \ = \"\"\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            currentVowel = String(char)\n            currentVowelIndex =\
    \ i\n            if currentConsonantIndex != 0 && currentConsonantIndex2 != 0\
    \ {\n                if currentVowelIndex > currentConsonantIndex && currentVowelIndex\
    \ < currentConsonantIndex2 {\n                    if closestVowelIndex == 0 {\n\
    \                        closestVowel = currentVowel\n                       \
    \ closestVowelIndex = currentVowelIndex\n                    } else if closestVowelIndex\
    \ > currentVowelIndex {\n                        closestVowel = currentVowel\n\
    \                        closestVowelIndex = currentVowelIndex\n             \
    \       }\n                }\n            }\n        } else if consonants.contains(char)\
    \ {\n            currentConsonant = String(char)\n            currentConsonantIndex\
    \ = i\n            if currentConsonantIndex2 != 0 {\n                if currentVowelIndex\
    \ > currentConsonantIndex && currentVowelIndex < currentConsonantIndex2 {\n  \
    \                  if closestVowelIndex == 0 {\n                        closestVowel\
    \ = currentVowel\n                        closestVowelIndex = currentVowelIndex\n\
    \                    } else if closestVowelIndex > currentVowelIndex {\n     \
    \                   closestVowel = currentVowel\n                        closestVowelIndex\
    \ = currentVowelIndex\n                    }\n                }\n            }\n\
    \        }\n        currentConsonant2 = currentConsonant\n        currentConsonant\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjyhlw3d7.swift:88:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpjyhlw3d7.swift:16:48: note: to match this opening\
    \ '{'\nfunc get_closest_vowel(word: String) -> String {\n                    \
    \                           ^\n/tmp/tmpjyhlw3d7.swift:60:9: warning: variable\
    \ is unused\n        currentConsonant\n        ^~~~~~~~~~~~~~~~\n/tmp/tmpjyhlw3d7.swift:64:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpjyhlw3d7.swift:19:9:\
    \ warning: variable 'closestVowel' was written to, but never read\n    var closestVowel\
    \ = \"\"\n        ^\n/tmp/tmpjyhlw3d7.swift:23:9: warning: variable 'currentConsonantIndex2'\
    \ was never mutated; consider changing to 'let' constant\n    var currentConsonantIndex2\
    \ = 0\n    ~~~ ^\n    let\n/tmp/tmpjyhlw3d7.swift:26:9: warning: variable 'currentConsonant2'\
    \ was written to, but never read\n    var currentConsonant2 = \"\"\n        ^\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    for i in\
    \ 0..<word.count {\n        let index = word.index(word.startIndex, offsetBy:\
    \ i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelFound = true\n            vowelIndex = i\n        }\n  \
    \      if consonants.contains(char) {\n            consonantFound = true\n   \
    \         consonantIndex = i\n        }\n        if vowelFound && consonantFound\
    \ {\n            if vowelIndex > consonantIndex {\n                closestVowel\
    \ = char\n            }\n            vowelFound = false\n            consonantFound\
    \ = false\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp414w6sc2/tmp414w6sc2.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac81f4e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac81f1dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac81f1dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac81f1db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp414w6sc2                        0x000055701cefbfcd <unavailable> + 8141

    5    libc.so.6                          0x00002ac81f6d1460 __libc_start_main +
    245

    6    tmp414w6sc2                        0x000055701cefb359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\"\n\
    \    var distance = word.count\n    for (i, char) in word.enumerated() {\n   \
    \     if vowels.contains(String(char)) {\n            var left_consonant = false\n\
    \            var right_consonant = false\n            if i > 0 {\n           \
    \     let left_char = word[word.index(word.startIndex, offsetBy: i - 1)]\n   \
    \             left_consonant = !vowels.contains(String(left_char))\n         \
    \   }\n            if i < word.count - 1 {\n                let right_char = word[word.index(word.startIndex,\
    \ offsetBy: i + 1)]\n                right_consonant = !vowels.contains(String(right_char))\n\
    \            }\n            if left_consonant && right_consonant {\n         \
    \       if i < distance {\n                    distance = i\n                \
    \    closest_vowel = String(char)\n                }\n            }\n        }\n\
    \    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmprirsqq2q/tmprirsqq2q.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d0fbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d0f8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d0f8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d0f8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprirsqq2q                        0x00005576873e98f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b5d0fdb0460 __libc_start_main +
    245

    6    tmprirsqq2q                        0x00005576873e9539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices {\n     \
    \   if consonants.contains(word[i]) {\n            index = word.distance(from:\
    \ word.startIndex, to: i)\n            break\n        }\n    }\n    for i in word.indices\
    \ {\n        if vowels.contains(word[i]) {\n            if word.distance(from:\
    \ word.startIndex, to: i) > index {\n                vowel = String(word[i])\n\
    \                break\n            }\n        }\n    }\n    return vowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpinkeneg9/tmpinkeneg9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afeee4f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afeee1e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afeee1e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afeee1e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinkeneg9                        0x0000562c79236787 <unavailable> + 6023

    5    libc.so.6                          0x00002afeee6dc460 __libc_start_main +
    245

    6    tmpinkeneg9                        0x0000562c792363c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) {\n                if index < closestVowelIndex {\n\
    \                    closestVowel = String(char)\n                    closestVowelIndex\
    \ = index\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpoib4owpv/tmpoib4owpv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad09ea99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad09e790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad09e790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad09e78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoib4owpv                        0x000055b1f0c088f7 <unavailable> + 6391

    5    libc.so.6                          0x00002ad09ec85460 __libc_start_main +
    245

    6    tmpoib4owpv                        0x000055b1f0c08539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestIndex = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   if consonants.contains(word[word.index(word.startIndex, offsetBy: index -\
    \ 1)]) && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)]) {\n                if index < closestIndex {\n                    closestIndex\
    \ = index\n                    closestVowel = String(char)\n                }\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpu4v9gl7a/tmpu4v9gl7a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34bbf76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34bbc6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34bbc6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34bbc6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4v9gl7a                        0x000055cc1f9077e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b34bc162460 __libc_start_main +
    245

    6    tmpu4v9gl7a                        0x000055cc1f907429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = -1\n    var closestConsonantIndex = -1\n\
    \    for (index, char) in word.lowercased().reversed().enumerated() {\n      \
    \  if vowels.contains(String(char)) {\n            closestVowel = String(char)\n\
    \            closestVowelIndex = index\n        }\n        if consonants.contains(String(char))\
    \ && closestVowelIndex != -1 {\n            closestConsonantIndex = index\n  \
    \          break\n        }\n    }\n    if closestVowelIndex != -1 && closestConsonantIndex\
    \ != -1 && closestVowelIndex > closestConsonantIndex {\n        return closestVowel\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpr6_lixkg/tmpr6_lixkg.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc8f4ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc8f1e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc8f1e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc8f1e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6_lixkg                        0x000055d9641e98e7 <unavailable> + 6375

    5    libc.so.6                          0x00002acc8f6d8460 __libc_start_main +
    245

    6    tmpr6_lixkg                        0x000055d9641e9529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            result =\
    \ char\n            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6sc2vqyn/tmp6sc2vqyn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c5b1dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5aed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5aed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5aed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sc2vqyn                        0x000055787fbac8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b9c5b3c7460 __libc_start_main +
    245

    6    tmp6sc2vqyn                        0x000055787fbac2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowel_index = -1\n   \
    \ var consonant_index = -1\n    for (index, char) in word.enumerated() {\n   \
    \     if vowels.contains(String(char)) {\n            vowel_index = index\n  \
    \      } else {\n            consonant_index = index\n        }\n        if vowel_index\
    \ != -1 && consonant_index != -1 {\n            break\n        }\n    }\n    if\
    \ vowel_index == -1 || consonant_index == -1 {\n        return \"\"\n    }\n \
    \   return String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2uyusv03/tmp2uyusv03.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5342e97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5342b8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5342b8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5342b8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2uyusv03                        0x000056163e6968a7 <unavailable> + 6311

    5    libc.so.6                          0x00002b5343083460 __libc_start_main +
    245

    6    tmp2uyusv03                        0x000056163e6964e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n    for\
    \ i in 0..<word.count {\n        let index = word.index(word.startIndex, offsetBy:\
    \ i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelIndex = i\n            for j in (0..<i).reversed() {\n \
    \               let index = word.index(word.startIndex, offsetBy: j)\n       \
    \         let char = String(word[index])\n                if consonants.contains(char)\
    \ {\n                    consonantIndex = j\n                    if vowelIndex\
    \ - consonantIndex > closestVowelIndex - closestConsonantIndex {\n           \
    \             closestVowelIndex = vowelIndex\n                        closestConsonantIndex\
    \ = consonantIndex\n                        closestVowel = char\n            \
    \        }\n                    break\n                }\n            }\n    \
    \    }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpel3wsu64/tmpel3wsu64.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f63c2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f63924b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f63924988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f639237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpel3wsu64                        0x0000561b745d19e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b4f63e19460 __libc_start_main +
    245

    6    tmpel3wsu64                        0x0000561b745d1629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var vowel =\
    \ \"\"\n    var consonant = \"\"\n    var result = \"\"\n    for char in word.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            vowel = String(char)\n\
    \        }\n        if consonants.contains(String(char)) {\n            consonant\
    \ = String(char)\n            break\n        }\n    }\n    if vowel != \"\" &&\
    \ consonant != \"\" {\n        result = vowel\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvrx4bjuf/tmpvrx4bjuf.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66eef4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66eec41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66eec41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66eec407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrx4bjuf                        0x000055ac9c927777 <unavailable> + 6007

    5    libc.so.6                          0x00002b66ef136460 __libc_start_main +
    245

    6    tmpvrx4bjuf                        0x000055ac9c9273b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var closest_vowel_index = 0\n    var consonant_index\
    \ = 0\n    var vowel_index = 0\n    var vowel_found = false\n    var consonant_found\
    \ = false\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowel_found = true\n            vowel_index = i\n        }\n\
    \        if consonants.contains(char) {\n            consonant_found = true\n\
    \            consonant_index = i\n        }\n        if vowel_found && consonant_found\
    \ {\n            if vowel_index > consonant_index {\n                if closest_vowel_index\
    \ == 0 {\n                    closest_vowel_index = vowel_index\n            \
    \        closest_vowel = char\n                } else if vowel_index < closest_vowel_index\
    \ {\n                    closest_vowel_index = vowel_index\n                 \
    \   closest_vowel = char\n                }\n            }\n            vowel_found\
    \ = false\n            consonant_found = false\n        }\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzbu980rl/tmpzbu980rl.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b422d92dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b422d624b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b422d624988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b422d6237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbu980rl                        0x0000560b329e2717 <unavailable> + 5911

    5    libc.so.6                          0x00002b422db19460 __libc_start_main +
    245

    6    tmpzbu980rl                        0x0000560b329e2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestIndex = 0\n    var index = 0\n \
    \   for letter in word.reversed() {\n        if vowels.contains(letter) {\n  \
    \          closestVowel = String(letter)\n            closestIndex = index\n \
    \       } else if consonants.contains(letter) {\n            if closestVowel !=\
    \ \"\" {\n                if index - closestIndex == 1 {\n                   \
    \ return closestVowel\n                }\n            }\n        }\n        index\
    \ += 1\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpdb2apt7d/tmpdb2apt7d.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50535d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50532cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50532cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50532ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdb2apt7d                        0x00005603eac9faeb <unavailable> + 6891

    5    libc.so.6                          0x00002b50537c4460 __libc_start_main +
    245

    6    tmpdb2apt7d                        0x00005603eac9f2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices {\n     \
    \   if vowels.contains(word[i]) {\n            vowel = String(word[i])\n     \
    \       index = word.distance(from: word.startIndex, to: i)\n        }\n    }\n\
    \    if vowel == \"\" {\n        return \"\"\n    }\n    for i in stride(from:\
    \ index, to: 0, by: -1) {\n        if consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i)]) {\n            return vowel\n        }\n    }\n    return \"\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpltwrhhuj/tmpltwrhhuj.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb73efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb73bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb73bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb73bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltwrhhuj                        0x000055ec27624af7 <unavailable> + 6903

    5    libc.so.6                          0x00002abb740e8460 __libc_start_main +
    245

    6    tmpltwrhhuj                        0x000055ec27624649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            result = String(char)\n      \
    \      break\n        }\n        if consonants.contains(char) {\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmcnz6ep5/tmpmcnz6ep5.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f1c1fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f1bef4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f1bef4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f1bef37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcnz6ep5                        0x000055c1cf3d55d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b0f1c3e9460 __libc_start_main +
    245

    6    tmpmcnz6ep5                        0x000055c1cf3d5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestIndex =\
    \ word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                let\
    \ prevChar = word[word.index(word.startIndex, offsetBy: index - 1)]\n        \
    \        let nextChar = word[word.index(word.startIndex, offsetBy: index + 1)]\n\
    \                if !vowels.contains(prevChar) && !vowels.contains(nextChar) {\n\
    \                    if index < closestIndex {\n                        closestIndex\
    \ = index\n                        closestVowel = String(char)\n             \
    \       }\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5ouxhe21/tmp5ouxhe21.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ee13f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ee10efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ee10ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ee10ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ouxhe21                        0x0000562df79607e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b9ee15e4460 __libc_start_main +
    245

    6    tmp5ouxhe21                        0x0000562df7960429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var i = word.count - 1\n    while i >= 0 {\n    \
    \    let index = word.index(word.startIndex, offsetBy: i)\n        let char =\
    \ String(word[index])\n        if vowels.contains(char) {\n            result\
    \ = char\n            break\n        }\n        if consonants.contains(char) {\n\
    \            break\n        }\n        i -= 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvdrtqvae/tmpvdrtqvae.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88ace6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88a9ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88a9dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88a9dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdrtqvae                        0x000055b06299d597 <unavailable> + 5527

    5    libc.so.6                          0x00002af88aed2460 __libc_start_main +
    245

    6    tmpvdrtqvae                        0x000055b06299d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    for i in\
    \ stride(from: word.count - 1, through: 0, by: -1) {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if consonants.contains(char)\
    \ {\n            consonantFound = true\n            consonantIndex = i\n     \
    \   }\n        if vowels.contains(char) {\n            vowelFound = true\n   \
    \         vowelIndex = i\n        }\n        if vowelFound && consonantFound {\n\
    \            if vowelIndex > consonantIndex {\n                closestVowel =\
    \ String(char)\n            }\n            break\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpk6hch3sp/tmpk6hch3sp.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee6c6a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee6c39cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee6c39c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee6c39b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk6hch3sp                        0x00005641529007f7 <unavailable> + 6135

    5    libc.so.6                          0x00002aee6c891460 __libc_start_main +
    245

    6    tmpk6hch3sp                        0x0000564152900439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index < closestVowelIndex\
    \ {\n                closestVowelIndex = index\n                closestVowel =\
    \ String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzsny5bl1/tmpzsny5bl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b253f11dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b253ee14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b253ee14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b253ee137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzsny5bl1                        0x00005610637ba7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b253f309460 __libc_start_main +
    245

    6    tmpzsny5bl1                        0x00005610637ba419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013449
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = 0\n    var isVowel = false\n    for char in word.reversed() {\n    \
    \    if vowels.contains(String(char)) {\n            if isVowel {\n          \
    \      break\n            }\n            result = String(char)\n            isVowel\
    \ = true\n        } else {\n            isVowel = false\n        }\n        index\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmph_xebufe/tmph_xebufe.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7822a92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7822789b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7822789988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78227887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_xebufe                        0x000055f6a2a72777 <unavailable> + 6007

    5    libc.so.6                          0x00002b7822c7e460 __libc_start_main +
    245

    6    tmph_xebufe                        0x000055f6a2a723b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n    var\
    \ vowel_distance = 0\n    var consonant_distance = 0\n    var distance = 0\n \
    \   for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n            vowel_distance = word.count - vowel_index\n\
    \            distance = vowel_distance - consonant_distance\n            if distance\
    \ > 0 {\n                result = char\n            }\n        } else if consonants.contains(char)\
    \ {\n            consonant_index = i\n            consonant_distance = word.count\
    \ - consonant_index\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphgx9e2ll/tmphgx9e2ll.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c9133bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c91032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c91032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c910317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgx9e2ll                        0x0000561d9839b717 <unavailable> + 5911

    5    libc.so.6                          0x00002b8c91527460 __libc_start_main +
    245

    6    tmphgx9e2ll                        0x0000561d9839b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index < closestIndex\
    \ {\n                closestIndex = index\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpkpp0qh5g/tmpkpp0qh5g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fb7d05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fb79fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fb79fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fb79fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkpp0qh5g                        0x000055bd7ff2c7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b0fb7ef1460 __libc_start_main +
    245

    6    tmpkpp0qh5g                        0x000055bd7ff2c419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n    \
    \    let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(char) {\n            result = String(char)\n            break\n\
    \        } else if consonants.contains(char) {\n            break\n        }\n\
    \        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpkledn4dy/tmpkledn4dy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c7a07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c76feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c76fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c76fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkledn4dy                        0x0000563c089e95d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b80c7bf3460 __libc_start_main +
    245

    6    tmpkledn4dy                        0x0000563c089e9219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ vowel = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var wordArray = Array(word)\n    var wordArrayReversed = wordArray.reversed()\n\
    \    var wordArrayReversedString = String(wordArrayReversed)\n    var wordArrayReversedStringArray\
    \ = Array(wordArrayReversedString)\n    var wordArrayReversedStringArrayReversed\
    \ = wordArrayReversedStringArray.reversed()\n    var wordArrayReversedStringArrayReversedString\
    \ = String(wordArrayReversedStringArrayReversed)\n    var wordArrayReversedStringArrayReversedStringArray\
    \ = Array(wordArrayReversedStringArrayReversedString)\n    var wordArrayReversedStringArrayReversedStringArrayReversed\
    \ = wordArrayReversedStringArrayReversedStringArray.reversed()\n    var wordArrayReversedStringArrayReversedStringArrayReversedString\
    \ = String(wordArrayReversedStringArrayReversedStringArrayReversed)\n    var wordArrayReversedStringArrayReversedStringArrayReversedStringArray\
    \ = Array(wordArrayReversedStringArrayReversedStringArrayReversedString)\n   \
    \ var wordArrayReversedStringArrayReversedStringArrayReversedStringArrayReversed\
    \ = wordArrayReversedStringArrayReversedStringArrayReversedStringArray.reversed()\n\
    \    var wordArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedString\
    \ = String(wordArrayReversedStringArrayReversedStringArrayReversedStringArrayReversed)\n\
    \    var wordArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray\
    \ = Array(wordArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedString)\n\
    \    var wordArrayReversedStringArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpj6m41h4l.swift:33:9: error: type annotation missing in pattern\n\
    \    var wordArrayReversedStringArray\n        ^\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closest_vowel = \"\"\n    var distance = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                let\
    \ left_char = word[word.index(word.startIndex, offsetBy: index - 1)]\n       \
    \         let right_char = word[word.index(word.startIndex, offsetBy: index +\
    \ 1)]\n                if !vowels.contains(left_char) && !vowels.contains(right_char)\
    \ {\n                    if index < distance {\n                        distance\
    \ = index\n                        closest_vowel = String(char)\n            \
    \        }\n                }\n            }\n        }\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppa2ib6x3/tmppa2ib6x3.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c18467c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c1815eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c1815e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c1815d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppa2ib6x3                        0x0000557751b297e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b1c18653460 __libc_start_main +
    245

    6    tmppa2ib6x3                        0x0000557751b29429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    for i in word.indices {\n        let char = word[i]\n\
    \        if vowels.contains(char) {\n            if i != word.startIndex {\n \
    \               let prevChar = word[word.index(before: i)]\n                if\
    \ consonants.contains(prevChar) {\n                    if i != word.index(before:\
    \ word.endIndex) {\n                        let nextChar = word[word.index(after:\
    \ i)]\n                        if consonants.contains(nextChar) {\n          \
    \                  result = String(char)\n                            break\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmu4jh9ao/tmpmu4jh9ao.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29afdc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29afac0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29afac0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29afabf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmu4jh9ao                        0x000055b1b4aed847 <unavailable> + 6215

    5    libc.so.6                          0x00002b29affb5460 __libc_start_main +
    245

    6    tmpmu4jh9ao                        0x000055b1b4aed489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = word.count\n    for (index, letter) in word.enumerated()\
    \ {\n        if vowels.contains(String(letter)) {\n            if index > 0 &&\
    \ index < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < closestVowelIndex\
    \ {\n                        closestVowelIndex = index\n                     \
    \   closestVowel = String(letter)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpq6yp5fax/tmpq6yp5fax.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af086e18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af086b0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af086b0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af086b0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6yp5fax                        0x000055ef805c38f7 <unavailable> + 6391

    5    libc.so.6                          0x00002af087004460 __libc_start_main +
    245

    6    tmpq6yp5fax                        0x000055ef805c3539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = 0\n    var consonant_index = 0\n    var vowel_distance\
    \ = 0\n    var consonant_distance = 0\n    var closest_vowel = \"\"\n    for char\
    \ in word.characters {\n        if vowels.containsString(String(char)) {\n   \
    \         vowel_index = word.characters.indexOf(char)!\n            vowel_distance\
    \ = word.characters.count - vowel_index\n        }\n        if consonants.containsString(String(char))\
    \ {\n            consonant_index = word.characters.indexOf(char)!\n          \
    \  consonant_distance = word.characters.count - consonant_index\n            if\
    \ vowel_distance > 0 && consonant_distance > 0 && vowel_distance < consonant_distance\
    \ {\n                closest_vowel = String(char)\n            }\n        }\n\
    \    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpee__e99l.swift:24:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpee__e99l.swift:25:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpee__e99l.swift:26:43: error: value\
    \ of type 'String' has no member 'indexOf'\n            vowel_index = word.characters.indexOf(char)!\n\
    \                          ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpee__e99l.swift:27:35:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ vowel_distance = word.characters.count - vowel_index\n                     \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpee__e99l.swift:29:23: error: value of type 'String' has no member\
    \ 'containsString'\n        if consonants.containsString(String(char)) {\n   \
    \        ~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpee__e99l.swift:30:47: error: value\
    \ of type 'String' has no member 'indexOf'\n            consonant_index = word.characters.indexOf(char)!\n\
    \                              ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpee__e99l.swift:31:39:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ consonant_distance = word.characters.count - consonant_index\n             \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var vowel =\
    \ \"\"\n    var consonant = \"\"\n    var closestVowel = \"\"\n    var closestConsonant\
    \ = \"\"\n    var closestVowelIndex = word.count\n    var closestConsonantIndex\
    \ = word.count\n    var index = word.count - 1\n    while index >= 0 {\n     \
    \   let letter = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(String(letter)) {\n            vowel = String(letter)\n    \
    \        if consonant != \"\" {\n                if index > closestConsonantIndex\
    \ {\n                    closestVowel = vowel\n                    closestConsonant\
    \ = consonant\n                    closestVowelIndex = index\n               \
    \     closestConsonantIndex = closestConsonantIndex\n                }\n     \
    \       }\n        } else if consonants.contains(String(letter)) {\n         \
    \   consonant = String(letter)\n            if vowel != \"\" {\n             \
    \   if index < closestVowelIndex {\n                    closestVowel = vowel\n\
    \                    closestConsonant = consonant\n                    closestVowelIndex\
    \ = index\n                    closestConsonantIndex = closestConsonantIndex\n\
    \                }\n            }\n        }\n        index -= 1\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpq5iwfko5.swift:35:43: error: assigning a variable to itself\n \
    \                   closestConsonantIndex = closestConsonantIndex\n          \
    \          ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq5iwfko5.swift:45:43:\
    \ error: assigning a variable to itself\n                    closestConsonantIndex\
    \ = closestConsonantIndex\n                    ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq5iwfko5.swift:22:9: warning: variable 'closestConsonant' was written\
    \ to, but never read\n    var closestConsonant = \"\"\n        ^\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            var distance = 0\n\
    \            for i in index..<word.count {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n                    break\n                }\n          \
    \      distance += 1\n            }\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp455962tc/tmp455962tc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c714cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c711c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c711c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c711c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp455962tc                        0x0000560339099a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b3c716bb460 __libc_start_main +
    245

    6    tmp455962tc                        0x00005603390996b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowelIndex = 0\n    var consonantIndex = 0\n    var vowel = \"\"\n \
    \   var consonant = \"\"\n    var closestVowel = \"\"\n    var closestVowelIndex\
    \ = 0\n    var closestConsonantIndex = 0\n    for i in 0..<word.count {\n    \
    \    let index = word.index(word.startIndex, offsetBy: i)\n        let char =\
    \ String(word[index])\n        if vowels.contains(char) {\n            vowel =\
    \ char\n            vowelIndex = i\n            if consonantIndex != 0 {\n   \
    \             if vowelIndex - consonantIndex < closestVowelIndex - closestConsonantIndex\
    \ {\n                    closestVowel = vowel\n                    closestVowelIndex\
    \ = vowelIndex\n                    closestConsonantIndex = consonantIndex\n \
    \               }\n            }\n        } else if consonants.contains(char)\
    \ {\n            consonant = char\n            consonantIndex = i\n        }\n\
    \    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpg7xiq8w_/tmpg7xiq8w_.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17cc042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17cbd39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17cbd39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17cbd387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7xiq8w_                        0x00005596ad7f4717 <unavailable> + 5911

    5    libc.so.6                          0x00002b17cc22e460 __libc_start_main +
    245

    6    tmpg7xiq8w_                        0x00005596ad7f4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   let distance = word.count - index\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5242u0wu/tmp5242u0wu.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91d4045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91d3d3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91d3d3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91d3d3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5242u0wu                        0x0000557c7f7bd8d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b91d4231460 __libc_start_main +
    245

    6    tmp5242u0wu                        0x0000557c7f7bd309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(String(char)) {\n            result\
    \ = String(char)\n            break\n        }\n        index -= 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnvh0wd16/tmpnvh0wd16.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0f8054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0f7d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0f7d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0f7d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvh0wd16                        0x000055b51b12f8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ac0f8240460 __libc_start_main +
    245

    6    tmpnvh0wd16                        0x000055b51b12f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var index = 0\n    var foundVowel = false\n    for char in word.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            closestVowel = String(char)\n\
    \            foundVowel = true\n            break\n        }\n        index +=\
    \ 1\n    }\n    if foundVowel {\n        let startIndex = word.index(word.endIndex,\
    \ offsetBy: -index)\n        let endIndex = word.index(word.endIndex, offsetBy:\
    \ -(index - 1))\n        let range = startIndex..<endIndex\n        let substring\
    \ = word[range]\n        if !vowels.contains(String(substring)) {\n          \
    \  return closestVowel\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp9ddumicn/tmp9ddumicn.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b921bbcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b921b8c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b921b8c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b921b8c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ddumicn                        0x000056495eea6b73 <unavailable> + 7027

    5    libc.so.6                          0x00002b921bdba460 __libc_start_main +
    245

    6    tmp9ddumicn                        0x000056495eea65a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowel_index = -1\n   \
    \ for (index, char) in word.lowercased().reversed().enumerated() {\n        if\
    \ vowels.contains(String(char)) {\n            vowel_index = index\n         \
    \   break\n        }\n    }\n    if vowel_index == -1 {\n        return \"\"\n\
    \    }\n    var consonant_index = -1\n    for (index, char) in word.lowercased().reversed().enumerated()\
    \ {\n        if !vowels.contains(String(char)) && index > vowel_index {\n    \
    \        consonant_index = index\n            break\n        }\n    }\n    if\
    \ consonant_index == -1 {\n        return \"\"\n    }\n    return String(word[word.index(word.endIndex,\
    \ offsetBy: -(vowel_index + 1))])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpi_dab6n_/tmpi_dab6n_.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b730f102c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b730edf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b730edf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b730edf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_dab6n_                        0x000055c46088ae4b <unavailable> + 7755

    5    libc.so.6                          0x00002b730f2ee460 __libc_start_main +
    245

    6    tmpi_dab6n_                        0x000055c46088a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestIndex = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   if index > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwwaxe7rl/tmpwwaxe7rl.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2b4cfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2b49f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2b49f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2b49f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwaxe7rl                        0x000055704e2687e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ba2b4ee6460 __libc_start_main +
    245

    6    tmpwwaxe7rl                        0x000055704e268429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowel = char\n        } else if consonants.contains(char) {\n\
    \            if vowel != \"\" {\n                return vowel\n            }\n\
    \        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmptqb7r9xv/tmptqb7r9xv.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4128274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4127f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4127f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4127f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqb7r9xv                        0x000055c303ff8717 <unavailable> + 5911

    5    libc.so.6                          0x00002b4128460460 __libc_start_main +
    245

    6    tmptqb7r9xv                        0x000055c303ff8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelCount = 0\n    var consonantCount = 0\n    var index = 0\n\
    \    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            vowelCount += 1\n            vowelIndex = index\n        }\n\
    \        if consonants.containsString(String(char)) {\n            consonantCount\
    \ += 1\n            consonantIndex = index\n        }\n        index += 1\n  \
    \  }\n    if vowelCount == 0 || consonantCount == 0 {\n        return \"\"\n \
    \   }\n    if vowelCount == 1 && consonantCount == 1 {\n        return \"\"\n\
    \    }\n    if vowelCount == 1 && consonantCount > 1 {\n        if vowelIndex\
    \ > consonantIndex {\n            return \"\"\n        }\n    }\n    if vowelCount\
    \ > 1 && consonantCount == 1 {\n        if consonantIndex > vowelIndex {\n   \
    \         return \"\"\n        }\n    }\n    if vowelCount > 1 && consonantCount\
    \ > 1 {\n        if vowelIndex > consonantIndex {\n            return \"\"\n \
    \       }\n    }\n    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            closestVowel = String(char)\n        }\n        if consonants.containsString(String(char))\
    \ {\n            return closestVowel\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnkr4tle1.swift:25:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpnkr4tle1.swift:26:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpnkr4tle1.swift:30:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpnkr4tle1.swift:57:22: error:\
    \ 'characters' is unavailable: Please use String directly\n    for char in word.characters\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpnkr4tle1.swift:58:19: error: value of type 'String' has\
    \ no member 'containsString'\n        if vowels.containsString(String(char)) {\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpnkr4tle1.swift:61:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = word.count - 1\n    var foundConsonant\
    \ = false\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if foundConsonant {\n            if vowels.contains(char)\
    \ {\n                closestVowel = String(char)\n                break\n    \
    \        }\n        } else {\n            if consonants.contains(char) {\n   \
    \             foundConsonant = true\n            }\n        }\n        index -=\
    \ 1\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0q8kqq0m/tmp0q8kqq0m.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9026e51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9026b48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9026b48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9026b477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q8kqq0m                        0x0000555c527ad7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b902703d460 __libc_start_main +
    245

    6    tmp0q8kqq0m                        0x0000555c527ad219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n  \
    \  var closestIndex = 0\n    var closestDistance = 0\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = String(word[index])\n        if vowels.contains(char) {\n           \
    \ vowelIndex = i\n            if consonantIndex != 0 {\n                let distance\
    \ = vowelIndex - consonantIndex\n                if closestDistance == 0 || distance\
    \ < closestDistance {\n                    closestDistance = distance\n      \
    \              closestIndex = vowelIndex\n                    closestVowel = char\n\
    \                }\n            }\n        } else if consonants.contains(char)\
    \ {\n            consonantIndex = i\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpb12zer1b/tmpb12zer1b.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b183206bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1831d62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1831d62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1831d617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb12zer1b                        0x000055e47084a807 <unavailable> + 6151

    5    libc.so.6                          0x00002b1832257460 __libc_start_main +
    245

    6    tmpb12zer1b                        0x000055e47084a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex\
    \ = 0\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            closestVowel = String(char)\n            closestVowelIndex =\
    \ index\n        }\n        if consonants.contains(char) {\n            closestConsonantIndex\
    \ = index\n            if closestVowelIndex > closestConsonantIndex {\n      \
    \          return closestVowel\n            }\n        }\n    }\n    return \"\
    \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\"\
    ) == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_75642i8/tmp_75642i8.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0093658c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b009334fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b009334f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b009334e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_75642i8                        0x000055ca61334677 <unavailable> + 5751

    5    libc.so.6                          0x00002b0093844460 __libc_start_main +
    245

    6    tmp_75642i8                        0x000055ca613342b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                let prevChar = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if !vowels.contains(String(prevChar))\
    \ && !vowels.contains(String(nextChar)) {\n                    if index < closestIndex\
    \ {\n                        closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppwskoiq6/tmppwskoiq6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e2df4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e2aebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e2aeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e2aea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppwskoiq6                        0x000055fad2fd78f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b78e2fe0460 __libc_start_main +
    245

    6    tmppwskoiq6                        0x000055fad2fd7539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            if index\
    \ > 0 && consonants.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]).lowercased()) {\n                if index < word.count - 1 && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]).lowercased()) {\n                    if index < closestIndex\
    \ {\n                        closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxngrnhag/tmpxngrnhag.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25e3e23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25e3b1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25e3b1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25e3b197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxngrnhag                        0x000055d3d9e58947 <unavailable> + 6471

    5    libc.so.6                          0x00002b25e400f460 __libc_start_main +
    245

    6    tmpxngrnhag                        0x000055d3d9e58589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = -1\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(String(char)) {\n            if index > closestVowelIndex\
    \ {\n                closestVowel = String(char)\n                closestVowelIndex\
    \ = index\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpiru53zjd/tmpiru53zjd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e0c7f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e0c4e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e0c4e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e0c4e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiru53zjd                        0x0000562a9afbb993 <unavailable> + 6547

    5    libc.so.6                          0x00002b7e0c9de460 __libc_start_main +
    245

    6    tmpiru53zjd                        0x0000562a9afbb3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    for i in\
    \ (0..<word.count).reversed() {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelFound = true\n            vowelIndex = i\n        }\n  \
    \      if consonants.contains(char) && vowelFound {\n            consonantFound\
    \ = true\n            consonantIndex = i\n            break\n        }\n    }\n\
    \    if vowelFound && consonantFound {\n        let index = word.index(word.startIndex,\
    \ offsetBy: vowelIndex)\n        closestVowel = String(word[index])\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpajeo2nsd/tmpajeo2nsd.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c5e15fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5de56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5de56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5de557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajeo2nsd                        0x0000560e814ffd3b <unavailable> + 7483

    5    libc.so.6                          0x00002b9c5e34b460 __libc_start_main +
    245

    6    tmpajeo2nsd                        0x0000560e814ff539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) || vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    continue\n                }\n\
    \            }\n            if index < closestIndex {\n                closestIndex\
    \ = index\n                closestVowel = String(char)\n            }\n      \
    \  }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpycrs3bgh/tmpycrs3bgh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeef66fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeef63f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeef63f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeef63f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpycrs3bgh                        0x000055a8426fd8f7 <unavailable> + 6391

    5    libc.so.6                          0x00002aeef68e8460 __libc_start_main +
    245

    6    tmpycrs3bgh                        0x000055a8426fd539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = word.count - 1\n    var isVowel\
    \ = false\n    var isConsonant = false\n    while index >= 0 {\n        if vowels.contains(word[index])\
    \ {\n            isVowel = true\n        } else if consonants.contains(word[index])\
    \ {\n            isConsonant = true\n        }\n        if isVowel && isConsonant\
    \ {\n            closestVowel = String(word[index])\n            break\n     \
    \   }\n        index -= 1\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp8om3p5fu.swift:24:28: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if vowels.contains(word[index])\
    \ {\n                           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp8om3p5fu.swift:26:39: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if consonants.contains(word[index]) {\n                      \
    \                ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp8om3p5fu.swift:30:35: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            closestVowel = String(word[index])\n                            \
    \      ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660013450
