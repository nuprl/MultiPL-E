language: swift
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    for _ in 0..<n {\n        a = b\n        b =\
    \ c\n        c = a + b + c\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpbwhpijgx/tmpbwhpijgx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b032f630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b032f327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b032f327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b032f3267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwhpijgx                        0x000055b7bb87642e <unavailable> + 5166

    5    libc.so.6                          0x00002b032f81c460 __libc_start_main +
    245

    6    tmpbwhpijgx                        0x000055b7bb875fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820969
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpj2kob1ch/tmpj2kob1ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e5f241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5ef38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5ef38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5ef377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2kob1ch                        0x00005620bf2821b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3e5f42d460 __libc_start_main +
    245

    6    tmpj2kob1ch                        0x00005620bf281e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpj2kob1ch/tmpj2kob1ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e5f241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5ef38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5ef38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5ef377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2kob1ch                        0x00005620bf2821b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3e5f42d460 __libc_start_main +
    245

    6    tmpj2kob1ch                        0x00005620bf281e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpj2kob1ch/tmpj2kob1ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e5f241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5ef38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5ef38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5ef377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2kob1ch                        0x00005620bf2821b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3e5f42d460 __libc_start_main +
    245

    6    tmpj2kob1ch                        0x00005620bf281e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 1...n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl3cgl_/tmp_wl3cgl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eae5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eae2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8eae2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8eae2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl3cgl_                        0x000055dfc605b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8eae7b1460 __libc_start_main +
    245

    6    tmp_wl3cgl_                        0x000055dfc605afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpj2kob1ch/tmpj2kob1ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e5f241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5ef38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5ef38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5ef377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2kob1ch                        0x00005620bf2821b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3e5f42d460 __libc_start_main +
    245

    6    tmpj2kob1ch                        0x00005620bf281e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 3 {\n \
    \       return n - 1\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n   \
    \ for _ in 3...n {\n        let d = a + b + c\n        a = b\n        b = c\n\
    \        c = d\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 1...n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl3cgl_/tmp_wl3cgl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eae5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eae2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8eae2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8eae2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl3cgl_                        0x000055dfc605b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8eae7b1460 __libc_start_main +
    245

    6    tmp_wl3cgl_                        0x000055dfc605afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 3...n {\n        let d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    for _ in 0..<n {\n        (a, b, c) = (b, c,\
    \ a + b + c)\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 1...n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl3cgl_/tmp_wl3cgl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eae5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eae2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8eae2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8eae2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl3cgl_                        0x000055dfc605b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8eae7b1460 __libc_start_main +
    245

    6    tmp_wl3cgl_                        0x000055dfc605afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 3 {\n \
    \       return n - 1\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n   \
    \ for _ in 3...n {\n        let d = a + b + c\n        a = b\n        b = c\n\
    \        c = d\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 3...n {\n        let d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Implement\
    \ this function\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpooupbs77/tmpooupbs77.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3bfba2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3bf899b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3bf899988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3bf8987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpooupbs77                        0x00005561d79861b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab3bfd8e460 __libc_start_main +
    245

    6    tmpooupbs77                        0x00005561d7985e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 3...n {\n        let d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ var a = 0\n    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n\
    \        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n \
    \   return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820969
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 2...n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b86662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b86359561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4b86359286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4b8635913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4b86358bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb7dfg2ge                        0x0000562198eb6769 <unavailable> + 5993

    6    tmpb7dfg2ge                        0x0000562198eb6346 <unavailable> + 4934

    7    libc.so.6                          0x00002b4b8684e460 __libc_start_main +
    245

    8    tmpb7dfg2ge                        0x0000562198eb5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    for _ in 1...n {\n        let d = a + b + c\n\
    \        a = b\n        b = c\n        c = d\n    }\n    return a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n <= 1 {\n\
    \        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n  \
    \      return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [0,\
    \ 0, 1]\n    if n <= 2 {\n        return fibfib[n]\n    }\n    for i in 3...n\
    \ {\n        fibfib.append(fibfib[i-1] + fibfib[i-2] + fibfib[i-3])\n    }\n \
    \   return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpj2kob1ch/tmpj2kob1ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e5f241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5ef38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5ef38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5ef377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2kob1ch                        0x00005620bf2821b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3e5f42d460 __libc_start_main +
    245

    6    tmpj2kob1ch                        0x00005620bf281e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpj2kob1ch/tmpj2kob1ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e5f241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5ef38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5ef38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5ef377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2kob1ch                        0x00005620bf2821b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3e5f42d460 __libc_start_main +
    245

    6    tmpj2kob1ch                        0x00005620bf281e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpj2kob1ch/tmpj2kob1ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e5f241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5ef38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5ef38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5ef377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2kob1ch                        0x00005620bf2821b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3e5f42d460 __libc_start_main +
    245

    6    tmpj2kob1ch                        0x00005620bf281e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Implement\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpkb_1ttzc/tmpkb_1ttzc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae921690c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae921387b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae921387988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9213867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkb_1ttzc                        0x0000556fbfc331b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ae92187c460 __libc_start_main +
    245

    6    tmpkb_1ttzc                        0x0000556fbfc32e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820969
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpwxtg1qt5/tmpwxtg1qt5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a69bb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a698aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a698ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a698ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxtg1qt5                        0x00005580921ff233 <unavailable> + 4659

    5    libc.so.6                          0x00002b3a69da3460 __libc_start_main +
    245

    6    tmpwxtg1qt5                        0x00005580921fee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 1...n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl3cgl_/tmp_wl3cgl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eae5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eae2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8eae2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8eae2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl3cgl_                        0x000055dfc605b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8eae7b1460 __libc_start_main +
    245

    6    tmp_wl3cgl_                        0x000055dfc605afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpj2kob1ch/tmpj2kob1ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e5f241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5ef38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5ef38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5ef377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2kob1ch                        0x00005620bf2821b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3e5f42d460 __libc_start_main +
    245

    6    tmpj2kob1ch                        0x00005620bf281e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 3...n {\n        (a, b, c) = (b, c, a + b + c)\n    }\n    return c\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820969
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820969
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    for _ in 1..<n {\n        let d = a + b + c\n\
    \        a = b\n        b = c\n        c = d\n    }\n    return c\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmph53xesxu/tmph53xesxu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15c22d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15c1fccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15c1fcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15c1fcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph53xesxu                        0x000056411ffa23b3 <unavailable> + 5043

    5    libc.so.6                          0x00002b15c24c1460 __libc_start_main +
    245

    6    tmph53xesxu                        0x000056411ffa1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 1...n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl3cgl_/tmp_wl3cgl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eae5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eae2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8eae2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8eae2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl3cgl_                        0x000055dfc605b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8eae7b1460 __libc_start_main +
    245

    6    tmp_wl3cgl_                        0x000055dfc605afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpj2kob1ch/tmpj2kob1ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e5f241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5ef38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5ef38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5ef377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2kob1ch                        0x00005620bf2821b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3e5f42d460 __libc_start_main +
    245

    6    tmpj2kob1ch                        0x00005620bf281e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    }\n    var a =\
    \ 0\n    var b = 0\n    var c = 1\n    var d = 0\n    for _ in 3...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    for _ in 0..<n {\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpucy5m65c/tmpucy5m65c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b020659cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0206293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0206293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02062927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucy5m65c                        0x000055cac2fda338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0206788460 __libc_start_main +
    245

    6    tmpucy5m65c                        0x000055cac2fd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820969
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820905
