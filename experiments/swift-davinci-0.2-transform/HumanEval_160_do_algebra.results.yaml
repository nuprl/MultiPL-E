language: swift
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for (i,\
    \ op) in operator.enumerated() {\n        switch op {\n        case \"+\":\n \
    \           result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpd0ozryt3.swift:22:20: error: expected Sequence expression for for-each\
    \ loop\n    for (i, op) in operator.enumerated() {\n                   ^\n/tmp/tmpd0ozryt3.swift:22:20:\
    \ error: expected '{' to start the body of for-each loop\n    for (i, op) in operator.enumerated()\
    \ {\n                   ^\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            return 0\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpr4t4w99u.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpr4t4w99u.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpr4t4w99u.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpr4t4w99u.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            return 0\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpr4t4w99u.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpr4t4w99u.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpr4t4w99u.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpr4t4w99u.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            print(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpctrfogia.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpctrfogia.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpctrfogia.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpctrfogia.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for (index,\
    \ op) in operator.enumerated() {\n        switch op {\n        case \"+\":\n \
    \           result += operand[index + 1]\n        case \"-\":\n            result\
    \ -= operand[index + 1]\n        case \"*\":\n            result *= operand[index\
    \ + 1]\n        case \"//\":\n            result /= operand[index + 1]\n     \
    \   case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgex9y6gm.swift:22:24: error: expected Sequence expression for for-each\
    \ loop\n    for (index, op) in operator.enumerated() {\n                     \
    \  ^\n/tmp/tmpgex9y6gm.swift:22:24: error: expected '{' to start the body of for-each\
    \ loop\n    for (index, op) in operator.enumerated() {\n                     \
    \  ^\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            print(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpctrfogia.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpctrfogia.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpctrfogia.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpctrfogia.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            print(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpctrfogia.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpctrfogia.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpctrfogia.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpctrfogia.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for (index,\
    \ op) in operator.enumerated() {\n        switch op {\n        case \"+\":\n \
    \           result += operand[index + 1]\n        case \"-\":\n            result\
    \ -= operand[index + 1]\n        case \"*\":\n            result *= operand[index\
    \ + 1]\n        case \"//\":\n            result /= operand[index + 1]\n     \
    \   case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgex9y6gm.swift:22:24: error: expected Sequence expression for for-each\
    \ loop\n    for (index, op) in operator.enumerated() {\n                     \
    \  ^\n/tmp/tmpgex9y6gm.swift:22:24: error: expected '{' to start the body of for-each\
    \ loop\n    for (index, op) in operator.enumerated() {\n                     \
    \  ^\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            print(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpctrfogia.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpctrfogia.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpctrfogia.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpctrfogia.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            result = 0\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfknsfo2r.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpfknsfo2r.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpfknsfo2r.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpfknsfo2r.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpha8w04io.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpha8w04io.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpha8w04io.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpha8w04io.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012185
