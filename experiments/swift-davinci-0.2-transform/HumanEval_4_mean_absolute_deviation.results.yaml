language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_9hb_vw.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpt_9hb_vw.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_arithmetic(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_g55n_98.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_g55n_98.swift:12:12: error: cannot find 'mean_arithmetic' in scope\n\
    \    return mean_arithmetic(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_9hb_vw.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpt_9hb_vw.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var sum_of_absolute_deviations\
    \ = 0.0\n    for number in numbers {\n        sum_of_absolute_deviations += abs(number\
    \ - mean)\n    }\n    return sum_of_absolute_deviations / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpeuv6sffg.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n \
    \   let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824807
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_9hb_vw.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpt_9hb_vw.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_9hb_vw.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpt_9hb_vw.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpieuon8h9.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_9hb_vw.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpt_9hb_vw.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3babaffb.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmp3babaffb.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpieuon8h9.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_9hb_vw.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpt_9hb_vw.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcknyr1n6.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpcknyr1n6.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let abs_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: abs_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4n06rmlt.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp4n06rmlt.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: abs_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var sum_of_absolute_differences\
    \ = 0.0\n    for number in numbers {\n        sum_of_absolute_differences += abs(number\
    \ - mean)\n    }\n    return sum_of_absolute_differences / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprq1497uo.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_9hb_vw.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpt_9hb_vw.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_9hb_vw.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpt_9hb_vw.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3babaffb.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmp3babaffb.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhcnine.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3zhcnine.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_9hb_vw.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpt_9hb_vw.swift:12:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebnzjls1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpebnzjls1.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp__1j7d72.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp__1j7d72.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_ppg6331.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_ppg6331.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprhaf9hz8.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmprhaf9hz8.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824806
