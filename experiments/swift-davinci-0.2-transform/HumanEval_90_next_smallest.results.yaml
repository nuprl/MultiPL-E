language: swift
name: HumanEval_90_next_smallest
results:
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphk82lml2/tmphk82lml2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e9b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e9878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e9878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e98777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk82lml2                        0x000055f4cca7a8ba <unavailable> + 6330

    5    libc.so.6                          0x00002ae8e9d6d460 __libc_start_main +
    245

    6    tmphk82lml2                        0x000055f4cca7a0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n       \
    \ min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphktfqte7/tmphktfqte7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae514aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae51479eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae51479e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae51479d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphktfqte7                        0x000055f149e559aa <unavailable> + 6570

    5    libc.so.6                          0x00002ae514c93460 __libc_start_main +
    245

    6    tmphktfqte7                        0x000055f149e551a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9g4o2upm/tmp9g4o2upm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89e4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89e1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89e1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89e1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4o2upm                        0x000056535a7ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba89e6b7460 __libc_start_main +
    245

    6    tmp9g4o2upm                        0x000056535a7ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    let\
    \ sorted = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpxmpx9f02/tmpxmpx9f02.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b990f615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b990f30cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b990f30c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b990f30b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxmpx9f02                        0x000055be41bf58ba <unavailable> + 6330

    5    libc.so.6                          0x00002b990f801460 __libc_start_main +
    245

    6    tmpxmpx9f02                        0x000055be41bf50b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjirm9lx9/tmpjirm9lx9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4faf23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4fac1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4fac1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4fac197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjirm9lx9                        0x00005582b771f8da <unavailable> + 6362

    5    libc.so.6                          0x00002ad4fb10f460 __libc_start_main +
    245

    6    tmpjirm9lx9                        0x00005582b771f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var previous = sorted[0]\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] != previous {\n            return sorted[i]\n      \
    \  }\n        previous = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = lst[0]\n    var secondMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin && i != min {\n            secondMin =\
    \ i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b482043ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4820131561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4820131286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b482013113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4820130bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b481ff30e83 <unavailable> + 188035

    6    tmpwqo3kw4b                        0x00005612648c1e12 <unavailable> + 7698

    7    tmpwqo3kw4b                        0x00005612648c1768 <unavailable> + 5992

    8    libc.so.6                          0x00002b4820626460 __libc_start_main +
    245

    9    tmpwqo3kw4b                        0x00005612648c1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var lst =\
    \ lst\n    lst.sort()\n    for i in 1..<lst.count {\n        if lst[i] != lst[i-1]\
    \ {\n            return lst[i]\n        }\n    }\n    return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for num in lst {\n        if\
    \ num < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = num\n        } else if num < secondSmallest && num != smallest {\n       \
    \     secondSmallest = num\n        }\n    }\n    return secondSmallest == Int.max\
    \ ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        smallest = lst[1]\n        secondSmallest = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uur5_jx/tmp9uur5_jx.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3fe571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3fe268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3fe268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3fe2677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uur5_jx                        0x0000559a355ac9aa <unavailable> + 6570

    5    libc.so.6                          0x00002af3fe75d460 __libc_start_main +
    245

    6    tmp9uur5_jx                        0x0000559a355ac1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return smallest == secondSmallest\
    \ ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpu1k5es0l/tmpu1k5es0l.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ad821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62ad518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62ad518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62ad5177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1k5es0l                        0x000055b61de097c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b62ada0d460 __libc_start_main +
    245

    6    tmpu1k5es0l                        0x000055b61de091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i <\
    \ min {\n            secondMin = min\n            min = i\n        } else if i\
    \ < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5vb4s5iu/tmp5vb4s5iu.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019d919c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019d610b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019d610988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019d60f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vb4s5iu                        0x000055d7133da601 <unavailable> + 5633

    5    libc.so.6                          0x00002b019db05460 __libc_start_main +
    245

    6    tmp5vb4s5iu                        0x000055d7133da189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n       \
    \ min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphktfqte7/tmphktfqte7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae514aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae51479eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae51479e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae51479d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphktfqte7                        0x000055f149e559aa <unavailable> + 6570

    5    libc.so.6                          0x00002ae514c93460 __libc_start_main +
    245

    6    tmphktfqte7                        0x000055f149e551a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 0..<sorted.count-1 {\n        if sorted[i] != sorted[i+1]\
    \ {\n            return sorted[i+1]\n        }\n    }\n    return nil\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        smallest = lst[1]\n        secondSmallest = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgom7juat/tmpgom7juat.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b9fcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b9f9b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b9f9b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b9f9b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgom7juat                        0x000055d744e609aa <unavailable> + 6570

    5    libc.so.6                          0x00002b9b9fea7460 __libc_start_main +
    245

    6    tmpgom7juat                        0x000055d744e601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        (smallest, secondSmallest) = (secondSmallest, smallest)\n    }\n\
    \    for i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp2pd07w1r/tmp2pd07w1r.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06b7cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06b79a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06b79a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06b79a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pd07w1r                        0x00005642269c99aa <unavailable> + 6570

    5    libc.so.6                          0x00002b06b7e98460 __libc_start_main +
    245

    6    tmp2pd07w1r                        0x00005642269c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpu1k5es0l/tmpu1k5es0l.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ad821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62ad518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62ad518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62ad5177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1k5es0l                        0x000055b61de097c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b62ada0d460 __libc_start_main +
    245

    6    tmpu1k5es0l                        0x000055b61de091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ min == nextMin ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var lst =\
    \ lst\n    lst.sort()\n    var prev = lst[0]\n    for i in 1..<lst.count {\n \
    \       if lst[i] != prev {\n            return lst[i]\n        }\n        prev\
    \ = lst[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var smallest = sorted[0]\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] > smallest {\n            return sorted[i]\n       \
    \ }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return min == secondMin ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpe5fgcyv5/tmpe5fgcyv5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba21e051c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba21dd48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba21dd48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba21dd477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5fgcyv5                        0x000055fa55a737c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba21e23d460 __libc_start_main +
    245

    6    tmpe5fgcyv5                        0x000055fa55a731a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var min2 = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            min2 = min\n            min = lst[i]\n        } else if\
    \ lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpf1dod3c4/tmpf1dod3c4.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6873d9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6873a91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6873a91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6873a907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1dod3c4                        0x000055794f4497c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b6873f86460 __libc_start_main +
    245

    6    tmpf1dod3c4                        0x000055794f4491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i > prev {\n            return i\n        }\n        prev = i\n  \
    \  }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return min == secondMin ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpe5fgcyv5/tmpe5fgcyv5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba21e051c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba21dd48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba21dd48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba21dd477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5fgcyv5                        0x000055fa55a737c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba21e23d460 __libc_start_main +
    245

    6    tmpe5fgcyv5                        0x000055fa55a731a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            nextMin = min\n            min = lst[i]\n      \
    \  } else if lst[i] < nextMin && lst[i] != min {\n            nextMin = lst[i]\n\
    \        }\n    }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n       \
    \ min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphktfqte7/tmphktfqte7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae514aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae51479eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae51479e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae51479d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphktfqte7                        0x000055f149e559aa <unavailable> + 6570

    5    libc.so.6                          0x00002ae514c93460 __libc_start_main +
    245

    6    tmphktfqte7                        0x000055f149e551a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n       \
    \ min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphktfqte7/tmphktfqte7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae514aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae51479eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae51479e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae51479d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphktfqte7                        0x000055f149e559aa <unavailable> + 6570

    5    libc.so.6                          0x00002ae514c93460 __libc_start_main +
    245

    6    tmphktfqte7                        0x000055f149e551a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var min2 = lst[1]\n    if min > min2 {\n        min = min2\n\
    \        min2 = lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            min2 = min\n            min = lst[i]\n        } else if\
    \ lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpe3u3d73t/tmpe3u3d73t.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab42d5f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab42d2eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab42d2ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab42d2ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3u3d73t                        0x0000563d967869aa <unavailable> + 6570

    5    libc.so.6                          0x00002ab42d7e3460 __libc_start_main +
    245

    6    tmpe3u3d73t                        0x0000563d967861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var previous = sorted.removeFirst()\n    for element in\
    \ sorted {\n        if element != previous {\n            return element\n   \
    \     }\n        previous = element\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_r9n7q78/tmp_r9n7q78.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19a4439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19a4130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19a4130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19a412f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_r9n7q78                        0x000056313d410601 <unavailable> + 5633

    5    libc.so.6                          0x00002b19a4625460 __libc_start_main +
    245

    6    tmp_r9n7q78                        0x000056313d410189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi171y41g/tmpi171y41g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2d276c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d2cf6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d2cf6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d2cf6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi171y41g                        0x000055bd1690b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5d2d462460 __libc_start_main +
    245

    6    tmpi171y41g                        0x000055bd1690b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for num in sorted {\n\
    \        if num != last {\n            return num\n        }\n        last = num\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] !=\
    \ sorted[i + 1] {\n            return sorted[i + 1]\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjirm9lx9/tmpjirm9lx9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4faf23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4fac1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4fac1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4fac197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjirm9lx9                        0x00005582b771f8da <unavailable> + 6362

    5    libc.so.6                          0x00002ad4fb10f460 __libc_start_main +
    245

    6    tmpjirm9lx9                        0x00005582b771f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var min2 = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            min2 = min\n            min = lst[i]\n        } else if\
    \ lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpfuqaq37a/tmpfuqaq37a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f3fc9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f3f993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f3f993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f3f9927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfuqaq37a                        0x0000556451ad09aa <unavailable> + 6570

    5    libc.so.6                          0x00002b0f3fe88460 __libc_start_main +
    245

    6    tmpfuqaq37a                        0x0000556451ad01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpu1k5es0l/tmpu1k5es0l.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ad821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62ad518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62ad518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62ad5177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1k5es0l                        0x000055b61de097c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b62ada0d460 __libc_start_main +
    245

    6    tmpu1k5es0l                        0x000055b61de091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min1 = lst[0]\n    var min2 = lst[1]\n    if min1 > min2 {\n        min1 = lst[1]\n\
    \        min2 = lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min1 {\n            min2 = min1\n            min1 = lst[i]\n        } else\
    \ if lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return\
    \ min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpt_zqqqza/tmpt_zqqqza.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe4b675c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4b36cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4b36c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4b36b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_zqqqza                        0x000055d3339289aa <unavailable> + 6570

    5    libc.so.6                          0x00002afe4b861460 __libc_start_main +
    245

    6    tmpt_zqqqza                        0x000055d3339281a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ sorted = lst.sorted()\n    var smallest = sorted[0]\n    var secondSmallest\
    \ = sorted[1]\n    for i in 2..<sorted.count {\n        if sorted[i] != smallest\
    \ {\n            secondSmallest = sorted[i]\n            break\n        }\n  \
    \  }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uupzrpi/tmp9uupzrpi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada8debbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada8dbb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada8dbb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada8dbb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uupzrpi                        0x0000560b563046c1 <unavailable> + 5825

    5    libc.so.6                          0x00002ada8e0a7460 __libc_start_main +
    245

    6    tmp9uupzrpi                        0x0000560b56304249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var lst =\
    \ lst\n    lst.sort()\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] > smallest {\n            secondSmallest\
    \ = lst[i]\n            break\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpj9khk2l0/tmpj9khk2l0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6b618ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6b5e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6b5e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6b5e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj9khk2l0                        0x000055edb578d741 <unavailable> + 5953

    5    libc.so.6                          0x00002ac6b6376460 __libc_start_main +
    245

    6    tmpj9khk2l0                        0x000055edb578d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9g4o2upm/tmp9g4o2upm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89e4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89e1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89e1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89e1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4o2upm                        0x000056535a7ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba89e6b7460 __libc_start_main +
    245

    6    tmp9g4o2upm                        0x000056535a7ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var min2 = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            min2 = min\n            min = lst[i]\n        }\
    \ else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return\
    \ min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsxf6y87g/tmpsxf6y87g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc0d3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc0a35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc0a35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc0a347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxf6y87g                        0x0000563890e907c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b4cc0f2a460 __libc_start_main +
    245

    6    tmpsxf6y87g                        0x0000563890e901a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9g4o2upm/tmp9g4o2upm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89e4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89e1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89e1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89e1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4o2upm                        0x000056535a7ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba89e6b7460 __libc_start_main +
    245

    6    tmp9g4o2upm                        0x000056535a7ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    guard sorted[0] != sorted[1] else { return nil }\n    return\
    \ sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphk82lml2/tmphk82lml2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e9b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e9878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e9878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e98777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk82lml2                        0x000055f4cca7a8ba <unavailable> + 6330

    5    libc.so.6                          0x00002ae8e9d6d460 __libc_start_main +
    245

    6    tmphk82lml2                        0x000055f4cca7a0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var nextSmallest = lst[1]\n    for i in 1..<lst.count {\n    \
    \    if lst[i] < smallest {\n            nextSmallest = smallest\n           \
    \ smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n            nextSmallest\
    \ = lst[i]\n        }\n    }\n    return nextSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb2c6fjrg/tmpb2c6fjrg.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f4b1dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f4aed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f4aed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f4aed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2c6fjrg                        0x000055aaba64c9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1f4b3c7460 __libc_start_main +
    245

    6    tmpb2c6fjrg                        0x000055aaba64c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n        if i < min\
    \ {\n            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpncw04uzc/tmpncw04uzc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9f6665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9f635cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9f635c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9f635b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpncw04uzc                        0x000055639ddf3601 <unavailable> + 5633

    5    libc.so.6                          0x00002ac9f6851460 __libc_start_main +
    245

    6    tmpncw04uzc                        0x000055639ddf3189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var second = Int.max\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            second = min\n            min = lst[i]\n        } else\
    \ if lst[i] < second {\n            second = lst[i]\n        }\n    }\n    return\
    \ second == Int.max ? nil : second\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpchionhos/tmpchionhos.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e1ff5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e1fc54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e1fc54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e1fc537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchionhos                        0x000055eb205519aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7e20149460 __libc_start_main +
    245

    6    tmpchionhos                        0x000055eb205511a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeh8hf42v/tmpeh8hf42v.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69cb4e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69cb1dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69cb1da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69cb1d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeh8hf42v                        0x000055ea962109aa <unavailable> + 6570

    5    libc.so.6                          0x00002b69cb6cf460 __libc_start_main +
    245

    6    tmpeh8hf42v                        0x000055ea962101a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var lst =\
    \ lst\n    lst.sort()\n    var prev = lst[0]\n    for i in 1..<lst.count {\n \
    \       if lst[i] != prev {\n            return lst[i]\n        }\n        prev\
    \ = lst[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var smallest = sorted.removeFirst()\n    while !sorted.isEmpty\
    \ {\n        let next = sorted.removeFirst()\n        if next != smallest {\n\
    \            return next\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphk82lml2/tmphk82lml2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e9b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e9878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e9878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e98777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk82lml2                        0x000055f4cca7a8ba <unavailable> + 6330

    5    libc.so.6                          0x00002ae8e9d6d460 __libc_start_main +
    245

    6    tmphk82lml2                        0x000055f4cca7a0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeh8hf42v/tmpeh8hf42v.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69cb4e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69cb1dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69cb1da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69cb1d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeh8hf42v                        0x000055ea962109aa <unavailable> + 6570

    5    libc.so.6                          0x00002b69cb6cf460 __libc_start_main +
    245

    6    tmpeh8hf42v                        0x000055ea962101a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n     \
    \   if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp55ulg16t/tmp55ulg16t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba300a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba300765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba300765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3007647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55ulg16t                        0x000055d10d5c39aa <unavailable> + 6570

    5    libc.so.6                          0x00002ba300c5a460 __libc_start_main +
    245

    6    tmp55ulg16t                        0x000055d10d5c31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i <\
    \ min {\n            secondMin = min\n            min = i\n        } else if i\
    \ < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5vb4s5iu/tmp5vb4s5iu.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019d919c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019d610b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019d610988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019d60f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vb4s5iu                        0x000055d7133da601 <unavailable> + 5633

    5    libc.so.6                          0x00002b019db05460 __libc_start_main +
    245

    6    tmp5vb4s5iu                        0x000055d7133da189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return min == secondMin ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpe5fgcyv5/tmpe5fgcyv5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba21e051c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba21dd48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba21dd48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba21dd477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5fgcyv5                        0x000055fa55a737c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba21e23d460 __libc_start_main +
    245

    6    tmpe5fgcyv5                        0x000055fa55a731a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    if sorted[0] == sorted[1] {\n        return nil\n    }\n\
    \    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    for num in sorted {\n\
    \        if num != prev {\n            return num\n        }\n        prev = num\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var second_smallest = lst[1]\n    if smallest > second_smallest\
    \ {\n        smallest = lst[1]\n        second_smallest = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < smallest {\n            second_smallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < second_smallest\
    \ {\n            second_smallest = lst[i]\n        }\n    }\n    return second_smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpmv9_uxe4/tmpmv9_uxe4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba85c338c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba85c02fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba85c02f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba85c02e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmv9_uxe4                        0x000055bd7741a9aa <unavailable> + 6570

    5    libc.so.6                          0x00002ba85c524460 __libc_start_main +
    245

    6    tmpmv9_uxe4                        0x000055bd7741a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var previous = sorted.removeFirst()\n    while let next\
    \ = sorted.first {\n        if next != previous {\n            return next\n \
    \       }\n        previous = sorted.removeFirst()\n    }\n    return nil\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var lst = lst\n    lst.sort()\n    var last: Int? = nil\n\
    \    for i in lst {\n        if i != last {\n            if last != nil {\n  \
    \              return last\n            }\n            last = i\n        }\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpz8_m1isr/tmpz8_m1isr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80314d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80311c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80311c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80311c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz8_m1isr                        0x0000561c80c07671 <unavailable> + 5745

    5    libc.so.6                          0x00002b80316bc460 __libc_start_main +
    245

    6    tmpz8_m1isr                        0x0000561c80c071f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = Int.max\n    var nextMin = Int.max\n    for\
    \ num in lst {\n        if num < min {\n            nextMin = min\n          \
    \  min = num\n        } else if num < nextMin {\n            nextMin = num\n \
    \       }\n    }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgis3870w/tmpgis3870w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94219aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94216a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94216a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94216a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgis3870w                        0x0000562ac64288da <unavailable> + 6362

    5    libc.so.6                          0x00002b9421b96460 __libc_start_main +
    245

    6    tmpgis3870w                        0x0000562ac64280d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjirm9lx9/tmpjirm9lx9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4faf23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4fac1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4fac1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4fac197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjirm9lx9                        0x00005582b771f8da <unavailable> + 6362

    5    libc.so.6                          0x00002ad4fb10f460 __libc_start_main +
    245

    6    tmpjirm9lx9                        0x00005582b771f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphk82lml2/tmphk82lml2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e9b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e9878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e9878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e98777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk82lml2                        0x000055f4cca7a8ba <unavailable> + 6330

    5    libc.so.6                          0x00002ae8e9d6d460 __libc_start_main +
    245

    6    tmphk82lml2                        0x000055f4cca7a0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var smallest = sorted[0]\n    var secondSmallest: Int?\n\
    \    for i in 1..<sorted.count {\n        if sorted[i] == smallest {\n       \
    \     continue\n        }\n        secondSmallest = sorted[i]\n        break\n\
    \    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var min2 = lst[1]\n    if min > min2 {\n        min = min2\n\
    \        min2 = lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            min2 = min\n            min = lst[i]\n        } else if\
    \ lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpe3u3d73t/tmpe3u3d73t.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab42d5f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab42d2eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab42d2ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab42d2ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3u3d73t                        0x0000563d967869aa <unavailable> + 6570

    5    libc.so.6                          0x00002ab42d7e3460 __libc_start_main +
    245

    6    tmpe3u3d73t                        0x0000563d967861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    for num in sorted {\n\
    \        if num != prev {\n            return num\n        }\n        prev = num\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var sorted = lst.sorted()\n    var smallest = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != smallest {\n            return i\n   \
    \     }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002ac77062ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac770325561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac770325286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac77032513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac770324bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac770314ff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmpr4blfswb                        0x000055c2fa003f4e <unavailable> + 8014

    7    tmpr4blfswb                        0x000055c2fa003858 <unavailable> + 6232

    8    libc.so.6                          0x00002ac77081a460 __libc_start_main +
    245

    9    tmpr4blfswb                        0x000055c2fa003219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    while !sorted.isEmpty\
    \ {\n        let next = sorted.removeFirst()\n        if next != prev {\n    \
    \        return next\n        }\n        prev = next\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var smallest = sorted.removeFirst()\n    while sorted.count\
    \ > 0 {\n        let next = sorted.removeFirst()\n        if next != smallest\
    \ {\n            return next\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    for num in sorted {\n\
    \        if num != prev {\n            return num\n        }\n        prev = num\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphmyl18mx/tmphmyl18mx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6363ecbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6363bc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6363bc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6363bc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphmyl18mx                        0x0000557dca6ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b63640b7460 __libc_start_main +
    245

    6    tmphmyl18mx                        0x0000557dca6ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeh8hf42v/tmpeh8hf42v.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69cb4e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69cb1dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69cb1da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69cb1d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeh8hf42v                        0x000055ea962109aa <unavailable> + 6570

    5    libc.so.6                          0x00002b69cb6cf460 __libc_start_main +
    245

    6    tmpeh8hf42v                        0x000055ea962101a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpxo4df9ok/tmpxo4df9ok.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade6bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade6b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade6b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade6b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxo4df9ok                        0x00005562ddd549aa <unavailable> + 6570

    5    libc.so.6                          0x00002ade6bce9460 __libc_start_main +
    245

    6    tmpxo4df9ok                        0x00005562ddd541a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var sorted = lst.sorted()\n    var smallest = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i > smallest {\n            return i\n    \
    \    }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b37e9a9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37e9794561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b37e9794286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b37e979413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b37e9793bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b37e9783ff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmp8c0wrss_                        0x000056368eca9f4e <unavailable> + 8014

    7    tmp8c0wrss_                        0x000056368eca9858 <unavailable> + 6232

    8    libc.so.6                          0x00002b37e9c89460 __libc_start_main +
    245

    9    tmp8c0wrss_                        0x000056368eca9219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_r9n7q78/tmp_r9n7q78.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19a4439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19a4130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19a4130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19a412f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_r9n7q78                        0x000056313d410601 <unavailable> + 5633

    5    libc.so.6                          0x00002b19a4625460 __libc_start_main +
    245

    6    tmp_r9n7q78                        0x000056313d410189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpl53osxoa/tmpl53osxoa.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a06bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a03b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a03b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a03b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl53osxoa                        0x0000559b4cf489aa <unavailable> + 6570

    5    libc.so.6                          0x00002ba2a08a9460 __libc_start_main +
    245

    6    tmpl53osxoa                        0x0000559b4cf481a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    while !sorted.isEmpty\
    \ {\n        let next = sorted.removeFirst()\n        if next != prev {\n    \
    \        return next\n        }\n        prev = next\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi171y41g/tmpi171y41g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2d276c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d2cf6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d2cf6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d2cf6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi171y41g                        0x000055bd1690b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5d2d462460 __libc_start_main +
    245

    6    tmpi171y41g                        0x000055bd1690b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9g4o2upm/tmp9g4o2upm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89e4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89e1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89e1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89e1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4o2upm                        0x000056535a7ed7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba89e6b7460 __libc_start_main +
    245

    6    tmp9g4o2upm                        0x000056535a7ed1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcxxjconb/tmpcxxjconb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a8059cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a80293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a80293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a802927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxxjconb                        0x0000558a5c5013e1 <unavailable> + 5089

    5    libc.so.6                          0x00002b9a80788460 __libc_start_main +
    245

    6    tmpcxxjconb                        0x0000558a5c500f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        (smallest, secondSmallest) = (secondSmallest, smallest)\n    }\n\
    \    for i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp2pd07w1r/tmp2pd07w1r.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06b7cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06b79a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06b79a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06b79a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pd07w1r                        0x00005642269c99aa <unavailable> + 6570

    5    libc.so.6                          0x00002b06b7e98460 __libc_start_main +
    245

    6    tmp2pd07w1r                        0x00005642269c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpl53osxoa/tmpl53osxoa.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a06bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a03b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a03b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a03b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl53osxoa                        0x0000559b4cf489aa <unavailable> + 6570

    5    libc.so.6                          0x00002ba2a08a9460 __libc_start_main +
    245

    6    tmpl53osxoa                        0x0000559b4cf481a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var lst = lst\n    lst.sort()\n    var smallest = lst[0]\n\
    \    for i in lst {\n        if i > smallest {\n            return i\n       \
    \ }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5cfaf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5cf7ed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac5cf7ed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac5cf7ed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac5cf7ecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac5cf5ece83 <unavailable> + 188035

    6    tmpamoom3k_                        0x0000562b4db7ff7c <unavailable> + 8060

    7    tmpamoom3k_                        0x0000562b4db7f888 <unavailable> + 6280

    8    libc.so.6                          0x00002ac5cfce2460 __libc_start_main +
    245

    9    tmpamoom3k_                        0x0000562b4db7f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqcybkuep/tmpqcybkuep.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e1cc66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e1c95db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e1c95d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e1c95c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcybkuep                        0x00005555d8ef79aa <unavailable> + 6570

    5    libc.so.6                          0x00002b0e1ce52460 __libc_start_main +
    245

    6    tmpqcybkuep                        0x00005555d8ef71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpxo4df9ok/tmpxo4df9ok.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade6bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade6b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade6b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade6b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxo4df9ok                        0x00005562ddd549aa <unavailable> + 6570

    5    libc.so.6                          0x00002ade6bce9460 __libc_start_main +
    245

    6    tmpxo4df9ok                        0x00005562ddd541a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != prev {\n            return i\n        }\n        prev = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpvj3sh58j/tmpvj3sh58j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7653af3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76537eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76537ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76537e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvj3sh58j                        0x000056070171d9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7653cdf460 __libc_start_main +
    245

    6    tmpvj3sh58j                        0x000056070171d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for num in lst {\n        if\
    \ num < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = num\n        } else if num < secondSmallest {\n            secondSmallest\
    \ = num\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpbypp55mi/tmpbypp55mi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefd863bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefd8332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefd8332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefd83317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbypp55mi                        0x000056514b24492a <unavailable> + 6442

    5    libc.so.6                          0x00002aefd8827460 __libc_start_main +
    245

    6    tmpbypp55mi                        0x000056514b244129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] !=\
    \ sorted[i + 1] {\n            return sorted[i + 1]\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var min2 = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            min2 = min\n            min = lst[i]\n        } else if\
    \ lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min\
    \ == min2 ? nil : min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var second_min = lst[1]\n    if min > second_min {\n        min\
    \ = lst[1]\n        second_min = lst[0]\n    }\n    for i in 2..<lst.count {\n\
    \        if lst[i] < min {\n            second_min = min\n            min = lst[i]\n\
    \        } else if lst[i] < second_min {\n            second_min = lst[i]\n  \
    \      }\n    }\n    return second_min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpv63lbi03/tmpv63lbi03.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91c3cd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91c39cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91c39cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91c39ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv63lbi03                        0x000055a322b4f9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b91c3ec0460 __libc_start_main +
    245

    6    tmpv63lbi03                        0x000055a322b4f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        (min,\
    \ secondMin) = (secondMin, min)\n    }\n    for i in 2..<lst.count {\n       \
    \ if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < secondMin {\n            secondMin = lst[i]\n     \
    \   }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp61ba5126/tmp61ba5126.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6c3f4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6c3c46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6c3c46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6c3c457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61ba5126                        0x0000563c1e9b79aa <unavailable> + 6570

    5    libc.so.6                          0x00002ac6c413b460 __libc_start_main +
    245

    6    tmp61ba5126                        0x0000563c1e9b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjirm9lx9/tmpjirm9lx9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4faf23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4fac1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4fac1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4fac197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjirm9lx9                        0x00005582b771f8da <unavailable> + 6362

    5    libc.so.6                          0x00002ad4fb10f460 __libc_start_main +
    245

    6    tmpjirm9lx9                        0x00005582b771f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest && i != smallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return smallest == secondSmallest\
    \ ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpu6lg47l7/tmpu6lg47l7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeecaef9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeecabf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeecabf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeecabef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu6lg47l7                        0x0000555fe93c67c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aeecb0e5460 __libc_start_main +
    245

    6    tmpu6lg47l7                        0x0000555fe93c61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_r9n7q78/tmp_r9n7q78.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19a4439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19a4130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19a4130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19a412f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_r9n7q78                        0x000056313d410601 <unavailable> + 5633

    5    libc.so.6                          0x00002b19a4625460 __libc_start_main +
    245

    6    tmp_r9n7q78                        0x000056313d410189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var smallest = Int.max\n    var secondSmallest = Int.max\n\
    \    for num in lst {\n        if num < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = num\n        } else if num < secondSmallest\
    \ {\n            secondSmallest = num\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpd2hwudw6/tmpd2hwudw6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d655d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d652c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d652c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d652c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2hwudw6                        0x000055906c0678da <unavailable> + 6362

    5    libc.so.6                          0x00002b3d657bc460 __libc_start_main +
    245

    6    tmpd2hwudw6                        0x000055906c0670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n       \
    \ min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphktfqte7/tmphktfqte7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae514aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae51479eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae51479e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae51479d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphktfqte7                        0x000055f149e559aa <unavailable> + 6570

    5    libc.so.6                          0x00002ae514c93460 __libc_start_main +
    245

    6    tmphktfqte7                        0x000055f149e551a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var min2 = lst[1]\n    if min > min2 {\n        min = min2\n   \
    \     min2 = lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i] <\
    \ min {\n            min2 = min\n            min = lst[i]\n        } else if lst[i]\
    \ < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min2\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkgxpvaxn/tmpkgxpvaxn.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0c944cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0c9143b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0c9143988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0c91427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgxpvaxn                        0x0000564e510e19aa <unavailable> + 6570

    5    libc.so.6                          0x00002ad0c9638460 __libc_start_main +
    245

    6    tmpkgxpvaxn                        0x0000564e510e11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphk82lml2/tmphk82lml2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e9b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e9878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e9878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e98777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk82lml2                        0x000055f4cca7a8ba <unavailable> + 6330

    5    libc.so.6                          0x00002ae8e9d6d460 __libc_start_main +
    245

    6    tmphk82lml2                        0x000055f4cca7a0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var smallest = sorted[0]\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] > smallest {\n            return sorted[i]\n       \
    \ }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != prev {\n            return i\n        }\n        prev = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ num in lst {\n        if num < min {\n            secondMin = min\n        \
    \    min = num\n        } else if num < secondMin {\n            secondMin = num\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplbhowxlv/tmplbhowxlv.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fe19bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fe16b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fe16b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fe16b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbhowxlv                        0x000055f19508f8da <unavailable> + 6362

    5    libc.so.6                          0x00002b7fe1ba8460 __libc_start_main +
    245

    6    tmplbhowxlv                        0x000055f19508f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var smallest = sorted.removeFirst()\n    for i in sorted\
    \ {\n        if i > smallest {\n            return i\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        smallest = lst[1]\n        secondSmallest = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uur5_jx/tmp9uur5_jx.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3fe571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3fe268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3fe268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3fe2677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uur5_jx                        0x0000559a355ac9aa <unavailable> + 6570

    5    libc.so.6                          0x00002af3fe75d460 __libc_start_main +
    245

    6    tmp9uur5_jx                        0x0000559a355ac1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var previous = sorted.removeFirst()\n    while let next\
    \ = sorted.first {\n        if next != previous {\n            return next\n \
    \       }\n        previous = sorted.removeFirst()\n    }\n    return nil\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var second_min = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            second_min = min\n            min = lst[i]\n\
    \        } else if lst[i] < second_min {\n            second_min = lst[i]\n  \
    \      }\n    }\n    return second_min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmptxdheiyd/tmptxdheiyd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a97b69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a97860b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a97860988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a9785f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxdheiyd                        0x0000558e210457c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b8a97d55460 __libc_start_main +
    245

    6    tmptxdheiyd                        0x0000558e210451a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_r9n7q78/tmp_r9n7q78.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19a4439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19a4130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19a4130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19a412f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_r9n7q78                        0x000056313d410601 <unavailable> + 5633

    5    libc.so.6                          0x00002b19a4625460 __libc_start_main +
    245

    6    tmp_r9n7q78                        0x000056313d410189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var second_smallest = lst[1]\n    if smallest > second_smallest\
    \ {\n        smallest = lst[1]\n        second_smallest = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < smallest {\n            second_smallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < second_smallest\
    \ {\n            second_smallest = lst[i]\n        }\n    }\n    return second_smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeuevbqm7/tmpeuevbqm7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f0e660c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f0e357b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f0e357988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f0e3567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeuevbqm7                        0x00005628461729aa <unavailable> + 6570

    5    libc.so.6                          0x00002b0f0e84c460 __libc_start_main +
    245

    6    tmpeuevbqm7                        0x00005628461721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var second = Int.max\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            second = min\n            min = lst[i]\n        } else\
    \ if lst[i] < second {\n            second = lst[i]\n        }\n    }\n    if\
    \ second == Int.max {\n        return nil\n    }\n    return second\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsjl1kieh/tmpsjl1kieh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d8a893c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d8a58ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d8a58a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d8a5897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjl1kieh                        0x0000557e146679aa <unavailable> + 6570

    5    libc.so.6                          0x00002b3d8aa7f460 __libc_start_main +
    245

    6    tmpsjl1kieh                        0x0000557e146671a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != prev {\n            return i\n        }\n        prev = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = lst[0]\n    var secondMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin && i != min {\n            secondMin =\
    \ i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b482043ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4820131561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4820131286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b482013113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4820130bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b481ff30e83 <unavailable> + 188035

    6    tmpwqo3kw4b                        0x00005612648c1e12 <unavailable> + 7698

    7    tmpwqo3kw4b                        0x00005612648c1768 <unavailable> + 5992

    8    libc.so.6                          0x00002b4820626460 __libc_start_main +
    245

    9    tmpwqo3kw4b                        0x00005612648c1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var next = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            next = min\n            min = lst[i]\n        } else if\
    \ lst[i] < next {\n            next = lst[i]\n        }\n    }\n    return next\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpsuqur2az/tmpsuqur2az.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada8cf1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada8cc16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada8cc16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada8cc157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsuqur2az                        0x0000559d77e899aa <unavailable> + 6570

    5    libc.so.6                          0x00002ada8d10b460 __libc_start_main +
    245

    6    tmpsuqur2az                        0x0000559d77e891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] !=\
    \ sorted[i + 1] {\n            return sorted[i + 1]\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var second = min\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            second = min\n            min = lst[i]\n        } else\
    \ if lst[i] < second {\n            second = lst[i]\n        }\n    }\n    return\
    \ second\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpvuepscql/tmpvuepscql.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1905bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1902b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1902b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1902b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvuepscql                        0x000055ca7262d621 <unavailable> + 5665

    5    libc.so.6                          0x00002ab1907a7460 __libc_start_main +
    245

    6    tmpvuepscql                        0x000055ca7262d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ min == nextMin ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5y0qi202/tmp5y0qi202.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db9ee2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db9bd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db9bd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db9bd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5y0qi202                        0x000055780a8077c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b2dba0ce460 __libc_start_main +
    245

    6    tmp5y0qi202                        0x000055780a8071a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for num in lst {\n        if num < min\
    \ {\n            secondMin = min\n            min = num\n        } else if num\
    \ < secondMin {\n            secondMin = num\n        }\n    }\n    return secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpf3k837k4/tmpf3k837k4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afaf74e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afaf71deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afaf71de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afaf71dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf3k837k4                        0x0000560f97bcd601 <unavailable> + 5633

    5    libc.so.6                          0x00002afaf76d3460 __libc_start_main +
    245

    6    tmpf3k837k4                        0x0000560f97bcd189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeh8hf42v/tmpeh8hf42v.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69cb4e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69cb1dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69cb1da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69cb1d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeh8hf42v                        0x000055ea962109aa <unavailable> + 6570

    5    libc.so.6                          0x00002b69cb6cf460 __libc_start_main +
    245

    6    tmpeh8hf42v                        0x000055ea962101a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i > prev {\n            return i\n        }\n        prev = i\n  \
    \  }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpeh8hf42v/tmpeh8hf42v.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69cb4e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69cb1dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69cb1da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69cb1d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeh8hf42v                        0x000055ea962109aa <unavailable> + 6570

    5    libc.so.6                          0x00002b69cb6cf460 __libc_start_main +
    245

    6    tmpeh8hf42v                        0x000055ea962101a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9uv9x77u/tmp9uv9x77u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c45316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4500db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4500d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4500c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uv9x77u                        0x0000557206fdf9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b1c45502460 __libc_start_main +
    245

    6    tmp9uv9x77u                        0x0000557206fdf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return smallest == secondSmallest\
    \ ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpu6lg47l7/tmpu6lg47l7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeecaef9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeecabf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeecabf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeecabef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu6lg47l7                        0x0000555fe93c67c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aeecb0e5460 __libc_start_main +
    245

    6    tmpu6lg47l7                        0x0000555fe93c61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var sorted = lst.sorted()\n    var prev = sorted[0]\n\
    \    for i in 1..<sorted.count {\n        if sorted[i] != prev {\n           \
    \ return sorted[i]\n        }\n        prev = sorted[i]\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b219631dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2196014561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2196014286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b219601413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2196013bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2195e13e83 <unavailable> + 188035

    6    tmp3vdd8w0w                        0x000056504b5c4fb8 <unavailable> + 8120

    7    tmp3vdd8w0w                        0x000056504b5c4888 <unavailable> + 6280

    8    libc.so.6                          0x00002b2196509460 __libc_start_main +
    245

    9    tmp3vdd8w0w                        0x000056504b5c4249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != prev {\n            return i\n        }\n        prev = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_r9n7q78/tmp_r9n7q78.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19a4439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19a4130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19a4130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19a412f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_r9n7q78                        0x000056313d410601 <unavailable> + 5633

    5    libc.so.6                          0x00002b19a4625460 __libc_start_main +
    245

    6    tmp_r9n7q78                        0x000056313d410189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphk82lml2/tmphk82lml2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e9b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e9878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e9878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e98777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk82lml2                        0x000055f4cca7a8ba <unavailable> + 6330

    5    libc.so.6                          0x00002ae8e9d6d460 __libc_start_main +
    245

    6    tmphk82lml2                        0x000055f4cca7a0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9eul8qba/tmp9eul8qba.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cdb764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cdb45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cdb45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cdb45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eul8qba                        0x000055cb4143c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b7cdb950460 __libc_start_main +
    245

    6    tmp9eul8qba                        0x000055cb4143c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var second = Int.max\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            second = min\n            min = lst[i]\n        } else\
    \ if lst[i] < second {\n            second = lst[i]\n        }\n    }\n    return\
    \ second == Int.max ? nil : second\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpchionhos/tmpchionhos.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e1ff5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e1fc54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e1fc54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e1fc537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchionhos                        0x000055eb205519aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7e20149460 __libc_start_main +
    245

    6    tmpchionhos                        0x000055eb205511a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted.removeFirst()\n    while let next = sorted.first\
    \ {\n        if next > prev {\n            return next\n        }\n        prev\
    \ = next\n        sorted.removeFirst()\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return min == secondMin ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpe5fgcyv5/tmpe5fgcyv5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba21e051c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba21dd48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba21dd48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba21dd477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5fgcyv5                        0x000055fa55a737c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba21e23d460 __libc_start_main +
    245

    6    tmpe5fgcyv5                        0x000055fa55a731a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8a_wtpo/tmpb8a_wtpo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7293fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d72636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d72636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d726357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8a_wtpo                        0x000055afe7e747c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3d72b2b460 __libc_start_main +
    245

    6    tmpb8a_wtpo                        0x000055afe7e741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var lst = lst\n    if lst.count < 2 {\n        return\
    \ nil\n    }\n    lst.sort()\n    for i in 1..<lst.count {\n        if lst[i]\
    \ != lst[i - 1] {\n            return lst[i]\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var second = Int.max\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            second = min\n            min = lst[i]\n        } else\
    \ if lst[i] < second {\n            second = lst[i]\n        }\n    }\n    return\
    \ second == Int.max ? nil : second\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpchionhos/tmpchionhos.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e1ff5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e1fc54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e1fc54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e1fc537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchionhos                        0x000055eb205519aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7e20149460 __libc_start_main +
    245

    6    tmpchionhos                        0x000055eb205511a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest && i != smallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var lst =\
    \ lst\n    lst.sort()\n    for i in 0..<lst.count - 1 {\n        if lst[i] !=\
    \ lst[i + 1] {\n            return lst[i + 1]\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var next = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            next = min\n            min = lst[i]\n        }\
    \ else if lst[i] < next {\n            next = lst[i]\n        }\n    }\n    return\
    \ next\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq9k09yyt/tmpq9k09yyt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7c8fb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7c8ca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7c8ca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7c8ca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq9k09yyt                        0x000055a96cd6b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002ac7c919c460 __libc_start_main +
    245

    6    tmpq9k09yyt                        0x000055a96cd6b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013300
