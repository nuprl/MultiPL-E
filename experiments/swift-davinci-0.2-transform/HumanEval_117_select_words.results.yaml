language: swift
name: HumanEval_117_select_words
results:
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ \"aeiou\"\n    let words = s.split(separator: \" \")\n    for word in words\
    \ {\n        var count = 0\n        for letter in word {\n            if !vowels.contains(letter)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpin5jwolk/tmpin5jwolk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0dbe26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0dbb1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0dbb1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0dbb1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin5jwolk                        0x000056211a06af1b <unavailable> + 7963

    5    libc.so.6                          0x00002ba0dc012460 __libc_start_main +
    245

    6    tmpin5jwolk                        0x000056211a06a609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp8g8j34t1/tmp8g8j34t1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0062238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0061f2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0061f2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0061f2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8g8j34t1                        0x0000556ba2e5af1b <unavailable> + 7963

    5    libc.so.6                          0x00002b0062424460 __libc_start_main +
    245

    6    tmp8g8j34t1                        0x0000556ba2e5a609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var count = 0\n        for char in word\
    \ {\n            if !vowels.contains(String(char)) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpukv09465/tmpukv09465.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ffa5f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ffa2ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ffa2ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ffa2eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpukv09465                        0x000055bd52776b09 <unavailable> + 6921

    5    libc.so.6                          0x00002b8ffa7e1460 __libc_start_main +
    245

    6    tmpukv09465                        0x000055bd527765b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_w6cfonc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpz_3qm0lv/tmpz_3qm0lv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d128c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d125bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d125ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d125b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_3qm0lv                        0x00005647050abb09 <unavailable> + 6921

    5    libc.so.6                          0x00002b6d12aaf460 __libc_start_main +
    245

    6    tmpz_3qm0lv                        0x00005647050ab5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    for word in\
    \ words {\n        var count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7h4myll3.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ \"aeiou\"\n    let words = s.split(separator: \" \")\n    for word in words\
    \ {\n        var count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpubb88ihh/tmpubb88ihh.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0212e6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0212b64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0212b64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0212b637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubb88ihh                        0x0000557230d5bf1b <unavailable> + 7963

    5    libc.so.6                          0x00002b0213059460 __libc_start_main +
    245

    6    tmpubb88ihh                        0x0000557230d5b609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(String(letter)) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpg07dqhze/tmpg07dqhze.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfd487bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfd4572b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfd4572988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfd45717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg07dqhze                        0x0000561bd90dfb69 <unavailable> + 7017

    5    libc.so.6                          0x00002abfd4a67460 __libc_start_main +
    245

    6    tmpg07dqhze                        0x0000561bd90df619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(String(char)) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpm66h1ueh/tmpm66h1ueh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d2723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d241ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45d241a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45d24197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm66h1ueh                        0x00005625bd772b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b45d290f460 __libc_start_main +
    245

    6    tmpm66h1ueh                        0x00005625bd772619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy_a7lowm.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let words\
    \ = s.split(separator: \" \")\n    for word in words {\n        var consonants\
    \ = 0\n        for char in word {\n            if char != \"a\" && char != \"\
    e\" && char != \"i\" && char != \"o\" && char != \"u\" {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqi4wnb7a/tmpqi4wnb7a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ae3714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ae340bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ae340b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ae340a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi4wnb7a                        0x00005589a1c17e7b <unavailable> + 7803

    5    libc.so.6                          0x00002b1ae3900460 __libc_start_main +
    245

    6    tmpqi4wnb7a                        0x00005589a1c17569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ > 0 {\n            var consonants = 0\n            for char in word {\n    \
    \            if char != \"a\" && char != \"e\" && char != \"i\" && char != \"\
    o\" && char != \"u\" {\n                    consonants += 1\n                }\n\
    \            }\n            if consonants == n {\n                result.append(word)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdwmy4igp.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    var words =\
    \ s.split(separator: \" \")\n    for word in words {\n        var consonants =\
    \ 0\n        for letter in word {\n            if letter != \"a\" && letter !=\
    \ \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\" {\n         \
    \       consonants += 1\n            }\n        }\n        if consonants == n\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpretjlsdn/tmpretjlsdn.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b61172c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b60e69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b60e69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b60e687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpretjlsdn                        0x00005587c27f0ecb <unavailable> + 7883

    5    libc.so.6                          0x00002b2b6135e460 __libc_start_main +
    245

    6    tmpretjlsdn                        0x00005587c27f05b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    var word = \"\
    \"\n    var consonants = 0\n    for char in s {\n        if char == \" \" {\n\
    \            if consonants == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n            consonants = 0\n        } else\
    \ {\n            word += String(char)\n            if !isVowel(char: char) {\n\
    \                consonants += 1\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp29mnah0k.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let vowels\
    \ = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        var count = 0\n        for letter in word {\n          \
    \  if !vowels.contains(letter) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(word)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9u_fbwxx.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var count = 0\n        for char in word\
    \ {\n            if !vowels.contains(String(char)) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpukv09465/tmpukv09465.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ffa5f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ffa2ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ffa2ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ffa2eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpukv09465                        0x000055bd52776b09 <unavailable> + 6921

    5    libc.so.6                          0x00002b8ffa7e1460 __libc_start_main +
    245

    6    tmpukv09465                        0x000055bd527765b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq4zzbtjw.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    var word = \"\
    \"\n    var consonants = 0\n    for c in s {\n        if c == \" \" {\n      \
    \      if consonants == n {\n                result.append(word)\n           \
    \ }\n            word = \"\"\n            consonants = 0\n        } else {\n \
    \           word += String(c)\n            if c != \"a\" && c != \"e\" && c !=\
    \ \"i\" && c != \"o\" && c != \"u\" {\n                consonants += 1\n     \
    \       }\n        }\n    }\n    if consonants == n {\n        result.append(word)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpr3xg534j/tmpr3xg534j.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ef993c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ef68ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36ef68a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36ef6897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3xg534j                        0x00005587bd9fecdb <unavailable> + 7387

    5    libc.so.6                          0x00002b36efb7f460 __libc_start_main +
    245

    6    tmpr3xg534j                        0x00005587bd9fe3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(String(char)) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpm66h1ueh/tmpm66h1ueh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d2723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d241ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45d241a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45d24197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm66h1ueh                        0x00005625bd772b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b45d290f460 __libc_start_main +
    245

    6    tmpm66h1ueh                        0x00005625bd772619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let words =\
    \ s.components(separatedBy: \" \")\n    for word in words {\n        var consonants\
    \ = 0\n        for char in word {\n            if !isVowel(char: char) {\n   \
    \             consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_39w1y0.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if consonants.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsxxhgm4u.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let words =\
    \ s.components(separatedBy: \" \")\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\" {\n      \
    \          count += 1\n            }\n        }\n        if count == n {\n   \
    \         result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0v7_i5re.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter)) {\n             \
    \   consonants += 1\n            }\n        }\n        if consonants == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp42d4g2uw/tmp42d4g2uw.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e41fd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e41ccfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e41ccf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e41cce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42d4g2uw                        0x000055c2fb22db09 <unavailable> + 6921

    5    libc.so.6                          0x00002b9e421c4460 __libc_start_main +
    245

    6    tmp42d4g2uw                        0x000055c2fb22d5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq4zzbtjw.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let characters = Array(s.lowercased())\n\
    \    var word = \"\"\n    var consonantCount = 0\n    for i in 0..<characters.count\
    \ {\n        if characters[i] == \" \" {\n            if consonantCount == n {\n\
    \                words.append(word)\n            }\n            word = \"\"\n\
    \            consonantCount = 0\n        } else {\n            word += String(characters[i])\n\
    \            if consonants.contains(String(characters[i])) && !vowels.contains(String(characters[i]))\
    \ {\n                consonantCount += 1\n            }\n        }\n    }\n  \
    \  if consonantCount == n {\n        words.append(word)\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp5by2m49b/tmp5by2m49b.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2afd352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2afd049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2afd049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2afd0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5by2m49b                        0x000055e7a2fe4c39 <unavailable> + 7225

    5    libc.so.6                          0x00002b2afd53e460 __libc_start_main +
    245

    6    tmp5by2m49b                        0x000055e7a2fe46e9 <unavailable> + 5865

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter).lowercased()) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsz01rrv7.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpusvpuwf3/tmpusvpuwf3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7276231c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7275f28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7275f28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7275f277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusvpuwf3                        0x000055b357f984c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b727641d460 __libc_start_main +
    245

    6    tmpusvpuwf3                        0x000055b357f980c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    let vowels =\
    \ \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let wordArray\
    \ = s.components(separatedBy: \" \")\n    for word in wordArray {\n        var\
    \ count = 0\n        for char in word {\n            if consonants.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            words.append(word)\n        }\n    }\n    return words\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4pdoxr_w.swift:22:23: error: value of type 'String' has no member\
    \ 'components'\n    let wordArray = s.components(separatedBy: \" \")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for char\
    \ in word {\n            if !vowels.contains(String(char)) {\n               \
    \ consonants += 1\n            }\n        }\n        if consonants == n {\n  \
    \          result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpkp60y94t/tmpkp60y94t.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac615059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac614d50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac614d50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac614d4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkp60y94t                        0x000055dc34dc5b69 <unavailable> + 7017

    5    libc.so.6                          0x00002ac615245460 __libc_start_main +
    245

    6    tmpkp60y94t                        0x000055dc34dc5619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result:\
    \ [String] = []\n    for word in words {\n        var consonants = 0\n       \
    \ for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqsk8d_f7.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    var words = s.components(separatedBy: \" \")\n    var result:\
    \ [String] = []\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp22zlopwr.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(String(char)) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpm66h1ueh/tmpm66h1ueh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d2723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d241ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45d241a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45d24197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm66h1ueh                        0x00005625bd772b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b45d290f460 __libc_start_main +
    245

    6    tmpm66h1ueh                        0x00005625bd772619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpusvpuwf3/tmpusvpuwf3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7276231c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7275f28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7275f28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7275f277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusvpuwf3                        0x000055b357f984c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b727641d460 __libc_start_main +
    245

    6    tmpusvpuwf3                        0x000055b357f980c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    var word = \"\
    \"\n    var consonants = 0\n    for c in s {\n        if c == \" \" {\n      \
    \      if consonants == n {\n                words.append(word)\n            }\n\
    \            word = \"\"\n            consonants = 0\n        } else {\n     \
    \       if c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\" && c != \"u\"\
    \ {\n                consonants += 1\n            }\n            word += String(c)\n\
    \        }\n    }\n    if consonants == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp4vfqgajr/tmp4vfqgajr.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b3a1a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b39e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b39e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b39e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vfqgajr                        0x000055ded2165cdb <unavailable> + 7387

    5    libc.so.6                          0x00002b5b3a38f460 __libc_start_main +
    245

    6    tmp4vfqgajr                        0x000055ded21653c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpz_3qm0lv/tmpz_3qm0lv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d128c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d125bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d125ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d125b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_3qm0lv                        0x00005647050abb09 <unavailable> + 6921

    5    libc.so.6                          0x00002b6d12aaf460 __libc_start_main +
    245

    6    tmpz_3qm0lv                        0x00005647050ab5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(String(char)) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpm66h1ueh/tmpm66h1ueh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d2723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d241ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45d241a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45d24197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm66h1ueh                        0x00005625bd772b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b45d290f460 __libc_start_main +
    245

    6    tmpm66h1ueh                        0x00005625bd772619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu6ktp2d6/tmpu6ktp2d6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae0ce6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae0cb61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae0cb61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae0cb607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu6ktp2d6                        0x0000560dc2b0ab09 <unavailable> + 6921

    5    libc.so.6                          0x00002aae0d056460 __libc_start_main +
    245

    6    tmpu6ktp2d6                        0x0000560dc2b0a5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(String(char).lowercased()) {\n  \
    \              count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx4jnqmzd.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = Set(\"aeiou\")\n    let words\
    \ = s.split(separator: \" \")\n    var result = [String]()\n    for word in words\
    \ {\n        var consonants = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmptnsef94r/tmptnsef94r.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b8a85cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b8a553b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b8a553988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b8a5527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnsef94r                        0x00005636321c7feb <unavailable> + 8171

    5    libc.so.6                          0x00002b8b8aa48460 __libc_start_main +
    245

    6    tmptnsef94r                        0x00005636321c76d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpz_omhipj/tmpz_omhipj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5de6e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5de3dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5de3df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5de3de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_omhipj                        0x000055e442135f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ae5de8d4460 __libc_start_main +
    245

    6    tmpz_omhipj                        0x000055e442135609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfl62ptx0.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpz_omhipj/tmpz_omhipj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5de6e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5de3dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5de3df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5de3de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_omhipj                        0x000055e442135f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ae5de8d4460 __libc_start_main +
    245

    6    tmpz_omhipj                        0x000055e442135609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.components(separatedBy: \" \").filter\
    \ { $0.consonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_0fuigr6.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp07gkpqoh/tmp07gkpqoh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae932261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae931f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae931f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae931f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07gkpqoh                        0x000055f3ca801b69 <unavailable> + 7017

    5    libc.so.6                          0x00002ae93244d460 __libc_start_main +
    245

    6    tmp07gkpqoh                        0x000055f3ca801619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(String(char).lowercased()) {\n  \
    \              count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx4jnqmzd.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.split(separator: \" \")\n \
    \   var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ String(word)) == n {\n            result.append(String(word))\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmbneu5de.swift:22:12: error: cannot find 'count_consonants' in\
    \ scope\n        if count_consonants(s: String(word)) == n {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    var words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(String(char)) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpc_l41xw2/tmpc_l41xw2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07063cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07060c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07060c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07060c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_l41xw2                        0x000056050b2fdb69 <unavailable> + 7017

    5    libc.so.6                          0x00002b07065b7460 __libc_start_main +
    245

    6    tmpc_l41xw2                        0x000056050b2fd619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    var words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(String(char).lowercased()) {\n  \
    \              count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp83bx_0vy.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = Set(\"aeiouAEIOU\")\n    let\
    \ words = s.components(separatedBy: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var consonants = 0\n        for char in word {\n  \
    \          if !vowels.contains(char) {\n                consonants += 1\n    \
    \        }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjlyjm_pq.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(String(char)) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpm66h1ueh/tmpm66h1ueh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d2723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d241ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45d241a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45d24197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm66h1ueh                        0x00005625bd772b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b45d290f460 __libc_start_main +
    245

    6    tmpm66h1ueh                        0x00005625bd772619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.components(separatedBy: \" \"\
    )\n    for word in words {\n        var count = 0\n        for letter in word\
    \ {\n            if consonants.contains(letter) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9gi8qlhx.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let words\
    \ = s.components(separatedBy: \" \")\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbhfym2sj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    var words = s.components(separatedBy: \" \")\n    var result:\
    \ [String] = []\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp22zlopwr.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrpf9v00.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(String(char)) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpm66h1ueh/tmpm66h1ueh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d2723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d241ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45d241a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45d24197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm66h1ueh                        0x00005625bd772b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b45d290f460 __libc_start_main +
    245

    6    tmpm66h1ueh                        0x00005625bd772619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrpf9v00.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter).lowercased()) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsz01rrv7.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let sArray = s.lowercased().split(separator:\
    \ \" \")\n    for word in sArray {\n        var consonantCount = 0\n        for\
    \ char in word {\n            if consonants.contains(String(char)) {\n       \
    \         consonantCount += 1\n            }\n        }\n        if consonantCount\
    \ == n {\n            words.append(String(word))\n        }\n    }\n    return\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp_r4c_b7z/tmp_r4c_b7z.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30979a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3097697b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3097697988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30976967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_r4c_b7z                        0x00005589f53ecbb9 <unavailable> + 7097

    5    libc.so.6                          0x00002b3097b8c460 __libc_start_main +
    245

    6    tmp_r4c_b7z                        0x00005589f53ec669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.split(separator: \" \").filter {\n\
    \        $0.filter {\n            !isVowel(c: $0)\n        }.count == n\n    }.map\
    \ {\n        String($0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp93ubyi8m.swift:21:14: error: cannot find 'isVowel' in scope\n \
    \           !isVowel(c: $0)\n             ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.components(separatedBy: \" \").filter\
    \ { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_cmq7q_j.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_w6cfonc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrpf9v00.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpz_omhipj/tmpz_omhipj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5de6e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5de3dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5de3df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5de3de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_omhipj                        0x000055e442135f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ae5de8d4460 __libc_start_main +
    245

    6    tmpz_omhipj                        0x000055e442135609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.split(separator: \" \")\n \
    \   var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if char != \"a\" && char != \"e\" &&\
    \ char != \"i\" && char != \"o\" && char != \"u\" {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpusoahw9x/tmpusoahw9x.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b779e4d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b779e1cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b779e1cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b779e1ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusoahw9x                        0x000055886ab1decb <unavailable> + 7883

    5    libc.so.6                          0x00002b779e6c4460 __libc_start_main +
    245

    6    tmpusoahw9x                        0x000055886ab1d5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrpf9v00.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrpf9v00.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    var word = \"\
    \"\n    var consonants = 0\n    for char in s {\n        if char == \" \" {\n\
    \            if consonants == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n            consonants = 0\n        } else\
    \ {\n            if char != \"a\" && char != \"e\" && char != \"i\" && char !=\
    \ \"o\" && char != \"u\" {\n                consonants += 1\n            }\n \
    \           word += String(char)\n        }\n    }\n    if consonants == n {\n\
    \        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp02igmhaj/tmp02igmhaj.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30745b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30742adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30742ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30742ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02igmhaj                        0x000055ada92d5cdb <unavailable> + 7387

    5    libc.so.6                          0x00002b30747a2460 __libc_start_main +
    245

    6    tmp02igmhaj                        0x000055ada92d53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp07gkpqoh/tmp07gkpqoh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae932261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae931f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae931f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae931f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07gkpqoh                        0x000055f3ca801b69 <unavailable> + 7017

    5    libc.so.6                          0x00002ae93244d460 __libc_start_main +
    245

    6    tmp07gkpqoh                        0x000055f3ca801619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp07gkpqoh/tmp07gkpqoh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae932261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae931f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae931f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae931f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07gkpqoh                        0x000055f3ca801b69 <unavailable> + 7017

    5    libc.so.6                          0x00002ae93244d460 __libc_start_main +
    245

    6    tmp07gkpqoh                        0x000055f3ca801619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrpf9v00.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4hyo06y2.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp1y_5r5m2/tmp1y_5r5m2.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9c3148c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9c2e3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9c2e3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9c2e3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1y_5r5m2                        0x000055deddda7ebb <unavailable> + 7867

    5    libc.so.6                          0x00002af9c3334460 __libc_start_main +
    245

    6    tmp1y_5r5m2                        0x000055deddda75a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let words\
    \ = s.split(separator: \" \")\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if !isVowel(letter: letter) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8kr64_bg.swift:24:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(letter: letter) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    var word = \"\
    \"\n    var consonants = 0\n    for c in s {\n        if c == \" \" {\n      \
    \      if consonants == n {\n                result.append(word)\n           \
    \ }\n            word = \"\"\n            consonants = 0\n        } else {\n \
    \           word += String(c)\n            if !isVowel(c: c) {\n             \
    \   consonants += 1\n            }\n        }\n    }\n    if consonants == n {\n\
    \        result.append(word)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcknibpf7.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(c: c) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp0aw92g4z/tmp0aw92g4z.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68cf5edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68cf2e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68cf2e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68cf2e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0aw92g4z                        0x00005588becc3b09 <unavailable> + 6921

    5    libc.so.6                          0x00002b68cf7d9460 __libc_start_main +
    245

    6    tmp0aw92g4z                        0x00005588becc35b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \")\n   \
    \ var result = [String]()\n    for word in words {\n        var count = 0\n  \
    \      for letter in word {\n            if consonants.contains(letter) {\n  \
    \              count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpm142caw_/tmpm142caw_.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5894d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5894a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5894a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5894a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm142caw_                        0x000056472eeddb59 <unavailable> + 7001

    5    libc.so.6                          0x00002b5894f65460 __libc_start_main +
    245

    6    tmpm142caw_                        0x000056472eedd609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq4zzbtjw.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result: [String]\
    \ = []\n    for word in words {\n        var count = 0\n        for char in word\
    \ {\n            if !vowels.contains(String(char)) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpukv09465/tmpukv09465.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ffa5f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ffa2ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ffa2ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ffa2eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpukv09465                        0x000055bd52776b09 <unavailable> + 6921

    5    libc.so.6                          0x00002b8ffa7e1460 __libc_start_main +
    245

    6    tmpukv09465                        0x000055bd527765b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    var words =\
    \ s.components(separatedBy: \" \")\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpltke95ke.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrpf9v00.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result: [String] = []\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo6yhkzpn.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ \"aeiou\"\n    let words = s.split(separator: \" \")\n    for word in words\
    \ {\n        var count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpubb88ihh/tmpubb88ihh.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0212e6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0212b64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0212b64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0212b637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubb88ihh                        0x0000557230d5bf1b <unavailable> + 7963

    5    libc.so.6                          0x00002b0213059460 __libc_start_main +
    245

    6    tmpubb88ihh                        0x0000557230d5b609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let words =\
    \ s.split(separator: \" \")\n    for word in words {\n        var count = 0\n\
    \        for character in word {\n            if !isVowel(character: character)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5d8e53sh.swift:24:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(character: character) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    var word = \"\
    \"\n    var consonants = 0\n    for char in s {\n        if char == \" \" {\n\
    \            if consonants == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n            consonants = 0\n        } else\
    \ {\n            if char != \"a\" && char != \"e\" && char != \"i\" && char !=\
    \ \"o\" && char != \"u\" {\n                consonants += 1\n            }\n \
    \           word += String(char)\n        }\n    }\n    if consonants == n {\n\
    \        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp02igmhaj/tmp02igmhaj.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30745b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30742adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30742ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30742ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02igmhaj                        0x000055ada92d5cdb <unavailable> + 7387

    5    libc.so.6                          0x00002b30747a2460 __libc_start_main +
    245

    6    tmp02igmhaj                        0x000055ada92d53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    var words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(String(char).lowercased()) {\n  \
    \              count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp83bx_0vy.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.components(separatedBy: \" \").filter\
    \ { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_cmq7q_j.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var count = 0\n   \
    \ for word in s.split(separator: \" \") {\n        for letter in word {\n    \
    \        if consonants.contains(String(letter).lowercased()) {\n             \
    \   count += 1\n            }\n        }\n        if count == n {\n          \
    \  words.append(String(word))\n        }\n        count = 0\n    }\n    return\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result: [String] = []\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8cc7ctq7.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    var word = \"\
    \"\n    var consonants = 0\n    for c in s {\n        if c == \" \" {\n      \
    \      if consonants == n {\n                words.append(word)\n            }\n\
    \            word = \"\"\n            consonants = 0\n        } else {\n     \
    \       word += String(c)\n            if !isVowel(c: c) {\n                consonants\
    \ += 1\n            }\n        }\n    }\n    if consonants == n {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_c5z1br1.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(c: c) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    var word = \"\
    \"\n    for char in s {\n        if char == \" \" {\n            if count_consonants(word)\
    \ == n {\n                words.append(word)\n            }\n            word\
    \ = \"\"\n        } else {\n            word += String(char)\n        }\n    }\n\
    \    if count_consonants(word) == n {\n        words.append(word)\n    }\n   \
    \ return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpix1m2fuy.swift:23:16: error: cannot find 'count_consonants' in\
    \ scope\n            if count_consonants(word) == n {\n               ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpix1m2fuy.swift:31:8: error: cannot find 'count_consonants' in scope\n\
    \    if count_consonants(word) == n {\n       ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp4mfwn6zg/tmp4mfwn6zg.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a98747c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a9843eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a9843e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a9843d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mfwn6zg                        0x000055dc5002bf1b <unavailable> + 7963

    5    libc.so.6                          0x00002b4a98933460 __libc_start_main +
    245

    6    tmp4mfwn6zg                        0x000055dc5002b609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    var consonantCount\
    \ = 0\n    var word = \"\"\n    for letter in s {\n        if letter == \" \"\
    \ {\n            if consonantCount == n {\n                words.append(word)\n\
    \            }\n            consonantCount = 0\n            word = \"\"\n    \
    \    } else {\n            if consonants.contains(String(letter).lowercased())\
    \ {\n                consonantCount += 1\n            }\n            word += String(letter)\n\
    \        }\n    }\n    if consonantCount == n {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpr3o1n4c4/tmpr3o1n4c4.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bbcc2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bbc926b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bbc926988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bbc9257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3o1n4c4                        0x000055c4a5f399d9 <unavailable> + 6617

    5    libc.so.6                          0x00002b0bbce1b460 __libc_start_main +
    245

    6    tmpr3o1n4c4                        0x000055c4a5f39489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.components(separatedBy: \" \").filter\
    \ { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_cmq7q_j.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy_a7lowm.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.split(separator: \" \").filter {\
    \ $0.countOf(char: \"a\") == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmppygj2lbk.swift:19:48: error: reference to member 'countOf' cannot\
    \ be resolved without a contextual type\n    return s.split(separator: \" \").filter\
    \ { $0.countOf(char: \"a\") == n }\n                                         \
    \      ^\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n    for word in\
    \ words {\n        var count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7h4myll3.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ \"aeiouAEIOU\"\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        var count = 0\n        for char in word {\n            if\
    \ !vowels.contains(char) {\n                count += 1\n            }\n      \
    \  }\n        if count == n {\n            result.append(word)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4wz1h5q9.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq4zzbtjw.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    let vowels =\
    \ \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let array = s.lowercased().components(separatedBy:\
    \ \" \")\n    for word in array {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(char) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            words.append(word)\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqxiocdhm.swift:22:32: error: value of type 'String' has no member\
    \ 'components'\n    let array = s.lowercased().components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    var word = \"\
    \"\n    var consonants = 0\n    for c in s {\n        if c == \" \" {\n      \
    \      if consonants == n {\n                words.append(word)\n            }\n\
    \            word = \"\"\n            consonants = 0\n        } else {\n     \
    \       word += String(c)\n            if !isVowel(c: c) {\n                consonants\
    \ += 1\n            }\n        }\n    }\n    if consonants == n {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_c5z1br1.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(c: c) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(String(letter)) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpg07dqhze/tmpg07dqhze.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfd487bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfd4572b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfd4572988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfd45717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg07dqhze                        0x0000561bd90dfb69 <unavailable> + 7017

    5    libc.so.6                          0x00002abfd4a67460 __libc_start_main +
    245

    6    tmpg07dqhze                        0x0000561bd90df619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter).lowercased()) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8a7v_6o9.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjq2cn14h.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    let allWords = s.split(separator:\
    \ \" \")\n    for word in allWords {\n        var consonantCount = 0\n       \
    \ for letter in word {\n            if consonants.contains(String(letter).lowercased())\
    \ {\n                consonantCount += 1\n            }\n        }\n        if\
    \ consonantCount == n {\n            words.append(String(word))\n        }\n \
    \   }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp4195y13q/tmp4195y13q.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af96c7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af96c4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af96c4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af96c4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4195y13q                        0x0000562f6c8a1bb9 <unavailable> + 7097

    5    libc.so.6                          0x00002af96c9b5460 __libc_start_main +
    245

    6    tmp4195y13q                        0x0000562f6c8a1669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let words =\
    \ s.components(separatedBy: \" \")\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5iut1sv1.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.components(separatedBy: \" \").filter\
    \ { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_cmq7q_j.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq4zzbtjw.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.lowercased().components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp79s3gbd7.swift:20:32: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.lowercased().components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq4zzbtjw.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe388xcd9.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpetf4e8cc.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    var word = \"\
    \"\n    var consonants = 0\n    for char in s {\n        if char == \" \" {\n\
    \            if consonants == n {\n                words.append(word)\n      \
    \      }\n            word = \"\"\n            consonants = 0\n        } else\
    \ {\n            word += String(char)\n            if !isVowel(char: char) {\n\
    \                consonants += 1\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp29mnah0k.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrpf9v00.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpusvpuwf3/tmpusvpuwf3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7276231c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7275f28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7275f28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7275f277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusvpuwf3                        0x000055b357f984c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b727641d460 __libc_start_main +
    245

    6    tmpusvpuwf3                        0x000055b357f980c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq4zzbtjw.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq4zzbtjw.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.components(separatedBy: \" \").filter\
    \ { $0.countConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsivollho.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.countConsonants()\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnnwjmoh_.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp4mfwn6zg/tmp4mfwn6zg.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a98747c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a9843eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a9843e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a9843d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mfwn6zg                        0x000055dc5002bf1b <unavailable> + 7963

    5    libc.so.6                          0x00002b4a98933460 __libc_start_main +
    245

    6    tmp4mfwn6zg                        0x000055dc5002b609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfl62ptx0.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.lowercased().split(separator: \" \")\n    var\
    \ result = [String]()\n    for word in words {\n        var count = 0\n      \
    \  for char in word {\n            if !vowels.contains(String(char)) {\n     \
    \           count += 1\n            }\n        }\n        if count == n {\n  \
    \          result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp4ix2i1pc/tmp4ix2i1pc.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e08ee0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e08bd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e08bd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e08bd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ix2i1pc                        0x0000563443813bb9 <unavailable> + 7097

    5    libc.so.6                          0x00002b0e090cc460 __libc_start_main +
    245

    6    tmp4ix2i1pc                        0x0000563443813669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \")\n    var result:\
    \ [String] = []\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(String(char).lowercased()) {\n  \
    \              count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2cnck2ny.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if countConsonants(word:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_8ltdt5t.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpz_omhipj/tmpz_omhipj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5de6e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5de3dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5de3df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5de3de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_omhipj                        0x000055e442135f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ae5de8d4460 __libc_start_main +
    245

    6    tmpz_omhipj                        0x000055e442135609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp60zdmfub/tmp60zdmfub.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74e2ff1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74e2ce8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74e2ce8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74e2ce77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp60zdmfub                        0x0000559a0b755b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b74e31dd460 __libc_start_main +
    245

    6    tmp60zdmfub                        0x0000559a0b755619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.components(separatedBy: \" \").filter\
    \ { $0.countConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsivollho.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    let vowels =\
    \ \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let array = s.components(separatedBy:\
    \ \" \")\n    for word in array {\n        var count = 0\n        for character\
    \ in word {\n            if !vowels.contains(character) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            words.append(word)\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg0h7ibi4.swift:22:19: error: value of type 'String' has no member\
    \ 'components'\n    let array = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu6ktp2d6/tmpu6ktp2d6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae0ce6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae0cb61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae0cb61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae0cb607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu6ktp2d6                        0x0000560dc2b0ab09 <unavailable> + 6921

    5    libc.so.6                          0x00002aae0d056460 __libc_start_main +
    245

    6    tmpu6ktp2d6                        0x0000560dc2b0a5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result = [String]()\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char).lowercased()) {\n     \
    \           count += 1\n            }\n        }\n        if count == n {\n  \
    \          result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmuj51gi2.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.components(separatedBy: \" \").filter\
    \ {\n        $0.filter {\n            ![\"a\", \"e\", \"i\", \"o\", \"u\"].contains($0.lowercased())\n\
    \        }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk3uhgcq2.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter {\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = s.components(separatedBy: \"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if consonants(word:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmppwexy5n_.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(String(char)) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpm66h1ueh/tmpm66h1ueh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d2723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d241ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45d241a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45d24197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm66h1ueh                        0x00005625bd772b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b45d290f460 __libc_start_main +
    245

    6    tmpm66h1ueh                        0x00005625bd772619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjera8orp.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var result: [String] = []\n    let words\
    \ = s.split(separator: \" \")\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if char != \"a\" && char != \"e\" &&\
    \ char != \"i\" && char != \"o\" && char != \"u\" {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmphs21eljo/tmphs21eljo.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0449c0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0449903b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0449903988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04499027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs21eljo                        0x000055d897510e7b <unavailable> + 7803

    5    libc.so.6                          0x00002b0449df8460 __libc_start_main +
    245

    6    tmphs21eljo                        0x000055d897510569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    let vowels =\
    \ \"aeiouAEIOU\"\n    let wordsInString = s.components(separatedBy: \" \")\n \
    \   for word in wordsInString {\n        var consonants = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            words.append(word)\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi8ykbr21.swift:21:27: error: value of type 'String' has no member\
    \ 'components'\n    let wordsInString = s.components(separatedBy: \" \")\n   \
    \                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpz_omhipj/tmpz_omhipj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5de6e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5de3dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5de3df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5de3de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_omhipj                        0x000055e442135f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ae5de8d4460 __libc_start_main +
    245

    6    tmpz_omhipj                        0x000055e442135609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    var words = [String]()\n    var consonants\
    \ = 0\n    var word = \"\"\n    for char in s {\n        if char == \" \" {\n\
    \            if consonants == n {\n                words.append(word)\n      \
    \      }\n            consonants = 0\n            word = \"\"\n        } else\
    \ {\n            word += String(char)\n            if !isVowel(char: char) {\n\
    \                consonants += 1\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgtc0f1xi.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe48vwo5c.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014193
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(char) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy4yj1nkb/tmpy4yj1nkb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334b850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334b547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334b547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334b5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4yj1nkb                        0x00005565bea72f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b334ba3c460 __libc_start_main +
    245

    6    tmpy4yj1nkb                        0x00005565bea72609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014193
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    return s.components(separatedBy: \" \").filter\
    \ { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb4qgqz0s.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n///\
    \ [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n///\
    \ [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n\
    /// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"\
    ]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    return words.filter {\n        $0.filter { !vowels.contains($0)\
    \ }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3gcivax2.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
