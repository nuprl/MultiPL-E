language: swift
name: HumanEval_139_special_factorial
results:
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for i in 1...n {\n        factorial\
    \ *= i\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmpftfytvly/tmpftfytvly.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16a08efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16a05e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16a05e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16a05e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpftfytvly                        0x000056107d093337 <unavailable> + 4919

    5    libc.so.6                          0x00002b16a0adb460 __libc_start_main +
    245

    6    tmpftfytvly                        0x000056107d092fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n > 0 ? n * special_factorial(n: n - 1) : 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp2c6xvi2q/tmp2c6xvi2q.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cae4adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cae1a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cae1a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cae1a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2c6xvi2q                        0x000055deab02f1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b9cae699460 __libc_start_main +
    245

    6    tmp2c6xvi2q                        0x000055deab02ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824623
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    for i in 1..<n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpyrjne6_m/tmpyrjne6_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b055e0f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b055ddecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b055ddec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b055ddeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrjne6_m                        0x0000559204d3e427 <unavailable> + 5159

    5    libc.so.6                          0x00002b055e2e1460 __libc_start_main +
    245

    6    tmpyrjne6_m                        0x0000559204d3e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = n\n    for i in 1..<n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpcjmyjhx5/tmpcjmyjhx5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc17fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc14f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdc14f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdc14f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjmyjhx5                        0x0000557d73fdd337 <unavailable> + 4919

    5    libc.so.6                          0x00002afdc19e6460 __libc_start_main +
    245

    6    tmpcjmyjhx5                        0x0000557d73fdcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial: Int = 1\n    for i in 1...n {\n        factorial\
    \ *= i\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp85etrpp_/tmp85etrpp_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae47aee2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae47abd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae47abd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae47abd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85etrpp_                        0x0000563b129d4337 <unavailable> + 4919

    5    libc.so.6                          0x00002ae47b0ce460 __libc_start_main +
    245

    6    tmp85etrpp_                        0x0000563b129d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824623
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\
    \ * factorial(n: i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpw0o1q2vc.swift:13:23: error: cannot find 'factorial' in scope\n\
    \        result *= i * factorial(n: i)\n                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n == 0 ? 1 : n * special_factorial(n: n - 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmphcazd5yb/tmphcazd5yb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82b643fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82b6136b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82b6136988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82b61357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphcazd5yb                        0x000055a4671aa1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b82b662b460 __libc_start_main +
    245

    6    tmphcazd5yb                        0x000055a4671a9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    for i in 1..<n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpyrjne6_m/tmpyrjne6_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b055e0f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b055ddecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b055ddec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b055ddeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrjne6_m                        0x0000559204d3e427 <unavailable> + 5159

    5    libc.so.6                          0x00002b055e2e1460 __libc_start_main +
    245

    6    tmpyrjne6_m                        0x0000559204d3e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n == 0 ? 1 : n * special_factorial(n: n - 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmphcazd5yb/tmphcazd5yb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82b643fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82b6136b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82b6136988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82b61357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphcazd5yb                        0x000055a4671aa1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b82b662b460 __libc_start_main +
    245

    6    tmphcazd5yb                        0x000055a4671a9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var result = 1\n\
    \    for i in 1...n {\n        result *= i\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp_irauixe/tmp_irauixe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1a8f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1a8c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1a8c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1a8c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_irauixe                        0x0000559a7fda6337 <unavailable> + 4919

    5    libc.so.6                          0x00002ab1a9124460 __libc_start_main +
    245

    6    tmp_irauixe                        0x0000559a7fda5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824623
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpvpyjt0ki/tmpvpyjt0ki.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee2dfbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee2dcb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee2dcb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee2dcb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpyjt0ki                        0x00005566fd3281b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aee2e1aa460 __libc_start_main +
    245

    6    tmpvpyjt0ki                        0x00005566fd327e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpevbfhweh/tmpevbfhweh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b703d383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b703d07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b703d07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b703d0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevbfhweh                        0x000055d4a117b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b703d56f460 __libc_start_main +
    245

    6    tmpevbfhweh                        0x000055d4a117ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpni9exbyt/tmpni9exbyt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6535704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65353fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65353fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65353fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9exbyt                        0x000055cb7ab5a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b65358f0460 __libc_start_main +
    245

    6    tmpni9exbyt                        0x000055cb7ab59fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp14w8_qde.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824570
