name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n\
  /// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int,\
  \ shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    let digits = String(x)\n    if shift >= digits.count {\n      \
    \  return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n    var\
    \ result = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n        x /=\
    \ 10\n    }\n    if shift > digits.count {\n        digits.reverse()\n    } else\
    \ {\n        digits = Array(digits[digits.count - shift ..< digits.count] + digits[0\
    \ ..< digits.count - shift])\n    }\n    for digit in digits {\n        result\
    \ += String(digit)\n    }\n    return result", "    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.count - shift\n    let right = digits.count - 1\n\
    \    digits.swapAt(left, right)\n    return String(digits.reversed())", "    var\
    \ x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let str =\
    \ String(x)\n    let count = str.count\n    if shift > count {\n        return\
    \ String(str.reversed())\n    }\n    let index = str.index(str.startIndex, offsetBy:\
    \ shift)\n    let prefix = str[str.startIndex..<index]\n    let suffix = str[index..<str.endIndex]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let n =\
    \ digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var x = x\n    var\
    \ shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    shift %= digits.count\n    return String(digits[shift..<digits.count]\
    \ + digits[0..<shift])", "    let digits = String(x)\n    let n = digits.count\n\
    \    if shift >= n {\n        return String(digits.reversed())\n    }\n    let\
    \ left = digits.index(digits.startIndex, offsetBy: shift)\n    let right = digits.index(digits.startIndex,\
    \ offsetBy: n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    let shift = shift % length\n    let left =\
    \ String(digits.suffix(shift))\n    let right = String(digits.prefix(length -\
    \ shift))\n    return left + right", "    let digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    var x = x\n    var digits = [Int]()\n    while x\
    \ > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    digits.reverse()\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted)", "    var x = x\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let shift = shift %\
    \ digits.count\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n\
    \    return String(shifted.reversed())", "    let digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let n = digits.count\n\
    \    if shift > n {\n        return String(digits.reversed())\n    }\n    let\
    \ i = n - shift\n    let left = digits[digits.index(digits.startIndex, offsetBy:\
    \ i)...]\n    let right = digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: i)]\n    return String(left + right)", "    let digits = String(x)\n\
    \    let length = digits.count\n    let shift = shift % length\n    let prefix\
    \ = String(digits.suffix(shift))\n    let suffix = String(digits.prefix(length\
    \ - shift))\n    return prefix + suffix", "    var digits = String(x)\n    if\
    \ shift > digits.count {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    let digits = String(x)\n    let len = digits.count\n    if shift >= len {\n\
    \        return String(digits.reversed())\n    }\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ len - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    var digits\
    \ = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift > length {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix\
    \ = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix)\
    \ + String(prefix)", "    let digits = String(x)\n    let length = digits.count\n\
    \    let shift = shift % length\n    let first = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let second = digits.index(digits.startIndex, offsetBy:\
    \ length)\n    return String(digits[first..<second] + digits[digits.startIndex..<first])",
  "    let digits = String(x)\n    let length = digits.count\n    if shift > length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let str = String(x)\n    let len =\
    \ str.count\n    if shift > len {\n        return String(str.reversed())\n   \
    \ }\n    let index = str.index(str.startIndex, offsetBy: shift)\n    return String(str[index...]\
    \ + str[..<index])", "    let digits = String(x)\n    let n = digits.count\n \
    \   if shift >= n {\n        return String(digits.reversed())\n    }\n    let\
    \ left = digits.index(digits.startIndex, offsetBy: shift)\n    let right = digits.index(digits.startIndex,\
    \ offsetBy: n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ digits.reversed().map { String($0) }.joined()\n    }\n    let shift = shift\
    \ % digits.count\n    let first = digits[0..<shift].reversed()\n    let second\
    \ = digits[shift..<digits.count].reversed()\n    return (first + second).map {\
    \ String($0) }.joined()", "    let digits = String(x)\n    let n = digits.count\n\
    \    if shift > n {\n        return String(digits.reversed())\n    }\n    let\
    \ left = digits.index(digits.startIndex, offsetBy: shift)\n    let right = digits.index(digits.startIndex,\
    \ offsetBy: n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let s = String(x)\n\
    \    if shift > s.count {\n        return String(s.reversed())\n    }\n    let\
    \ i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...] + s[..<i])",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shift_digits = digits[digits.count\
    \ - shift ..< digits.count]\n    let unshift_digits = digits[0 ..< digits.count\
    \ - shift]\n    return String(shift_digits + unshift_digits)", "    let digits\
    \ = String(x)\n    let n = digits.count\n    let shift = shift % n\n    let left\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let right = digits.index(digits.startIndex,\
    \ offsetBy: n)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    let length = digits.count\n    let shift = shift\
    \ % length\n    let left = String(digits.suffix(shift))\n    let right = String(digits.prefix(length\
    \ - shift))\n    return left + right", "    let digits = String(x)\n    if shift\
    \ >= digits.count {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted.reversed())", "    let digits = String(x)\n    if shift\
    \ >= digits.count {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let n = digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n - shift)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    if shift\
    \ >= digits.count {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let str = String(x)\n    if shift >= str.count {\n\
    \        return String(str.reversed())\n    }\n    let index = str.index(str.startIndex,\
    \ offsetBy: shift)\n    return String(str[index...] + str[..<index])", "    let\
    \ digits = String(x)\n    let count = digits.count\n    if shift >= count {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[index...]\n    let suffix = digits[..<index]\n\
    \    return String(prefix + suffix)", "    let digits = String(x)\n    let count\
    \ = digits.count\n    if shift >= count {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: count - shift)\n    return\
    \ String(digits[left..<right] + digits[digits.startIndex..<left])", "    var digits\
    \ = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix) + String(prefix)", "    let digits = String(x)\n    let n = digits.count\n\
    \    if shift >= n {\n        return String(digits.reversed())\n    }\n    let\
    \ i = n - shift\n    let left = digits[digits.index(digits.startIndex, offsetBy:\
    \ i)..<digits.endIndex]\n    let right = digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: i)]\n    return String(left + right)", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    var x = x\n    var shift\
    \ = shift\n    var result = \"\"\n    while x > 0 {\n        result = String(x\
    \ % 10) + result\n        x /= 10\n        shift -= 1\n    }\n    while shift\
    \ > 0 {\n        result = \"0\" + result\n        shift -= 1\n    }\n    return\
    \ result", "    let digits = String(x)\n    if shift >= digits.count {\n     \
    \   return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let s = String(x)\n\
    \    let n = s.count\n    if shift >= n {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...]\
    \ + s[..<i])", "    let x_str = String(x)\n    let x_str_len = x_str.count\n \
    \   if shift > x_str_len {\n        return String(x_str.reversed())\n    }\n \
    \   let x_str_prefix = x_str.prefix(shift)\n    let x_str_suffix = x_str.suffix(x_str_len\
    \ - shift)\n    return String(x_str_suffix + x_str_prefix)", "    let digits =\
    \ String(x)\n    let length = digits.count\n    let shift = shift % length\n \
    \   let start = digits.index(digits.startIndex, offsetBy: shift)\n    let end\
    \ = digits.index(digits.endIndex, offsetBy: -shift)\n    let shifted = String(digits[start..<end])\
    \ + String(digits[digits.startIndex..<start])\n    return shifted", "    let digits\
    \ = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let s = String(x)\n\
    \    let n = s.count\n    if shift > n {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i..<s.endIndex]\
    \ + s[s.startIndex..<i])", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.count\n    if shift > length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let length\
    \ = digits.count\n    let shift = shift % length\n    let left = String(digits.suffix(shift))\n\
    \    let right = String(digits.prefix(length - shift))\n    return left + right",
  "    let x_str = String(x)\n    let x_str_len = x_str.count\n    if shift > x_str_len\
    \ {\n        return String(x_str.reversed())\n    }\n    let x_str_shift = x_str.index(x_str.startIndex,\
    \ offsetBy: shift)\n    let x_str_shift_end = x_str.index(x_str.endIndex, offsetBy:\
    \ -shift)\n    let x_str_shift_front = x_str[x_str_shift..<x_str_shift_end]\n\
    \    let x_str_shift_back = x_str[x_str.startIndex..<x_str_shift]\n    return\
    \ String(x_str_shift_front + x_str_shift_back)", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let len = digits.count\n    if shift >= len {\n        return String(digits.reversed())\n\
    \    }\n    let right = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let left = digits.index(digits.startIndex, offsetBy: len - shift)\n    return\
    \ String(digits[right..<digits.endIndex] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    let n = digits.count\n    if shift >= n {\n   \
    \     return String(digits.reversed())\n    }\n    let i = n - shift\n    let\
    \ left = digits[digits.index(digits.startIndex, offsetBy: i)..<digits.endIndex]\n\
    \    let right = digits[digits.startIndex..<digits.index(digits.startIndex, offsetBy:\
    \ i)]\n    return String(left + right)", "    let digits = String(x)\n    let\
    \ n = digits.count\n    let shift = shift % n\n    let left = String(digits.suffix(shift))\n\
    \    let right = String(digits.prefix(n - shift))\n    return left + right", " \
    \   let digits = String(x)\n    let n = digits.count\n    if shift >= n {\n  \
    \      return String(digits.reversed())\n    }\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let s = String(x)\n\
    \    let n = s.count\n    if shift >= n {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...]\
    \ + s[..<i])", "    let digits = String(x)\n    let shift = shift % digits.count\n\
    \    let prefix = digits.suffix(shift)\n    let suffix = digits.prefix(digits.count\
    \ - shift)\n    return String(prefix + suffix)", "    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shift = shift % digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    var x = x\n\
    \    var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shift = shift % digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let digits\
    \ = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let count = digits.count\n    let shift = shift % count\n    let left = String(digits.suffix(shift))\n\
    \    let right = String(digits.prefix(count - shift))\n    return left + right",
  "    let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let digits_count = digits.count\n    if shift >= digits_count {\n       \
    \ return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let head = digits[..<index]\n    let tail = digits[index...]\n\
    \    return String(tail + head)", "    let digits = String(x)\n    if shift >\
    \ digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ prefix = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix)\
    \ + String(prefix)", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.count\n    if shift > length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let n =\
    \ digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    var x = x\n    var shift = shift\n\
    \    var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    shift %= digits.count\n    for i in 0..<digits.count\
    \ {\n        result += String(digits[(i + shift) % digits.count])\n    }\n   \
    \ return result", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let shift = shift % digits.count\n\
    \    return String(digits.suffix(shift) + digits.prefix(digits.count - shift))",
  "    let digits = String(x)\n    let n = digits.count\n    if shift > n {\n    \
    \    return String(digits.reversed())\n    }\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ n)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift > length {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix\
    \ = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    let digits = String(x)\n    if shift >= digits.count {\n  \
    \      return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    var digits\
    \ = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let suffix = digits[index...]\n    let prefix = digits[..<index]\n    return\
    \ String(suffix + prefix)", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let count = digits.count\n\
    \    if shift >= count {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix\
    \ = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    var digits = String(x)\n    if shift > digits.count {\n   \
    \     return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let shift = shift % digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let digits\
    \ = String(x)\n    let n = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n - shift)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    if shift\
    \ >= digits.count {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    let shift = shift % length\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ length - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    let length = digits.count\n    if shift > length\
    \ {\n        return String(digits.reversed())\n    }\n    let start = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let end = digits.index(digits.endIndex, offsetBy: -shift)\n\
    \    return String(digits[start..<end] + digits[digits.startIndex..<start] + digits[end..<digits.endIndex])",
  "    let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let n = digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let i = n - shift\n    let left = digits[digits.index(digits.startIndex,\
    \ offsetBy: i)...]\n    let right = digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: i)]\n    return String(left + right)", "    let digits = String(x)\n\
    \    let n = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let shift = shift % digits.count\n    let (left, right) = digits.split(at:\
    \ shift)\n    return String(left + right)", "    let digits = String(x)\n    let\
    \ n = digits.count\n    let shift = shift % n\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shift = shift % digits.count\n   \
    \ let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return String(shifted.reversed())",
  "    let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x >\
    \ 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    shift %= digits.count\n\
    \    return digits.reversed().map { String($0) }.joined()", "    var x = x\n \
    \   var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let digits\
    \ = String(x)\n    let n = digits.count\n    let shift = shift % n\n    let left\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let right = digits.index(digits.startIndex,\
    \ offsetBy: n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let shifted = digits[digits.count\
    \ - shift..<digits.count] + digits[0..<digits.count - shift]\n    return String(shifted.reversed())",
  "    let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var x = x\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shift = shift % digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let digits\
    \ = String(x)\n    let length = digits.count\n    if shift > length {\n      \
    \  return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let length\
    \ = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    if shift > length {\n        return String(digits.reversed())\n\
    \    }\n    let start = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let end = digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[start..<end]\
    \ + digits[digits.startIndex..<start] + digits[end..<digits.endIndex])", "   \
    \ let x_str = String(x)\n    let x_str_len = x_str.count\n    if shift > x_str_len\
    \ {\n        return String(x_str.reversed())\n    }\n    let shift_str = x_str.suffix(shift)\n\
    \    let rest_str = x_str.prefix(x_str_len - shift)\n    return String(shift_str\
    \ + rest_str)", "    let digits = String(x)\n    let length = digits.count\n \
    \   if shift >= length {\n        return String(digits.reversed())\n    }\n  \
    \  let right = digits.index(digits.startIndex, offsetBy: shift)\n    let left\
    \ = digits.index(digits.startIndex, offsetBy: length - shift)\n    return String(digits[right..<digits.endIndex]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.count\n    let shift = shift\
    \ % length\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n\
    \    let right = digits.index(digits.startIndex, offsetBy: length)\n    let left_digits\
    \ = String(digits[left..<right])\n    let right_digits = String(digits[digits.startIndex..<left])\n\
    \    return left_digits + right_digits", "    let str = String(x)\n    if shift\
    \ > str.count {\n        return String(str.reversed())\n    }\n    let index =\
    \ str.index(str.startIndex, offsetBy: shift)\n    return String(str[index...]\
    \ + str[..<index])", "    let digits = String(x)\n    let n = digits.count\n \
    \   let shift = shift % n\n    let left = digits.index(digits.startIndex, offsetBy:\
    \ shift)\n    let right = digits.index(digits.startIndex, offsetBy: n - shift)\n\
    \    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    let length = digits.count\n    if shift > length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let suffix = digits[index...]\n    let prefix = digits[..<index]\n\
    \    return String(suffix + prefix)", "    var x = x\n    var shift = shift\n\
    \    var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    shift %= digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    var digits\
    \ = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let str = String(x)\n    let len = str.count\n\
    \    if shift >= len {\n        return String(str.reversed())\n    }\n    let\
    \ index = str.index(str.startIndex, offsetBy: shift)\n    return String(str[index..<str.endIndex]\
    \ + str[str.startIndex..<index])", "    var x = x\n    var shift = shift\n   \
    \ var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift\
    \ = digits.count\n    }\n    for i in 0..<shift {\n        result += String(digits[digits.count\
    \ - shift + i])\n    }\n    for i in 0..<digits.count - shift {\n        result\
    \ += String(digits[i])\n    }\n    return result", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    var x = x\n    var shift\
    \ = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift\
    \ = digits.count\n    }\n    digits = digits.reversed()\n    digits = digits.rotate(shift)\n\
    \    return digits.map { String($0) }.joined()", "    let digits = String(x)\n\
    \    let n = digits.count\n    let shift = shift % n\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    let length = digits.count\n    let shift = shift\
    \ % length\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n\
    \    let right = digits.index(digits.startIndex, offsetBy: length - shift)\n \
    \   let left_digits = String(digits[left..<digits.endIndex])\n    let right_digits\
    \ = String(digits[digits.startIndex..<right])\n    return left_digits + right_digits",
  "    let digits = String(x)\n    let n = digits.count\n    if shift > n {\n    \
    \    return String(digits.reversed())\n    }\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ prefix = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    let digits = String(x)\n    if shift > digits.count {\n   \
    \     return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let shifted = digits[index...] + digits[..<index]\n  \
    \  return String(shifted)", "    let digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix) + String(prefix)", "    var x = x\n    var digits =\
    \ [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    digits.reverse()\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted)", "    let n = String(x).count\n    if shift > n {\n\
    \        return String(String(x).reversed())\n    }\n    let left = String(x).prefix(n\
    \ - shift)\n    let right = String(x).suffix(shift)\n    return String(right +\
    \ left)", "    let digits = String(x)\n    if shift >= digits.count {\n      \
    \  return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let shift = shift % digits.count\n    let prefix\
    \ = digits.prefix(shift)\n    let suffix = digits.suffix(digits.count - shift)\n\
    \    return String(suffix + prefix)", "    let x_str = String(x)\n    let x_len\
    \ = x_str.count\n    if shift > x_len {\n        return String(x_str.reversed())\n\
    \    }\n    let x_shift = x_str.index(x_str.startIndex, offsetBy: shift)\n   \
    \ let x_shift_str = String(x_str[x_shift...])\n    let x_shift_str_rev = String(x_shift_str.reversed())\n\
    \    let x_shift_str_rev_len = x_shift_str_rev.count\n    let x_shift_str_rev_end\
    \ = x_shift_str_rev.index(x_shift_str_rev.startIndex, offsetBy: x_shift_str_rev_len)\n\
    \    let x_shift_str_rev_end_str = String(x_shift_str_rev[..<x_shift_str_rev_end])\n\
    \    let x_shift_str_rev_end_str_rev = String(x_shift_str_rev_end_str.reversed())\n\
    \    return x_shift_str_rev_end_str_rev + x_shift_str", "    let x_str = String(x)\n\
    \    let x_len = x_str.count\n    if shift >= x_len {\n        return String(x_str.reversed())\n\
    \    }\n    let shift_str = x_str[x_str.index(x_str.startIndex, offsetBy: shift)..<x_str.endIndex]\n\
    \    let shift_str_rev = String(shift_str.reversed())\n    let shift_str_rev_len\
    \ = shift_str_rev.count\n    let shift_str_rev_idx = shift_str_rev.index(shift_str_rev.startIndex,\
    \ offsetBy: shift_str_rev_len - shift)\n    let shift_str_rev_sub = shift_str_rev[shift_str_rev.startIndex..<shift_str_rev_idx]\n\
    \    let shift_str_rev_sub_str = String(shift_str_rev_sub)\n    let shift_str_rev_sub_str_len\
    \ = shift_str_rev_sub_str.count\n    let shift_str_rev_sub_str_idx = shift_str_rev_sub_str.index(shift_str_rev_sub_str.startIndex,\
    \ offsetBy: shift_str_rev_sub_str_len - shift)\n    let shift_str_rev_sub_str_sub\
    \ = shift_str_rev_sub_str[shift_str_rev_sub_str.startIndex..<shift_str_rev_sub_str_idx]\n\
    \    let shift_str_rev_sub_str_sub_str = String(shift_str_rev_sub_str_sub)\n \
    \   let shift_str_rev_sub_str_sub_str_len = shift_str_rev_sub_str_sub_str.count\n\
    \    let shift_str_rev_sub_str_sub_str_idx = shift_str_rev_sub_str_sub_str.index(shift_str_rev_sub_str_sub_str.startIndex,\
    \ offsetBy: shift_str_rev_sub_str_sub_str_len - shift)\n    let shift_str_rev_sub_str_",
  "    let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted.reversed())", "    let digits = String(x)\n    let n\
    \ = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n - shift)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    let n\
    \ = digits.count\n    let shift = shift % n\n    let first = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let second = digits.index(digits.startIndex, offsetBy:\
    \ n - shift)\n    return String(digits[first..<second] + digits[digits.startIndex..<first])",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shift = shift % digits.count\n   \
    \ let shifted = digits[digits.count - shift ..< digits.count] + digits[0 ..< digits.count\
    \ - shift]\n    return String(shifted.map { String($0) }.joined())", "    let\
    \ s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i..<s.endIndex]\
    \ + s[s.startIndex..<i])", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let suffix = digits[index...]\n    let prefix = digits[..<index]\n\
    \    return String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let shift_digits = digits[0..<shift].reversed()\n    let rest_digits = digits[shift..<digits.count]\n\
    \    return String(shift_digits + rest_digits)", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    if shift > length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let shift\
    \ = shift % digits.count\n    let shifted = digits[digits.count - shift ..< digits.count]\
    \ + digits[0 ..< digits.count - shift]\n    return String(shifted.map { String($0)\
    \ }.joined())", "    let digits = String(x)\n    let n = digits.count\n    if\
    \ shift > n {\n        return String(digits.reversed())\n    }\n    let i = n\
    \ - shift\n    let left = digits[digits.index(digits.startIndex, offsetBy: i)..<digits.endIndex]\n\
    \    let right = digits[digits.startIndex..<digits.index(digits.startIndex, offsetBy:\
    \ i)]\n    return String(left + right)", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix = digits[..<index]\n\
    \    let suffix = digits[index...]\n    return String(suffix + prefix)", "   \
    \ let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[index...]\n    let suffix = digits[..<index]\n\
    \    return String(prefix + suffix)", "    let s = String(x)\n    let n = s.count\n\
    \    if shift >= n {\n        return String(s.reversed())\n    }\n    let i =\
    \ s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...] + s[..<i])",
  "    let digits = String(x)\n    let n = digits.count\n    if shift > n {\n    \
    \    return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let str = String(x)\n\
    \    let len = str.count\n    if shift > len {\n        return String(str.reversed())\n\
    \    }\n    let start = str.index(str.startIndex, offsetBy: shift)\n    let end\
    \ = str.index(str.endIndex, offsetBy: -shift)\n    return String(str[start..<end])",
  "    let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    if shift\
    \ >= digits.count {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift > length {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    let first\
    \ = digits[..<index]\n    let second = digits[index...]\n    return String(second\
    \ + first)", "    let digits = String(x)\n    let length = digits.count\n    let\
    \ shift = shift % length\n    let prefix = digits.prefix(length - shift)\n   \
    \ let suffix = digits.suffix(shift)\n    return String(suffix + prefix)", "  \
    \  let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var x = x\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    if shift > digits.count {\n        return digits.reversed().map\
    \ { String($0) }.joined()\n    }\n    let shift = shift % digits.count\n    let\
    \ shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return shifted.map\
    \ { String($0) }.joined()", "    let digits = String(x)\n    let n = digits.count\n\
    \    let s = shift % n\n    let left = String(digits.suffix(s))\n    let right\
    \ = String(digits.prefix(n - s))\n    return left + right", "    var x = x\n \
    \   var shift = shift\n    var result = \"\"\n    while x > 0 {\n        result\
    \ = String(x % 10) + result\n        x /= 10\n        shift -= 1\n    }\n    while\
    \ shift > 0 {\n        result = \"0\" + result\n        shift -= 1\n    }\n  \
    \  return result", "    var digits = String(x)\n    if shift > digits.count {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var shift = shift\n    var digits: [Int]\
    \ = []\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n  \
    \  }\n    while shift > digits.count {\n        shift -= digits.count\n    }\n\
    \    if shift == digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n   \
    \ return String(shifted.reversed())", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  digits.reverse()\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted)", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let x_str = String(x)\n    let x_len = x_str.count\n    if shift >= x_len\
    \ {\n        return String(x_str.reversed())\n    }\n    let x_shift = x_str.index(x_str.startIndex,\
    \ offsetBy: shift)\n    let x_shift_str = String(x_str[x_shift...])\n    let x_shift_str_rev\
    \ = String(x_shift_str.reversed())\n    let x_shift_str_rev_len = x_shift_str_rev.count\n\
    \    let x_shift_str_rev_end = x_shift_str_rev.index(x_shift_str_rev.startIndex,\
    \ offsetBy: x_shift_str_rev_len - shift)\n    let x_shift_str_rev_end_str = String(x_shift_str_rev[x_shift_str_rev_end...])\n\
    \    let x_shift_str_rev_end_str_rev = String(x_shift_str_rev_end_str.reversed())\n\
    \    return x_shift_str_rev_end_str_rev + x_shift_str", "    let x_str = String(x)\n\
    \    let x_len = x_str.count\n    if shift > x_len {\n        return String(x_str.reversed())\n\
    \    }\n    let x_shift = x_str.index(x_str.startIndex, offsetBy: shift)\n   \
    \ let x_shift_str = String(x_str[x_shift...])\n    let x_shift_str_rev = String(x_shift_str.reversed())\n\
    \    let x_shift_str_rev_len = x_shift_str_rev.count\n    let x_shift_str_rev_index\
    \ = x_shift_str_rev.index(x_shift_str_rev.startIndex, offsetBy: x_shift_str_rev_len\
    \ - shift)\n    let x_shift_str_rev_index_str = String(x_shift_str_rev[x_shift_str_rev_index...])\n\
    \    let x_shift_str_rev_index_str_rev = String(x_shift_str_rev_index_str.reversed())\n\
    \    return x_shift_str_rev_index_str_rev + x_shift_str", "    var x = x\n   \
    \ var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n   \
    \     x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[digits.count - shift ..< digits.count] + digits[0\
    \ ..< digits.count - shift]\n    return String(shifted.map { String($0) }.joined())",
  "    let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let n = digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    var x = x\n    var digits = [Int]()\n    while x\
    \ > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift >\
    \ digits.count {\n        return String(digits.reversed())\n    }\n    let shift\
    \ = shift % digits.count\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n\
    \    return String(shifted.reversed())", "    let digits = String(x)\n    if shift\
    \ >= digits.count {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    var x = x\n    var digits = [Int]()\n    while x\
    \ > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift >\
    \ digits.count {\n        return String(digits.reversed())\n    }\n    let shift\
    \ = shift % digits.count\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n\
    \    return String(shifted.reversed())", "    let digits = String(x)\n    let\
    \ length = digits.count\n    if shift > length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    let n = digits.count\n\
    \    if shift >= n {\n        return String(digits.reversed())\n    }\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: shift)\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: n - shift)\n    return String(digits[right..<digits.endIndex] + digits[digits.startIndex..<left])",
  "    var x = x\n    var digits = [Int]()\n    var result = \"\"\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    for _ in 0..<shift\
    \ {\n        digits.insert(digits.removeLast(), at: 0)\n    }\n    for digit in\
    \ digits {\n        result += String(digit)\n    }\n    return result", "    let\
    \ digits = String(x)\n    let len = digits.count\n    if shift >= len {\n    \
    \    return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var x = x\n    var shift = shift\n\
    \    var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    shift %= digits.count\n    digits = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return digits.map { String($0) }.joined()", "    var\
    \ digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let n = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    let length\
    \ = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let start = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let end = digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[start..<end])",
  "    let s = String(x)\n    if shift >= s.count {\n        return String(s.reversed())\n\
    \    }\n    let index = s.index(s.startIndex, offsetBy: shift)\n    return String(s.suffix(from:\
    \ index) + s.prefix(upTo: index))", "    let digits = String(x)\n    let length\
    \ = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: length - shift)\n    return\
    \ String(digits[left..<right] + digits[digits.startIndex..<left])"]
stop_tokens:
- "\n}"
