name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n\
  /// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int,\
  \ shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    let digits = String(x)\n    if shift >= digits.count {\n      \
    \  return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n    var\
    \ result = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n        x /=\
    \ 10\n    }\n    if shift > digits.count {\n        digits.reverse()\n    } else\
    \ {\n        digits = Array(digits[digits.count - shift ..< digits.count] + digits[0\
    \ ..< digits.count - shift])\n    }\n    for digit in digits {\n        result\
    \ += String(digit)\n    }\n    return result", "    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.count - shift\n    let right = digits.count - 1\n\
    \    digits.swapAt(left, right)\n    return String(digits.reversed())", "    var\
    \ x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let str =\
    \ String(x)\n    let count = str.count\n    if shift > count {\n        return\
    \ String(str.reversed())\n    }\n    let index = str.index(str.startIndex, offsetBy:\
    \ shift)\n    let prefix = str[str.startIndex..<index]\n    let suffix = str[index..<str.endIndex]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let n =\
    \ digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var x = x\n    var\
    \ shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    shift %= digits.count\n    return String(digits[shift..<digits.count]\
    \ + digits[0..<shift])", "    let digits = String(x)\n    let n = digits.count\n\
    \    if shift >= n {\n        return String(digits.reversed())\n    }\n    let\
    \ left = digits.index(digits.startIndex, offsetBy: shift)\n    let right = digits.index(digits.startIndex,\
    \ offsetBy: n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    let shift = shift % length\n    let left =\
    \ String(digits.suffix(shift))\n    let right = String(digits.prefix(length -\
    \ shift))\n    return left + right", "    let digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    var x = x\n    var digits = [Int]()\n    while x\
    \ > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    digits.reverse()\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted)", "    var x = x\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let shift = shift %\
    \ digits.count\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n\
    \    return String(shifted.reversed())", "    let digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let n = digits.count\n\
    \    if shift > n {\n        return String(digits.reversed())\n    }\n    let\
    \ i = n - shift\n    let left = digits[digits.index(digits.startIndex, offsetBy:\
    \ i)...]\n    let right = digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: i)]\n    return String(left + right)", "    let digits = String(x)\n\
    \    let length = digits.count\n    let shift = shift % length\n    let prefix\
    \ = String(digits.suffix(shift))\n    let suffix = String(digits.prefix(length\
    \ - shift))\n    return prefix + suffix", "    var digits = String(x)\n    if\
    \ shift > digits.count {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    let digits = String(x)\n    let len = digits.count\n    if shift >= len {\n\
    \        return String(digits.reversed())\n    }\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ len - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())"]
stop_tokens:
- "\n}"
