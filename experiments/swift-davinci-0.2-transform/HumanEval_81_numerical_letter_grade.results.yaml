language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3_583iu9/tmp3_583iu9.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b134f2c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b134efbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b134efbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b134efba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_583iu9                        0x000055eda34547f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b134f4b0460 __libc_start_main +
    245

    6    tmp3_583iu9                        0x000055eda3454319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9unsqc_f/tmp9unsqc_f.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba171f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba171c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba171c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba171c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9unsqc_f                        0x000055da5c28a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba17212c460 __libc_start_main +
    245

    6    tmp9unsqc_f                        0x000055da5c28a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9unsqc_f/tmp9unsqc_f.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba171f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba171c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba171c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba171c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9unsqc_f                        0x000055da5c28a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba17212c460 __libc_start_main +
    245

    6    tmp9unsqc_f                        0x000055da5c28a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrades: [String]\
    \ = []\n    for i in 0..<grades.count {\n        if grades[i] >= 4.0 {\n     \
    \       letterGrades.append(\"A+\")\n        } else if grades[i] >= 3.7 {\n  \
    \          letterGrades.append(\"A\")\n        } else if grades[i] >= 3.3 {\n\
    \            letterGrades.append(\"A-\")\n        } else if grades[i] >= 3.0 {\n\
    \            letterGrades.append(\"B+\")\n        } else if grades[i] >= 2.7 {\n\
    \            letterGrades.append(\"B\")\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades.append(\"B-\")\n        } else if grades[i] >= 2.0 {\n\
    \            letterGrades.append(\"C+\")\n        } else if grades[i] >= 1.7 {\n\
    \            letterGrades.append(\"C\")\n        } else if grades[i] >= 1.3 {\n\
    \            letterGrades.append(\"C-\")\n        } else if grades[i] >= 1.0 {\n\
    \            letterGrades.append(\"D+\")\n        } else if grades[i] >= 0.7 {\n\
    \            letterGrades.append(\"D\")\n        } else if grades[i] >= 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7e6r5p0r/tmp7e6r5p0r.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ef46e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ef43dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ef43da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ef43d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e6r5p0r                        0x000055a89d71f876 <unavailable> + 6262

    5    libc.so.6                          0x00002b4ef48cf460 __libc_start_main +
    245

    6    tmp7e6r5p0r                        0x000055a89d71f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n \
    \       } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n   \
    \     } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n    \
    \    } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n       \
    \ } else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        }\
    \ else if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if\
    \ grade > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n\
    \            letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9unsqc_f/tmp9unsqc_f.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba171f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba171c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba171c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba171c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9unsqc_f                        0x000055da5c28a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba17212c460 __libc_start_main +
    245

    6    tmp9unsqc_f                        0x000055da5c28a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var result: [String]\
    \ = []\n    for grade in grades {\n        if grade == 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            result.append(\"A\")\n   \
    \     } else if grade > 3.3 {\n            result.append(\"A-\")\n        } else\
    \ if grade > 3.0 {\n            result.append(\"B+\")\n        } else if grade\
    \ > 2.7 {\n            result.append(\"B\")\n        } else if grade > 2.3 {\n\
    \            result.append(\"B-\")\n        } else if grade > 2.0 {\n        \
    \    result.append(\"C+\")\n        } else if grade > 1.7 {\n            result.append(\"\
    C\")\n        } else if grade > 1.3 {\n            result.append(\"C-\")\n   \
    \     } else if grade > 1.0 {\n            result.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            result.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz2mx1mju/tmpz2mx1mju.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea63627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6331eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6331e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6331d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2mx1mju                        0x0000564e2ad2f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aea63813460 __libc_start_main +
    245

    6    tmpz2mx1mju                        0x0000564e2ad2f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9unsqc_f/tmp9unsqc_f.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba171f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba171c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba171c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba171c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9unsqc_f                        0x000055da5c28a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba17212c460 __libc_start_main +
    245

    6    tmp9unsqc_f                        0x000055da5c28a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n         \
    \   return \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n       \
    \ case 3.0..<3.3:\n            return \"B+\"\n        case 2.7..<3.0:\n      \
    \      return \"B\"\n        case 2.3..<2.7:\n            return \"B-\"\n    \
    \    case 2.0..<2.3:\n            return \"C+\"\n        case 1.7..<2.0:\n   \
    \         return \"C\"\n        case 1.3..<1.7:\n            return \"C-\"\n \
    \       case 1.0..<1.3:\n            return \"D+\"\n        case 0.7..<1.0:\n\
    \            return \"D\"\n        case 0.0..<0.7:\n            return \"D-\"\n\
    \        default:\n            return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpm6fael_p/tmpm6fael_p.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade4adcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade4aac4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade4aac4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade4aac37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6fael_p                        0x0000564d772927b6 <unavailable> + 6070

    5    libc.so.6                          0x00002ade4afb9460 __libc_start_main +
    245

    6    tmpm6fael_p                        0x0000564d772922d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxkfwxijr/tmpxkfwxijr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7f5668c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7f535fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7f535f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7f535e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkfwxijr                        0x000055b64f4c45e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ac7f5854460 __libc_start_main +
    245

    6    tmpxkfwxijr                        0x000055b64f4c4109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n \
    \       } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n   \
    \     } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n    \
    \    } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n       \
    \ } else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        }\
    \ else if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if\
    \ grade > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n\
    \            letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprlxhcacg/tmprlxhcacg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2251e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab224edbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab224edb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab224eda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprlxhcacg                        0x00005599c2b455e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ab2253d0460 __libc_start_main +
    245

    6    tmprlxhcacg                        0x00005599c2b45109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    var letterGrades: [String]\
    \ = []\n    for grade in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n     \
    \   } else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n       \
    \ } else if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        }\
    \ else if grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if grade > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if\
    \ grade > 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade\
    \ > 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0\
    \ {\n            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz2mx1mju/tmpz2mx1mju.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea63627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6331eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6331e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6331d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2mx1mju                        0x0000564e2ad2f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aea63813460 __libc_start_main +
    245

    6    tmpz2mx1mju                        0x0000564e2ad2f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n \
    \       } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n   \
    \     } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n    \
    \    } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n       \
    \ } else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        }\
    \ else if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if\
    \ grade > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n\
    \            letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    case 0.0:\n            letter_grades.append(\"E\")\n        default:\n  \
    \          letter_grades.append(\"Invalid grade\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2jdpekr8/tmp2jdpekr8.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae560e1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae560b16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae560b16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae560b157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jdpekr8                        0x000055d19ff0f926 <unavailable> + 6438

    5    libc.so.6                          0x00002ae56100b460 __libc_start_main +
    245

    6    tmp2jdpekr8                        0x000055d19ff0f449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades_letter: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            grades_letter.append(\"\
    A+\")\n        case 3.7..<4.0:\n            grades_letter.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            grades_letter.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            grades_letter.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   grades_letter.append(\"B\")\n        case 2.3..<2.7:\n            grades_letter.append(\"\
    B-\")\n        case 2.0..<2.3:\n            grades_letter.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            grades_letter.append(\"C\")\n        case 1.3..<1.7:\n\
    \            grades_letter.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   grades_letter.append(\"D+\")\n        case 0.7..<1.0:\n            grades_letter.append(\"\
    D\")\n        case 0.0..<0.7:\n            grades_letter.append(\"D-\")\n    \
    \    case 0.0:\n            grades_letter.append(\"E\")\n        default:\n  \
    \          grades_letter.append(\"Invalid\")\n        }\n    }\n    return grades_letter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_0fczq_y/tmp_0fczq_y.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abad3554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abad324bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abad324b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abad324a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0fczq_y                        0x0000563e5a0288d6 <unavailable> + 6358

    5    libc.so.6                          0x00002abad3740460 __libc_start_main +
    245

    6    tmp_0fczq_y                        0x0000563e5a0283f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp31mbgut6/tmp31mbgut6.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0bde3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0badab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0bada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0bad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31mbgut6                        0x00005636e7de98d6 <unavailable> + 6358

    5    libc.so.6                          0x00002acf0bfcf460 __libc_start_main +
    245

    6    tmp31mbgut6                        0x00005636e7de93f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1b2s9u9b/tmp1b2s9u9b.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac441e75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac441b6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac441b6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac441b6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1b2s9u9b                        0x0000556e2c5ad7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ac442061460 __libc_start_main +
    245

    6    tmp1b2s9u9b                        0x0000556e2c5ad319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n \
    \       } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n  \
    \      } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n      \
    \  } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n        }\
    \ else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        } else\
    \ if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n      \
    \      letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    case 0.0:\n            letter_grades.append(\"E\")\n        default:\n  \
    \          letter_grades.append(\"Invalid\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp30i0vorf/tmp30i0vorf.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76cced8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76ccbcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76ccbcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76ccbce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp30i0vorf                        0x000055801f72e8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76cd0c4460 __libc_start_main +
    245

    6    tmp30i0vorf                        0x000055801f72e3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n \
    \       } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n   \
    \     } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n    \
    \    } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n       \
    \ } else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        }\
    \ else if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if\
    \ grade > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n\
    \            letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: Implement this function!\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu05_62k9/tmpu05_62k9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f35375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f3506cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f3506c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f3506b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu05_62k9                        0x00005645485575e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b4f35561460 __libc_start_main +
    245

    6    tmpu05_62k9                        0x0000564548557109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letter_grades.append(\"A\")\n    \
    \    case 3.3..<3.7:\n            letter_grades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7..<3.0:\n         \
    \   letter_grades.append(\"B\")\n        case 2.3..<2.7:\n            letter_grades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter_grades.append(\"C+\")\n   \
    \     case 1.7..<2.0:\n            letter_grades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letter_grades.append(\"C-\")\n        case 1.0..<1.3:\n         \
    \   letter_grades.append(\"D+\")\n        case 0.7..<1.0:\n            letter_grades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letter_grades.append(\"D-\")\n    \
    \    case 0.0:\n            letter_grades.append(\"E\")\n        default:\n  \
    \          letter_grades.append(\"Invalid\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp30i0vorf/tmp30i0vorf.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76cced8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76ccbcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76ccbcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76ccbce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp30i0vorf                        0x000055801f72e8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b76cd0c4460 __libc_start_main +
    245

    6    tmp30i0vorf                        0x000055801f72e3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp31mbgut6/tmp31mbgut6.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0bde3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0badab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0bada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0bad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31mbgut6                        0x00005636e7de98d6 <unavailable> + 6358

    5    libc.so.6                          0x00002acf0bfcf460 __libc_start_main +
    245

    6    tmp31mbgut6                        0x00005636e7de93f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9unsqc_f/tmp9unsqc_f.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba171f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba171c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba171c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba171c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9unsqc_f                        0x000055da5c28a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba17212c460 __libc_start_main +
    245

    6    tmp9unsqc_f                        0x000055da5c28a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9unsqc_f/tmp9unsqc_f.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba171f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba171c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba171c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba171c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9unsqc_f                        0x000055da5c28a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba17212c460 __libc_start_main +
    245

    6    tmp9unsqc_f                        0x000055da5c28a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1b2s9u9b/tmp1b2s9u9b.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac441e75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac441b6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac441b6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac441b6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1b2s9u9b                        0x0000556e2c5ad7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ac442061460 __libc_start_main +
    245

    6    tmp1b2s9u9b                        0x0000556e2c5ad319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var result: [String]\
    \ = []\n    for grade in grades {\n        if grade == 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            result.append(\"A\")\n   \
    \     } else if grade > 3.3 {\n            result.append(\"A-\")\n        } else\
    \ if grade > 3.0 {\n            result.append(\"B+\")\n        } else if grade\
    \ > 2.7 {\n            result.append(\"B\")\n        } else if grade > 2.3 {\n\
    \            result.append(\"B-\")\n        } else if grade > 2.0 {\n        \
    \    result.append(\"C+\")\n        } else if grade > 1.7 {\n            result.append(\"\
    C\")\n        } else if grade > 1.3 {\n            result.append(\"C-\")\n   \
    \     } else if grade > 1.0 {\n            result.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            result.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1b2s9u9b/tmp1b2s9u9b.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac441e75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac441b6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac441b6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac441b6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1b2s9u9b                        0x0000556e2c5ad7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ac442061460 __libc_start_main +
    245

    6    tmp1b2s9u9b                        0x0000556e2c5ad319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz2mx1mju/tmpz2mx1mju.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea63627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6331eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6331e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6331d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2mx1mju                        0x0000564e2ad2f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aea63813460 __libc_start_main +
    245

    6    tmpz2mx1mju                        0x0000564e2ad2f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz2mx1mju/tmpz2mx1mju.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea63627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6331eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6331e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6331d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2mx1mju                        0x0000564e2ad2f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aea63813460 __libc_start_main +
    245

    6    tmpz2mx1mju                        0x0000564e2ad2f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprlxhcacg/tmprlxhcacg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2251e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab224edbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab224edb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab224eda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprlxhcacg                        0x00005599c2b455e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ab2253d0460 __libc_start_main +
    245

    6    tmprlxhcacg                        0x00005599c2b45109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2c50gwd_/tmp2c50gwd_.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade32040c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade31d37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade31d37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade31d367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2c50gwd_                        0x000056033ac61926 <unavailable> + 6438

    5    libc.so.6                          0x00002ade3222c460 __libc_start_main +
    245

    6    tmp2c50gwd_                        0x000056033ac61449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3_583iu9/tmp3_583iu9.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b134f2c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b134efbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b134efbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b134efba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_583iu9                        0x000055eda34547f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b134f4b0460 __libc_start_main +
    245

    6    tmp3_583iu9                        0x000055eda3454319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3_583iu9/tmp3_583iu9.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b134f2c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b134efbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b134efbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b134efba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_583iu9                        0x000055eda34547f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b134f4b0460 __libc_start_main +
    245

    6    tmp3_583iu9                        0x000055eda3454319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz2mx1mju/tmpz2mx1mju.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea63627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6331eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6331e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6331d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2mx1mju                        0x0000564e2ad2f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aea63813460 __libc_start_main +
    245

    6    tmpz2mx1mju                        0x0000564e2ad2f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n         \
    \   return \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n       \
    \ case 3.0..<3.3:\n            return \"B+\"\n        case 2.7..<3.0:\n      \
    \      return \"B\"\n        case 2.3..<2.7:\n            return \"B-\"\n    \
    \    case 2.0..<2.3:\n            return \"C+\"\n        case 1.7..<2.0:\n   \
    \         return \"C\"\n        case 1.3..<1.7:\n            return \"C-\"\n \
    \       case 1.0..<1.3:\n            return \"D+\"\n        case 0.7..<1.0:\n\
    \            return \"D\"\n        case 0.0..<0.7:\n            return \"D-\"\n\
    \        default:\n            return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpm6fael_p/tmpm6fael_p.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade4adcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade4aac4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade4aac4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade4aac37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6fael_p                        0x0000564d772927b6 <unavailable> + 6070

    5    libc.so.6                          0x00002ade4afb9460 __libc_start_main +
    245

    6    tmpm6fael_p                        0x0000564d772922d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n \
    \       } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n   \
    \     } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n    \
    \    } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n       \
    \ } else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        }\
    \ else if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if\
    \ grade > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n\
    \            letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxkfwxijr/tmpxkfwxijr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7f5668c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7f535fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7f535f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7f535e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkfwxijr                        0x000055b64f4c45e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ac7f5854460 __libc_start_main +
    245

    6    tmpxkfwxijr                        0x000055b64f4c4109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade > 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ > 3.3 {\n            result.append(\"A-\")\n        } else if grade > 3.0 {\n\
    \            result.append(\"B+\")\n        } else if grade > 2.7 {\n        \
    \    result.append(\"B\")\n        } else if grade > 2.3 {\n            result.append(\"\
    B-\")\n        } else if grade > 2.0 {\n            result.append(\"C+\")\n  \
    \      } else if grade > 1.7 {\n            result.append(\"C\")\n        } else\
    \ if grade > 1.3 {\n            result.append(\"C-\")\n        } else if grade\
    \ > 1.0 {\n            result.append(\"D+\")\n        } else if grade > 0.7 {\n\
    \            result.append(\"D\")\n        } else if grade > 0.0 {\n         \
    \   result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3_583iu9/tmp3_583iu9.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b134f2c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b134efbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b134efbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b134efba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_583iu9                        0x000055eda34547f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b134f4b0460 __libc_start_main +
    245

    6    tmp3_583iu9                        0x000055eda3454319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrades: [String]\
    \ = []\n    for grade in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n \
    \       } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n   \
    \     } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n       \
    \ } else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else\
    \ if grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if\
    \ grade >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n\
    \            letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz18jwuud/tmpz18jwuud.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc21eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc1ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdc1ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdc1ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz18jwuud                        0x000055fac510b7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002afdc23d6460 __libc_start_main +
    245

    6    tmpz18jwuud                        0x000055fac510b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n         \
    \   return \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n       \
    \ case 3.0..<3.3:\n            return \"B+\"\n        case 2.7..<3.0:\n      \
    \      return \"B\"\n        case 2.3..<2.7:\n            return \"B-\"\n    \
    \    case 2.0..<2.3:\n            return \"C+\"\n        case 1.7..<2.0:\n   \
    \         return \"C\"\n        case 1.3..<1.7:\n            return \"C-\"\n \
    \       case 1.0..<1.3:\n            return \"D+\"\n        case 0.7..<1.0:\n\
    \            return \"D\"\n        case 0.0..<0.7:\n            return \"D-\"\n\
    \        default:\n            return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpm6fael_p/tmpm6fael_p.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade4adcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade4aac4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade4aac4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade4aac37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6fael_p                        0x0000564d772927b6 <unavailable> + 6070

    5    libc.so.6                          0x00002ade4afb9460 __libc_start_main +
    245

    6    tmpm6fael_p                        0x0000564d772922d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n \
    \       } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n  \
    \      } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n      \
    \  } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n        }\
    \ else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        } else\
    \ if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n      \
    \      letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp31mbgut6/tmp31mbgut6.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0bde3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0badab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0bada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0bad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31mbgut6                        0x00005636e7de98d6 <unavailable> + 6358

    5    libc.so.6                          0x00002acf0bfcf460 __libc_start_main +
    245

    6    tmp31mbgut6                        0x00005636e7de93f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    var grade_list: [String]\
    \ = []\n    for grade in grades {\n        if grade >= 4.0 {\n            grade_list.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            grade_list.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            grade_list.append(\"A-\")\n   \
    \     } else if grade >= 3.0 {\n            grade_list.append(\"B+\")\n      \
    \  } else if grade >= 2.7 {\n            grade_list.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            grade_list.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            grade_list.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            grade_list.append(\"C\")\n        } else if grade >= 1.3\
    \ {\n            grade_list.append(\"C-\")\n        } else if grade >= 1.0 {\n\
    \            grade_list.append(\"D+\")\n        } else if grade >= 0.7 {\n   \
    \         grade_list.append(\"D\")\n        } else if grade >= 0.0 {\n       \
    \     grade_list.append(\"D-\")\n        } else {\n            grade_list.append(\"\
    E\")\n        }\n    }\n    return grade_list\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpl0ntrovc/tmpl0ntrovc.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad050b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad050883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad050883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0508827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0ntrovc                        0x00005597dc0ee7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ad050d78460 __libc_start_main +
    245

    6    tmpl0ntrovc                        0x00005597dc0ee2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4mtinod9/tmp4mtinod9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04758c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0444fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0444f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0444e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mtinod9                        0x000056546d11e8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b9e04944460 __libc_start_main +
    245

    6    tmp4mtinod9                        0x000056546d11e3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz2mx1mju/tmpz2mx1mju.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea63627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6331eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6331e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6331d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2mx1mju                        0x0000564e2ad2f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aea63813460 __libc_start_main +
    245

    6    tmpz2mx1mju                        0x0000564e2ad2f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Invalid\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4mtinod9/tmp4mtinod9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04758c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0444fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0444f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0444e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mtinod9                        0x000056546d11e8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b9e04944460 __libc_start_main +
    245

    6    tmp4mtinod9                        0x000056546d11e3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrades = [String]()\n\
    \    for i in 0..<grades.count {\n        if grades[i] == 4.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grades[i] > 3.7 {\n            letterGrades.append(\"\
    A\")\n        } else if grades[i] > 3.3 {\n            letterGrades.append(\"\
    A-\")\n        } else if grades[i] > 3.0 {\n            letterGrades.append(\"\
    B+\")\n        } else if grades[i] > 2.7 {\n            letterGrades.append(\"\
    B\")\n        } else if grades[i] > 2.3 {\n            letterGrades.append(\"\
    B-\")\n        } else if grades[i] > 2.0 {\n            letterGrades.append(\"\
    C+\")\n        } else if grades[i] > 1.7 {\n            letterGrades.append(\"\
    C\")\n        } else if grades[i] > 1.3 {\n            letterGrades.append(\"\
    C-\")\n        } else if grades[i] > 1.0 {\n            letterGrades.append(\"\
    D+\")\n        } else if grades[i] > 0.7 {\n            letterGrades.append(\"\
    D\")\n        } else if grades[i] > 0.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxkfwxijr/tmpxkfwxijr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7f5668c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7f535fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7f535f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7f535e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkfwxijr                        0x000055b64f4c45e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ac7f5854460 __libc_start_main +
    245

    6    tmpxkfwxijr                        0x000055b64f4c4109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"Invalid\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp31mbgut6/tmp31mbgut6.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0bde3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0badab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0bada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0bad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31mbgut6                        0x00005636e7de98d6 <unavailable> + 6358

    5    libc.so.6                          0x00002acf0bfcf460 __libc_start_main +
    245

    6    tmp31mbgut6                        0x00005636e7de93f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrades = [String]()\n\
    \    for i in 0..<grades.count {\n        if grades[i] >= 4.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grades[i] >= 3.7 {\n            letterGrades.append(\"\
    A\")\n        } else if grades[i] >= 3.3 {\n            letterGrades.append(\"\
    A-\")\n        } else if grades[i] >= 3.0 {\n            letterGrades.append(\"\
    B+\")\n        } else if grades[i] >= 2.7 {\n            letterGrades.append(\"\
    B\")\n        } else if grades[i] >= 2.3 {\n            letterGrades.append(\"\
    B-\")\n        } else if grades[i] >= 2.0 {\n            letterGrades.append(\"\
    C+\")\n        } else if grades[i] >= 1.7 {\n            letterGrades.append(\"\
    C\")\n        } else if grades[i] >= 1.3 {\n            letterGrades.append(\"\
    C-\")\n        } else if grades[i] >= 1.0 {\n            letterGrades.append(\"\
    D+\")\n        } else if grades[i] >= 0.7 {\n            letterGrades.append(\"\
    D\")\n        } else if grades[i] >= 0.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4n_t2vt6/tmp4n_t2vt6.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf84400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf840f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf840f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf840f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n_t2vt6                        0x00005623a75838c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aaf845ec460 __libc_start_main +
    245

    6    tmp4n_t2vt6                        0x00005623a75833e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxkfwxijr/tmpxkfwxijr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7f5668c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7f535fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7f535f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7f535e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkfwxijr                        0x000055b64f4c45e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ac7f5854460 __libc_start_main +
    245

    6    tmpxkfwxijr                        0x000055b64f4c4109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz2mx1mju/tmpz2mx1mju.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea63627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6331eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6331e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6331d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2mx1mju                        0x0000564e2ad2f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aea63813460 __libc_start_main +
    245

    6    tmpz2mx1mju                        0x0000564e2ad2f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n \
    \       } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n   \
    \     } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n    \
    \    } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n       \
    \ } else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        }\
    \ else if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if\
    \ grade > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n\
    \            letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9unsqc_f/tmp9unsqc_f.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba171f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba171c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba171c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba171c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9unsqc_f                        0x000055da5c28a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba17212c460 __libc_start_main +
    245

    6    tmp9unsqc_f                        0x000055da5c28a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp61uuie74/tmp61uuie74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20378ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af203481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af203481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2034807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61uuie74                        0x00005599ab7b05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002af203976460 __libc_start_main +
    245

    6    tmp61uuie74                        0x00005599ab7b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgi2uqm7u/tmpgi2uqm7u.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi2uqm7u                        0x00005630ec5807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b339b90b460 __libc_start_main +
    245

    6    tmpgi2uqm7u                        0x00005630ec5802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz2mx1mju/tmpz2mx1mju.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea63627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6331eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6331e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6331d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2mx1mju                        0x0000564e2ad2f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aea63813460 __libc_start_main +
    245

    6    tmpz2mx1mju                        0x0000564e2ad2f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg8k8kcdj/tmpg8k8kcdj.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21176f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21173ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21173eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21173ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8k8kcdj                        0x00005600139497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b21178e0460 __libc_start_main +
    245

    6    tmpg8k8kcdj                        0x00005600139492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz2mx1mju/tmpz2mx1mju.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea63627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6331eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6331e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6331d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2mx1mju                        0x0000564e2ad2f7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aea63813460 __libc_start_main +
    245

    6    tmpz2mx1mju                        0x0000564e2ad2f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014095
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9unsqc_f/tmp9unsqc_f.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba171f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba171c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba171c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba171c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9unsqc_f                        0x000055da5c28a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba17212c460 __libc_start_main +
    245

    6    tmp9unsqc_f                        0x000055da5c28a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014095
