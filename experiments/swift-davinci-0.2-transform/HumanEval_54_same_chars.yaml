name: HumanEval_54_same_chars
language: swift
prompt: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
  \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0: \"\
  abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\", s1:\
  \ \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\")\n///\
  \ false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n/// >>>\
  \ same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\nfunc same_chars(s0:\
  \ String, s1: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
  ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
  \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"\
  dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") ==\
  \ false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\n\
  assert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
completions: ["    let s0 = Array(s0)\n    let s1 = Array(s1)\n    var s0_counts =\
    \ [Character: Int]()\n    var s1_counts = [Character: Int]()\n    for c in s0\
    \ {\n        if let count = s0_counts[c] {\n            s0_counts[c] = count +\
    \ 1\n        } else {\n            s0_counts[c] = 1\n        }\n    }\n    for\
    \ c in s1 {\n        if let count = s1_counts[c] {\n            s1_counts[c] =\
    \ count + 1\n        } else {\n            s1_counts[c] = 1\n        }\n    }\n\
    \    for (c, count) in s0_counts {\n        if let s1_count = s1_counts[c] {\n\
    \            if s1_count < count {\n                return false\n           \
    \ }\n        } else {\n            return false\n        }\n    }\n    return\
    \ true", "    var s0 = s0\n    var s1 = s1\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true", "    var s0_chars\
    \ = Array(s0.characters)\n    var s1_chars = Array(s1.characters)\n    s0_chars.sortInPlace()\n\
    \    s1_chars.sortInPlace()\n    return s0_chars == s1_chars", "    var s0 = s0\n\
    \    var s1 = s1\n    if s0.count != s1.count {\n        return false\n    }\n\
    \    for c in s0 {\n        if let index = s1.firstIndex(of: c) {\n          \
    \  s1.remove(at: index)\n        } else {\n            return false\n        }\n\
    \    }\n    return true", "    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return true", "    var s0 = s0\n    var s1 = s1\n    for\
    \ c in s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true", "    var s0 = s0\n    var s1 = s1\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true", "    var s0_chars\
    \ = [Character](s0)\n    var s1_chars = [Character](s1)\n    s0_chars.sort()\n\
    \    s1_chars.sort()\n    return s0_chars == s1_chars", "    var s0 = s0\n   \
    \ var s1 = s1\n    while !s0.isEmpty {\n        let c = s0.removeFirst()\n   \
    \     if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n      \
    \  } else {\n            return false\n        }\n    }\n    return true", " \
    \   var s0 = s0\n    var s1 = s1\n    for c in s0 {\n        if let i = s1.firstIndex(of:\
    \ c) {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return true", "    var s0_chars = [Character](s0)\n   \
    \ var s1_chars = [Character](s1)\n    s0_chars.sort()\n    s1_chars.sort()\n \
    \   return s0_chars == s1_chars", "    var s0 = s0\n    var s1 = s1\n    for c\
    \ in s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true", "    var s0 = s0\n    var s1 = s1\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true", "    var chars\
    \ = [Character: Int]()\n    for c in s0 {\n        chars[c] = (chars[c] ?? 0)\
    \ + 1\n    }\n    for c in s1 {\n        chars[c] = (chars[c] ?? 0) - 1\n    }\n\
    \    for (_, v) in chars {\n        if v != 0 {\n            return false\n  \
    \      }\n    }\n    return true", "    var s0 = s0\n    var s1 = s1\n    for\
    \ c in s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true", "    var s0 = s0\n    var s1 = s1\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true", "    var s0 = s0\n\
    \    var s1 = s1\n    for c in s0 {\n        if let i = s1.firstIndex(of: c) {\n\
    \            s1.remove(at: i)\n        } else {\n            return false\n  \
    \      }\n    }\n    return true", "    var s0 = s0\n    var s1 = s1\n    for\
    \ c in s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true", "    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty && !s1.isEmpty\
    \ {\n        let c0 = s0.removeFirst()\n        let c1 = s1.removeFirst()\n  \
    \      if c0 != c1 {\n            return false\n        }\n    }\n    return s0.isEmpty\
    \ && s1.isEmpty", "    var s0 = s0\n    var s1 = s1\n    for c in s0 {\n     \
    \   if let i = s1.index(of: c) {\n            s1.remove(at: i)\n        } else\
    \ {\n            return false\n        }\n    }\n    return true"]
stop_tokens:
- "\n}"
