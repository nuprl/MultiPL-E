name: HumanEval_76_is_simple_power
language: swift
prompt: "\n/// Your task is to write a function that returns true if a number x is\
  \ a simple\n/// power of n and false in other cases.\n/// x is a simple power of\
  \ n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n/// true\n\
  /// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x: 8, n:\
  \ 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>> is_simple_power(x:\
  \ 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n/// false\nfunc is_simple_power(x:\
  \ Int, n: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\n\
  assert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x: 4,\
  \ n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
  \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
  \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
  \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
completions: ["    if x == 1 {\n        return true\n    }\n    if n == 1 {\n    \
    \    return false\n    }\n    var result = 1\n    for _ in 1...x {\n        result\
    \ *= n\n        if result == x {\n            return true\n        }\n    }\n\
    \    return false", "    if x == 1 {\n        return true\n    }\n    if n ==\
    \ 1 {\n        return false\n    }\n    var result = n\n    while result < x {\n\
    \        result *= n\n    }\n    return result == x", '    return false', "  \
    \  if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    var result = 1\n    for _ in 1...x {\n        result *= n\n      \
    \  if result == x {\n            return true\n        }\n    }\n    return false",
  "    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return i\
    \ == x", "    if x == 1 {\n        return true\n    }\n    var i = 1\n    while\
    \ i < x {\n        i *= n\n        if i == x {\n            return true\n    \
    \    }\n    }\n    return false", '    return false', '    return false', "  \
    \  if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    var power = n\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x", "    if x == 1 {\n        return true\n    }\n    if\
    \ n == 1 {\n        return false\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x", "    if n == 1 {\n\
    \        return x == 1\n    }\n    var result = 1\n    for _ in 1...n {\n    \
    \    result *= n\n        if result == x {\n            return true\n        }\n\
    \    }\n    return false", '    return false', "    if n == 1 {\n        return\
    \ x == 1\n    }\n    var result = 1\n    var i = 1\n    while result < x {\n \
    \       result = n * result\n        i += 1\n    }\n    return result == x", '    return
    false', "    if x == 1 {\n        return true\n    }\n    var x = x\n    var n\
    \ = n\n    while x % n == 0 {\n        x /= n\n    }\n    return x == 1", "  \
    \  if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    var result = n\n    while result < x {\n        result *= n\n    }\n\
    \    return result == x", '    return false', "    if n == 1 {\n        return\
    \ x == 1\n    }\n    var result = x\n    while result % n == 0 {\n        result\
    \ /= n\n    }\n    return result == 1", "    if x == 1 {\n        return true\n\
    \    }\n    if n == 1 {\n        return false\n    }\n    var result = x\n   \
    \ var power = n\n    while result % power == 0 {\n        result /= power\n  \
    \      if result == 1 {\n            return true\n        }\n    }\n    return\
    \ false", "    if x == 1 {\n        return true\n    }\n    if n == 1 {\n    \
    \    return false\n    }\n    var result = n\n    while result < x {\n       \
    \ result *= n\n    }\n    return result == x"]
stop_tokens:
- "\n}"
