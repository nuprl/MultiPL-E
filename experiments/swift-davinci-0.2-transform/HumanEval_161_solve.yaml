name: HumanEval_161_solve
language: swift
prompt: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n\
  /// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\n\
  func solve(s: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
  \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"\
  #a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
  \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
  \ \"#ccc\") == \"#CCC\")"
completions: ["    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    var result = \"\"\n    for char in s\
    \ {\n        if char.isLetter {\n            result.append(char.isLowercase ?\
    \ char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    var result = \"\"\n    for c in s {\n     \
    \   if c.isLetter {\n            result.append(c.isUppercase ? c.lowercased()\
    \ : c.uppercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for char in s {\n    \
    \    if char.isLetter {\n            result.append(char.isLowercase ? char.uppercased()\
    \ : char.lowercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    var result = \"\"\n    for c in s {\n        if c.isLetter {\n   \
    \         result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n   \
    \     } else {\n            result.append(c)\n        }\n    }\n    return result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    if result.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return result", "    var\
    \ result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    if result.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return result", "    var\
    \ result = \"\"\n    for char in s {\n        if char.isLetter {\n           \
    \ result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n  \
    \      } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    if s.isEmpty {\n        return s\n  \
    \  }\n    var result = \"\"\n    for char in s {\n        if char.isLetter {\n\
    \            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result", "    var result = \"\"\n    for char in s {\n    \
    \    if char.isLetter {\n            result.append(char.isLowercase ? char.uppercased()\
    \ : char.lowercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    guard s.contains(where:\
    \ { $0.isLetter }) else {\n        return String(s.reversed())\n    }\n    return\
    \ String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 })", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = CharacterSet.letters\n\
    \    let digits = CharacterSet.decimalDigits\n    var result = \"\"\n    for c\
    \ in s {\n        if letters.contains(c.unicodeScalars.first!) {\n           \
    \ result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ if digits.contains(c.unicodeScalars.first!) {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : String(result.reversed())",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    if result.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return result", "    var\
    \ result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    var result = \"\"\n    for char in s {\n  \
    \      if char.isLetter {\n            result += String(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = CharacterSet.letters\n    var result = \"\"\n    for c in s {\n\
    \        if letters.contains(c.unicodeScalars.first!) {\n            if c.isUppercase\
    \ {\n                result.append(c.lowercased())\n            } else {\n   \
    \             result.append(c.uppercased())\n            }\n        } else {\n\
    \            result.append(c)\n        }\n    }\n    if result.isEmpty {\n   \
    \     return String(s.reversed())\n    }\n    return result", "    if s.isEmpty\
    \ {\n        return s\n    }\n    var result = \"\"\n    for c in s {\n      \
    \  if c.isLetter {\n            result.append(c.isLowercase ? c.uppercased() :\
    \ c.lowercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result.isEmpty ? String(s.reversed()) : result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result", "    if s.isEmpty {\n        return s\n    }\n   \
    \ var result = \"\"\n    for char in s {\n        if char.isLetter {\n       \
    \     result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result", "    let letters = s.filter { $0.isLetter }\n    if\
    \ letters.isEmpty {\n        return String(s.reversed())\n    }\n    return s.map\
    \ { $0.isLetter ? $0.toggle() : $0 }", "    var result = \"\"\n    for c in s\
    \ {\n        if c.isLetter {\n            result.append(c.isLowercase ? c.uppercased()\
    \ : c.lowercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result.isEmpty ? String(s.reversed()) : result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = CharacterSet.letters\n    var result = \"\"\n    for char in\
    \ s {\n        if letters.contains(char.unicodeScalars.first!) {\n           \
    \ result += String(char).lowercased() == String(char) ? String(char).uppercased()\
    \ : String(char).lowercased()\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return String(s.map { $0.isLetter ? $0.toggle()\
    \ : $0 })", "    let letters = CharacterSet.letters\n    let digits = CharacterSet.decimalDigits\n\
    \    var result = \"\"\n    for c in s {\n        if letters.contains(UnicodeScalar(String(c))!)\
    \ {\n            if c.isUppercase {\n                result.append(c.lowercased())\n\
    \            } else {\n                result.append(c.uppercased())\n       \
    \     }\n        } else if digits.contains(UnicodeScalar(String(c))!) {\n    \
    \        result.append(c)\n        }\n    }\n    if result.isEmpty {\n       \
    \ return String(s.reversed())\n    }\n    return result", "    var result = \"\
    \"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  '    return s.reversed().map { $0.isLetter ? $0.isUppercase ? $0.lowercased() :
    $0.uppercased() : $0 }.joined()', '    return s.reversed().map { $0.isLetter ?
    $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()', "    if s.isEmpty\
    \ {\n        return s\n    }\n    var result = \"\"\n    for char in s {\n   \
    \     if char.isLetter {\n            result.append(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    if s.contains(\"a\") || s.contains(\"b\") || s.contains(\"\
    c\") || s.contains(\"d\") || s.contains(\"e\") || s.contains(\"f\") || s.contains(\"\
    g\") || s.contains(\"h\") || s.contains(\"i\") || s.contains(\"j\") || s.contains(\"\
    k\") || s.contains(\"l\") || s.contains(\"m\") || s.contains(\"n\") || s.contains(\"\
    o\") || s.contains(\"p\") || s.contains(\"q\") || s.contains(\"r\") || s.contains(\"\
    s\") || s.contains(\"t\") || s.contains(\"u\") || s.contains(\"v\") || s.contains(\"\
    w\") || s.contains(\"x\") || s.contains(\"y\") || s.contains(\"z\") {\n      \
    \  for char in s {\n            if char.isUppercase {\n                result\
    \ += String(char).lowercased()\n            } else if char.isLowercase {\n   \
    \             result += String(char).uppercased()\n            } else {\n    \
    \            result += String(char)\n            }\n        }\n    } else {\n\
    \        for char in s {\n            result = String(char) + result\n       \
    \ }\n    }\n    return result", "    let letters = s.filter { $0.isLetter }\n\
    \    if letters.isEmpty {\n        return String(s.reversed())\n    }\n    return\
    \ s.map { $0.isLetter ? $0.toggleCase() : $0 }", "    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    var result = \"\"\n    for char in s {\n  \
    \      if char.isLetter {\n            result += String(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    guard s.rangeOfCharacter(from: CharacterSet.letters) != nil else {\n      \
    \  return String(s.reversed())\n    }\n    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.toggled() : $0 }", "    var result\
    \ = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.toggleCase() : $0 }", "    var result\
    \ = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = CharacterSet.letters\n    var result = \"\"\n    for char in\
    \ s {\n        if letters.contains(char.unicodeScalars.first!) {\n           \
    \ if char.isUppercase {\n                result.append(char.lowercased())\n  \
    \          } else {\n                result.append(char.uppercased())\n      \
    \      }\n        } else {\n            result.append(char)\n        }\n    }\n\
    \    return result.isEmpty ? String(s.reversed()) : result", "    var result =\
    \ \"\"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    var letters = [Character]()\n    for char in s {\n \
    \       if char.isLetter {\n            letters.append(char)\n        }\n    }\n\
    \    if letters.isEmpty {\n        for char in s {\n            result.append(char)\n\
    \        }\n        return String(result.reversed())\n    }\n    for char in s\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       result.append(char.lowercased())\n            } else {\n             \
    \   result.append(char.uppercased())\n            }\n        } else {\n      \
    \      result.append(char)\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result", "    var result = \"\"\n    for char in s {\n    \
    \    if char.isLetter {\n            result.append(char.isLowercase ? char.uppercased()\
    \ : char.lowercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }", "    var result = \"\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let lettersUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for char in s {\n\
    \        if letters.contains(char) {\n            result += String(char).uppercased()\n\
    \        } else if lettersUpper.contains(char) {\n            result += String(char).lowercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    if\
    \ result == s {\n        return String(result.reversed())\n    }\n    return result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return String(s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 })", "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result.append(c.isLowercase ? c.uppercased() : c.lowercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    var letters = [Character]()\n    for char in s {\n \
    \       if char.isLetter {\n            letters.append(char)\n        }\n    }\n\
    \    if letters.isEmpty {\n        for char in s {\n            result.append(char)\n\
    \        }\n        return String(result.reversed())\n    }\n    for char in s\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       result.append(char.lowercased())\n            } else {\n             \
    \   result.append(char.uppercased())\n            }\n        } else {\n      \
    \      result.append(char)\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    var letters = [Character]()\n    for char in s {\n        if char.isLetter\
    \ {\n            letters.append(char)\n        }\n    }\n    if letters.isEmpty\
    \ {\n        for char in s {\n            result.append(char)\n        }\n   \
    \     return String(result.reversed())\n    }\n    for char in s {\n        if\
    \ char.isLetter {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result", "    var result = \"\"\n    for char in s {\n       \
    \ if char.isLetter {\n            result.append(char.isLowercase ? char.uppercased()\
    \ : char.lowercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", " \
    \   let letters = CharacterSet.letters\n    let digits = CharacterSet.decimalDigits\n\
    \    var result = \"\"\n    for char in s {\n        if letters.contains(char.unicodeScalars.first!)\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else if digits.contains(char.unicodeScalars.first!) {\n           \
    \ result.append(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : String(result.reversed())", "    var result = \"\"\n    for char in s {\n\
    \        if char.isLetter {\n            result.append(char.isLowercase ? char.uppercased()\
    \ : char.lowercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  let letters = CharacterSet.letters\n    if s.rangeOfCharacter(from: letters)\
    \ == nil {\n        for c in s.reversed() {\n            result.append(c)\n  \
    \      }\n    } else {\n        for c in s {\n            if letters.contains(UnicodeScalar(String(c))!)\
    \ {\n                if c.isUppercase {\n                    result.append(c.lowercased())\n\
    \                } else {\n                    result.append(c.uppercased())\n\
    \                }\n            } else {\n                result.append(c)\n \
    \           }\n        }\n    }\n    return result", "    var result = \"\"\n\
    \    for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    } else {\n        return String(s.map { $0.isLetter ? $0.toggleCase() : $0\
    \ })\n    }", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            if c.isLowercase {\n   \
    \             result.append(c.uppercased())\n            } else {\n          \
    \      result.append(c.lowercased())\n            }\n        } else {\n      \
    \      result.append(c)\n        }\n    }\n    if result.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    if s.isEmpty {\n     \
    \   return s\n    }\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isUppercase ?\
    \ c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            if char.isUppercase {\n       \
    \         result.append(char.lowercased())\n            } else {\n           \
    \     result.append(char.uppercased())\n            }\n        } else {\n    \
    \        result.append(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result", "    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isLowercase ? c.uppercased() : c.lowercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    if result.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return result", "    var\
    \ result = \"\"\n    for char in s {\n        if char.isLetter {\n           \
    \ result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n  \
    \      } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  '    return s.isEmpty ? s : s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())
    : Character($0.uppercased()) : $0 }.joined()', "    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    if s.isEmpty {\n        return s\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  '    return s.reversed().map { $0.isLetter ? $0.isUppercase ? $0.lowercased() :
    $0.uppercased() : $0 }.joined()', "    var result = \"\"\n    for char in s {\n\
    \        if char.isLetter {\n            result.append(char.isLowercase ? char.uppercased()\
    \ : char.lowercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter {\n\
    \            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    if result.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return result", "    var\
    \ result = \"\"\n    for char in s {\n        if char.isLetter {\n           \
    \ result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n  \
    \      } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    if result.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return result", '    return
    s.reversed().map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :
    Character($0.uppercased()) : $0 }.joined()', "    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = CharacterSet.letters\n    let digits = CharacterSet.decimalDigits\n\
    \    var result = \"\"\n    for char in s {\n        if letters.contains(char.unicodeScalars.first!)\
    \ {\n            result.append(String(char).lowercased() == String(char) ? String(char).uppercased()\
    \ : String(char).lowercased())\n        } else if digits.contains(char.unicodeScalars.first!)\
    \ {\n            result.append(String(char))\n        }\n    }\n    if result.count\
    \ == 0 {\n        return String(s.reversed())\n    }\n    return result", "  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  var isLetter = false\n    for char in s {\n        if char.isLetter {\n   \
    \         isLetter = true\n            result.append(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return isLetter ? result : String(result.reversed())", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var str = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            str.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            str.append(char)\n\
    \        }\n    }\n    return str.isEmpty ? String(s.reversed()) : str", "   \
    \ var result = \"\"\n    for char in s {\n        if char.isLetter {\n       \
    \     result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = CharacterSet.letters\n    let digits = CharacterSet.decimalDigits\n\
    \    var result = \"\"\n    for c in s {\n        if letters.contains(UnicodeScalar(String(c))!)\
    \ {\n            result += String(c).uppercased() == String(c) ? String(c).lowercased()\
    \ : String(c).uppercased()\n        } else if digits.contains(UnicodeScalar(String(c))!)\
    \ {\n            result += String(c)\n        }\n    }\n    return result.count\
    \ > 0 ? result : String(s.reversed())", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isLowercase\
    \ ? c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result"]
stop_tokens:
- "\n}"
