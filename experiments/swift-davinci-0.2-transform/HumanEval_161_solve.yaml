name: HumanEval_161_solve
language: swift
prompt: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n\
  /// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\n\
  func solve(s: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
  \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"\
  #a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
  \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
  \ \"#ccc\") == \"#CCC\")"
completions: ["    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    var result = \"\"\n    for char in s\
    \ {\n        if char.isLetter {\n            result.append(char.isLowercase ?\
    \ char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    var result = \"\"\n    for c in s {\n     \
    \   if c.isLetter {\n            result.append(c.isUppercase ? c.lowercased()\
    \ : c.uppercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for char in s {\n    \
    \    if char.isLetter {\n            result.append(char.isLowercase ? char.uppercased()\
    \ : char.lowercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    var result = \"\"\n    for c in s {\n        if c.isLetter {\n   \
    \         result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n   \
    \     } else {\n            result.append(c)\n        }\n    }\n    return result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isLowercase ? char.uppercased() : char.lowercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result"]
stop_tokens:
- "\n}"
