name: HumanEval_68_pluck
language: swift
prompt: "\n/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
  /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr: [] as\
  \ [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3, 0, 4, 2])\n\
  /// [0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
  /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
  /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int])\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
  \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
  \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
  assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) ==\
  \ [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
completions: ["    var evens = [Int]()\n    var index = 0\n    for i in arr {\n  \
    \      if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    if\
    \ evens.count == 0 {\n        return []\n    }\n    let min = evens.min()\n  \
    \  for i in arr {\n        if i == min {\n            return [i, index]\n    \
    \    }\n        index += 1\n    }\n    return []", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let minEven = evens.min() else { return [] }\n  \
    \  guard let index = arr.firstIndex(of: minEven) else { return [] }\n    return\
    \ [minEven, index]", "    var result = [Int]()\n    var smallestEven = Int.max\n\
    \    var smallestEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < smallestEven {\n            smallestEven\
    \ = value\n            smallestEvenIndex = index\n        }\n    }\n    if smallestEven\
    \ != Int.max {\n        result.append(smallestEven)\n        result.append(smallestEvenIndex)\n\
    \    }\n    return result", "    guard arr.count > 0 else { return [] }\n    let\
    \ evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else { return\
    \ [] }\n    let min = evens.min()!\n    let index = arr.firstIndex(of: min)!\n\
    \    return [min, index]", '    return arr.enumerated().filter { $0.element %
    2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', '    return arr.enumerated().filter
    { $0.element % 2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', " \
    \   var evens = [Int]()\n    var index = 0\n    for i in arr {\n        if i %\
    \ 2 == 0 {\n            evens.append(i)\n        }\n    }\n    if evens.count\
    \ == 0 {\n        return []\n    }\n    evens.sort()\n    for i in arr {\n   \
    \     if i == evens[0] {\n            return [i, index]\n        }\n        index\
    \ += 1\n    }\n    return []", "    var result = [Int]()\n    var min = Int.max\n\
    \    var index = 0\n    for (i, value) in arr.enumerated() {\n        if value\
    \ % 2 == 0 && value < min {\n            min = value\n            index = i\n\
    \        }\n    }\n    if min != Int.max {\n        result.append(min)\n     \
    \   result.append(index)\n    }\n    return result", "    var result = [Int]()\n\
    \    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    if minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ let minEven = evens.min() else { return [] }\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let min = evens.min() else { return [] }\n    guard\
    \ let index = arr.firstIndex(of: min) else { return [] }\n    return [min, index]",
  "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min() else\
    \ { return [] }\n    let index = arr.firstIndex(of: min) ?? 0\n    return [min,\
    \ index]", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    var evens = [Int]()\n \
    \   var index = 0\n    for i in arr {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        }\n    }\n    if evens.count > 0 {\n        evens.sort()\n        for\
    \ i in 0..<arr.count {\n            if arr[i] == evens[0] {\n                index\
    \ = i\n                break\n            }\n        }\n        return [evens[0],\
    \ index]\n    }\n    return []", "    let evens = arr.filter { $0 % 2 == 0 }\n\
    \    guard let minEven = evens.min() else { return [] }\n    let index = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, index]", "    guard !arr.isEmpty else { return\
    \ [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else\
    \ { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard arr.count > 0 else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count\
    \ > 0 else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex\
    \ = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]", "    let\
    \ evens = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min() else\
    \ { return [] }\n    guard let index = arr.firstIndex(of: minEven) else { return\
    \ [] }\n    return [minEven, index]", "    var result = [Int]()\n    var evens\
    \ = [Int]()\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 {\n    \
    \        evens.append(arr[i])\n        }\n    }\n    if evens.count == 0 {\n \
    \       return result\n    }\n    let min = evens.min()\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == min {\n            result.append(arr[i])\n         \
    \   result.append(i)\n            return result\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 {\n            if value < minEven {\n                minEven = value\n\
    \                minEvenIndex = index\n            }\n        }\n    }\n    if\
    \ minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", '    return arr.enumerated().filter { $0.element %
    2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', "    var result =\
    \ [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for\
    \ (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n        \
    \    if value < minEven {\n                minEven = value\n                minEvenIndex\
    \ = index\n            }\n        }\n    }\n    if minEven != Int.max {\n    \
    \    result.append(minEven)\n        result.append(minEvenIndex)\n    }\n    return\
    \ result", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min()\
    \ else { return [] }\n    guard let index = arr.firstIndex(of: min) else { return\
    \ [] }\n    return [min, index]", "    guard !arr.isEmpty else { return [] }\n\
    \    var evens = [Int]()\n    var evensIndex = [Int]()\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \            evensIndex.append(index)\n        }\n    }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = evensIndex[evens.firstIndex(of:\
    \ minEven)!]\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let index = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, index]", "    let evens = arr.filter { $0 %\
    \ 2 == 0 }\n    guard let smallestEven = evens.min() else { return [] }\n    guard\
    \ let index = arr.firstIndex(of: smallestEven) else { return [] }\n    return\
    \ [smallestEven, index]", "    guard !arr.isEmpty else { return [] }\n    var\
    \ evens = [Int]()\n    for (index, value) in arr.enumerated() where value % 2\
    \ == 0 {\n        evens.append(index)\n    }\n    guard !evens.isEmpty else {\
    \ return [] }\n    return [arr[evens.min()!], evens.min()!]", "    guard !arr.isEmpty\
    \ else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let min = evens.min()!\n    let index = arr.firstIndex(of:\
    \ min)!\n    return [min, index]", "    var smallestEvenValue = Int.max\n    var\
    \ smallestEvenValueIndex = -1\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 && value < smallestEvenValue {\n            smallestEvenValue\
    \ = value\n            smallestEvenValueIndex = index\n        }\n    }\n    if\
    \ smallestEvenValueIndex == -1 {\n        return []\n    }\n    return [smallestEvenValue,\
    \ smallestEvenValueIndex]", "    var result = [Int]()\n    var minEven = Int.max\n\
    \    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 {\n            if value < minEven {\n             \
    \   minEven = value\n                minEvenIndex = index\n            }\n   \
    \     }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    let evens\
    \ = arr.filter { $0 % 2 == 0 }\n    guard let smallestEven = evens.min() else\
    \ { return [] }\n    guard let index = arr.firstIndex(of: smallestEven) else {\
    \ return [] }\n    return [smallestEven, index]", "    guard arr.count > 0 else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count\
    \ > 0 else { return [] }\n    let min = evens.min()!\n    let index = arr.firstIndex(of:\
    \ min)!\n    return [min, index]", "    guard arr.count > 0 else { return [] }\n\
    \    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else {\
    \ return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    var result = [Int]()\n\
    \    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           }\n        }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    var evens\
    \ = [Int]()\n    var index = 0\n    for i in arr {\n        if i % 2 == 0 {\n\
    \            evens.append(i)\n        }\n    }\n    if evens.count == 0 {\n  \
    \      return []\n    }\n    let min = evens.min()\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == min {\n            index = i\n            break\n  \
    \      }\n    }\n    return [min!, index]", "    guard !arr.isEmpty else { return\
    \ [] }\n    var evens = [Int]()\n    for (index, value) in arr.enumerated() where\
    \ value % 2 == 0 {\n        evens.append(value)\n        evens.append(index)\n\
    \    }\n    guard !evens.isEmpty else { return [] }\n    var min = evens[0]\n\
    \    var minIndex = 0\n    for (index, value) in evens.enumerated() where index\
    \ % 2 == 0 {\n        if value < min {\n            min = value\n            minIndex\
    \ = index\n        }\n    }\n    return [min, evens[minIndex + 1]]", "    var\
    \ minEven = Int.max\n    var minEvenIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    if minEvenIndex == -1\
    \ {\n        return []\n    }\n    return [minEven, minEvenIndex]", '    return
    arr.enumerated().filter { $0.element % 2 == 0 }.min { $0.element < $1.element
    }?.reversed() ?? []', "    guard !arr.isEmpty else { return [] }\n    let evens\
    \ = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return [] }\n\
    \    let minEven = evens.min()!\n    let index = arr.firstIndex(of: minEven)!\n\
    \    return [minEven, index]", "    guard arr.count > 0 else { return [] }\n \
    \   let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else { return\
    \ [] }\n    let minEven = evens.min()!\n    guard let minEvenIndex = arr.firstIndex(of:\
    \ minEven) else { return [] }\n    return [minEven, minEvenIndex]", '    return
    arr.enumerated().filter { $0.element % 2 == 0 }.sorted { $0.element < $1.element
    }.first.map { [$0.element, $0.offset] } ?? []', "    let evens = arr.filter {\
    \ $0 % 2 == 0 }\n    guard let smallestEven = evens.min() else { return [] }\n\
    \    let smallestEvenIndex = arr.firstIndex(of: smallestEven) ?? 0\n    return\
    \ [smallestEven, smallestEvenIndex]", "    let evens = arr.filter { $0 % 2 ==\
    \ 0 }\n    guard let min = evens.min() else { return [] }\n    let index = arr.firstIndex(of:\
    \ min) ?? 0\n    return [min, index]", "    guard arr.count > 0 else { return\
    \ [] }\n    var evens: [Int] = []\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n        }\n\
    \    }\n    guard evens.count > 0 else { return [] }\n    let minEven = evens.min()!\n\
    \    for (index, value) in arr.enumerated() {\n        if value == minEven {\n\
    \            return [value, index]\n        }\n    }\n    return []", "    let\
    \ evens = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min() else\
    \ { return [] }\n    let index = arr.firstIndex(of: minEven)!\n    return [minEven,\
    \ index]", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min()\
    \ else { return [] }\n    let index = arr.firstIndex(of: min) ?? 0\n    return\
    \ [min, index]", "    guard !arr.isEmpty else { return [] }\n    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return [] }\n    let minEven\
    \ = evens.min()!\n    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return\
    \ [minEven, minEvenIndex]", "    var smallestEven = Int.max\n    var smallestEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 && value < smallestEven {\n            smallestEven = value\n       \
    \     smallestEvenIndex = index\n        }\n    }\n    return smallestEven ==\
    \ Int.max ? [] : [smallestEven, smallestEvenIndex]", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let minEven = evens.min() else { return [] }\n  \
    \  guard let minEvenIndex = arr.firstIndex(of: minEven) else { return [] }\n \
    \   return [minEven, minEvenIndex]", "    var result = [Int]()\n    var evens\
    \ = [Int]()\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 {\n    \
    \        evens.append(arr[i])\n        }\n    }\n    if evens.count > 0 {\n  \
    \      let min = evens.min()!\n        for i in 0..<arr.count {\n            if\
    \ arr[i] == min {\n                result.append(min)\n                result.append(i)\n\
    \                break\n            }\n        }\n    }\n    return result", " \
    \   let evens = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min()\
    \ else { return [] }\n    return [minEven, arr.firstIndex(of: minEven)!]", " \
    \   var smallestEven: Int?\n    var smallestEvenIndex: Int?\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && (smallestEven == nil ||\
    \ value < smallestEven!) {\n            smallestEven = value\n            smallestEvenIndex\
    \ = index\n        }\n    }\n    if let smallestEven = smallestEven, let smallestEvenIndex\
    \ = smallestEvenIndex {\n        return [smallestEven, smallestEvenIndex]\n  \
    \  }\n    return []", "    guard arr.count > 0 else { return [] }\n    let evens\
    \ = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else { return [] }\n\
    \    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of: minEven)!\n\
    \    return [minEven, minEvenIndex]", "    // your code here\n    return []",
  "    guard arr.count > 0 else { return [] }\n    let evens = arr.filter { $0 % 2\
    \ == 0 }\n    guard evens.count > 0 else { return [] }\n    let minEven = evens.min()!\n\
    \    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min()\
    \ else { return [] }\n    guard let index = arr.firstIndex(of: minEven) else {\
    \ return [] }\n    return [minEven, index]", "    let evens = arr.filter { $0\
    \ % 2 == 0 }\n    guard let minEven = evens.min() else { return [] }\n    guard\
    \ let minEvenIndex = arr.firstIndex(of: minEven) else { return [] }\n    return\
    \ [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return [] }\n    let\
    \ evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return []\
    \ }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let min = evens.min() else { return [] }\n    let\
    \ index = arr.firstIndex(of: min) ?? 0\n    return [min, index]", "    var result\
    \ = [Int]()\n    var evens = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n          \
    \  result.append(index)\n        }\n    }\n    if evens.count == 0 {\n       \
    \ return []\n    }\n    let min = evens.min()\n    let minIndex = evens.firstIndex(of:\
    \ min!)\n    return [min!, result[minIndex!]]", "    let evens = arr.filter {\
    \ $0 % 2 == 0 }\n    guard let minEven = evens.min() else { return [] }\n    guard\
    \ let index = arr.firstIndex(of: minEven) else { return [] }\n    return [minEven,\
    \ index]", "    var smallestEvenValue: Int?\n    var smallestEvenValueIndex: Int?\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           if smallestEvenValue == nil {\n                smallestEvenValue =\
    \ value\n                smallestEvenValueIndex = index\n            } else if\
    \ value < smallestEvenValue! {\n                smallestEvenValue = value\n  \
    \              smallestEvenValueIndex = index\n            }\n        }\n    }\n\
    \    if smallestEvenValue == nil {\n        return []\n    }\n    return [smallestEvenValue!,\
    \ smallestEvenValueIndex!]", "    guard !arr.isEmpty else { return [] }\n    let\
    \ evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return []\
    \ }\n    let min = evens.min()!\n    let index = arr.firstIndex(of: min)!\n  \
    \  return [min, index]", '    return []', "    guard !arr.isEmpty else { return\
    \ [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else\
    \ { return [] }\n    let smallestEven = evens.min()!\n    let smallestEvenIndex\
    \ = arr.firstIndex(of: smallestEven)!\n    return [smallestEven, smallestEvenIndex]",
  "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min() else\
    \ { return [] }\n    let index = arr.firstIndex(of: min) ?? 0\n    return [min,\
    \ index]", "    guard arr.count > 0 else { return [] }\n    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard evens.count > 0 else { return [] }\n    let min =\
    \ evens.min()!\n    let index = arr.firstIndex(of: min)!\n    return [min, index]",
  "    var result = [Int]()\n    var min = Int.max\n    var index = -1\n    for i\
    \ in 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < min {\n         \
    \   min = arr[i]\n            index = i\n        }\n    }\n    if index != -1\
    \ {\n        result.append(min)\n        result.append(index)\n    }\n    return\
    \ result", "    var evens = [Int]()\n    var evensIndex = [Int]()\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \            evensIndex.append(index)\n        }\n    }\n    if evens.count ==\
    \ 0 {\n        return []\n    }\n    let minEven = evens.min()\n    let minEvenIndex\
    \ = evensIndex[evens.firstIndex(of: minEven!)!]\n    return [minEven!, minEvenIndex]",
  "    var result = [Int]()\n    var min = Int.max\n    var index = -1\n    for (i,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 {\n            if value\
    \ < min {\n                min = value\n                index = i\n          \
    \  }\n        }\n    }\n    if index != -1 {\n        result.append(min)\n   \
    \     result.append(index)\n    }\n    return result", "    guard !arr.isEmpty\
    \ else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    var smallestEvenValue =\
    \ Int.max\n    var smallestEvenValueIndex = -1\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 && value < smallestEvenValue {\n            smallestEvenValue\
    \ = value\n            smallestEvenValueIndex = index\n        }\n    }\n    return\
    \ smallestEvenValueIndex == -1 ? [] : [smallestEvenValue, smallestEvenValueIndex]",
  '    return arr.enumerated().filter { $0.element % 2 == 0 }.min { $0.element < $1.element
    }?.reversed() ?? []', "    guard arr.count > 0 else { return [] }\n    let evens\
    \ = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else { return [] }\n\
    \    let smallest = evens.min()!\n    let index = arr.firstIndex(of: smallest)!\n\
    \    return [smallest, index]", "    var result = [Int]()\n    var minEven = Int.max\n\
    \    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 && value < minEven {\n            minEven = value\n\
    \            minEvenIndex = index\n        }\n    }\n    if minEven != Int.max\
    \ {\n        result.append(minEven)\n        result.append(minEvenIndex)\n   \
    \ }\n    return result", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ let min = evens.min() else { return [] }\n    guard let index = arr.firstIndex(of:\
    \ min) else { return [] }\n    return [min, index]", '    return arr.enumerated().filter
    { $0.element % 2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', " \
    \   var result = [Int]()\n    var evens = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n          \
    \  result.append(index)\n        }\n    }\n    if evens.count > 0 {\n        let\
    \ min = evens.min()!\n        let index = evens.firstIndex(of: min)!\n       \
    \ return [min, result[index]]\n    }\n    return []", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let smallestEven = evens.min() else { return [] }\n\
    \    guard let index = arr.firstIndex(of: smallestEven) else { return [] }\n \
    \   return [smallestEven, index]", "    var result = [Int]()\n    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            }\n\
    \        }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    guard !arr.isEmpty\
    \ else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let min = evens.min() else { return [] }\n    let\
    \ index = arr.firstIndex(of: min) ?? 0\n    return [min, index]", "    guard !arr.isEmpty\
    \ else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard arr.count > 0 else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count\
    \ > 0 else { return [] }\n    let minEven = evens.min()!\n    let index = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, index]", "    var evens = [Int]()\n    var evensIndex\
    \ = [Int]()\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 {\n            evens.append(value)\n            evensIndex.append(index)\n\
    \        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    var\
    \ smallestEven = evens[0]\n    var smallestEvenIndex = evensIndex[0]\n    for\
    \ (index, value) in evens.enumerated() {\n        if value < smallestEven {\n\
    \            smallestEven = value\n            smallestEvenIndex = evensIndex[index]\n\
    \        }\n    }\n    return [smallestEven, smallestEvenIndex]", "    guard arr.count\
    \ > 0 else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ evens.count > 0 else { return [] }\n    let min = evens.min()!\n    let index\
    \ = arr.firstIndex(of: min)!\n    return [min, index]", "    guard arr.count >\
    \ 0 else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ evens.count > 0 else { return [] }\n    let minEven = evens.min()!\n    let\
    \ minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    if minEven == Int.max {\n        return []\n    }\n    return [minEven, minEvenIndex]",
  "    guard !arr.isEmpty else { return [] }\n    let evens = arr.filter { $0 % 2\
    \ == 0 }\n    guard !evens.isEmpty else { return [] }\n    let minEven = evens.min()!\n\
    \    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  "    var result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           if value < minEven {\n                minEven = value\n          \
    \      minEvenIndex = index\n            }\n        }\n    }\n    if minEven !=\
    \ Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ let minEven = evens.min() else { return [] }\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    var evens = [Int]()\n \
    \   var evensIndex = [Int]()\n    for (index, value) in arr.enumerated() {\n \
    \       if value % 2 == 0 {\n            evens.append(value)\n            evensIndex.append(index)\n\
    \        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    let\
    \ minEven = evens.min()!\n    let minEvenIndex = evensIndex[evens.firstIndex(of:\
    \ minEven)!]\n    return [minEven, minEvenIndex]", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let smallestEven = evens.min() else { return [] }\n\
    \    guard let index = arr.firstIndex(of: smallestEven) else { return [] }\n \
    \   return [smallestEven, index]", "    guard arr.count > 0 else { return [] }\n\
    \    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else {\
    \ return [] }\n    let minEven = evens.min()!\n    let index = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, index]", "    guard !arr.isEmpty else { return\
    \ [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min()\
    \ else { return [] }\n    let minEvenIndex = arr.firstIndex(of: minEven)!\n  \
    \  return [minEven, minEvenIndex]", "    guard arr.count > 0 else { return []\
    \ }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else\
    \ { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard arr.count > 0 else\
    \ { return [] }\n    guard arr.contains(where: { $0 % 2 == 0 }) else { return\
    \ [] }\n    let evens = arr.enumerated().filter { $0.element % 2 == 0 }\n    let\
    \ min = evens.min { $0.element < $1.element }!\n    return [min.element, min.offset]",
  "    var evens = [Int]()\n    var evenIndexes = [Int]()\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \            evenIndexes.append(index)\n        }\n    }\n    if evens.count ==\
    \ 0 {\n        return []\n    }\n    var min = evens[0]\n    var minIndex = evenIndexes[0]\n\
    \    for (index, value) in evens.enumerated() {\n        if value < min {\n  \
    \          min = value\n            minIndex = evenIndexes[index]\n        }\n\
    \    }\n    return [min, minIndex]", "    let evens = arr.filter { $0 % 2 == 0\
    \ }\n    guard let smallestEven = evens.min() else { return [] }\n    guard let\
    \ index = arr.firstIndex(of: smallestEven) else { return [] }\n    return [smallestEven,\
    \ index]", "    guard arr.count > 0 else { return [] }\n    var minEven = Int.max\n\
    \    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 {\n            if value < minEven {\n             \
    \   minEven = value\n                minEvenIndex = index\n            }\n   \
    \     }\n    }\n    return minEven == Int.max ? [] : [minEven, minEvenIndex]",
  "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min()\
    \ else { return [] }\n    let index = arr.firstIndex(of: minEven)!\n    return\
    \ [minEven, index]", "    guard !arr.isEmpty else { return [] }\n    let evens\
    \ = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return [] }\n\
    \    let minEven = evens.min()!\n    let idx = arr.firstIndex(of: minEven)!\n\
    \    return [minEven, idx]", "    var evens = [Int]()\n    var evensIndex = [Int]()\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           evens.append(value)\n            evensIndex.append(index)\n      \
    \  }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    var min\
    \ = evens[0]\n    var minIndex = evensIndex[0]\n    for (index, value) in evens.enumerated()\
    \ {\n        if value < min {\n            min = value\n            minIndex =\
    \ evensIndex[index]\n        }\n    }\n    return [min, minIndex]", "    let evens\
    \ = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min() else { return\
    \ [] }\n    guard let minEvenIndex = arr.firstIndex(of: minEven) else { return\
    \ [] }\n    return [minEven, minEvenIndex]", "    let evens = arr.filter { $0\
    \ % 2 == 0 }\n    guard let minEven = evens.min() else { return [] }\n    guard\
    \ let minEvenIndex = arr.firstIndex(of: minEven) else { return [] }\n    return\
    \ [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return [] }\n    var\
    \ evens = [Int]()\n    for (index, value) in arr.enumerated() {\n        if value\
    \ % 2 == 0 {\n            evens.append(index)\n        }\n    }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let smallestIndex = evens.min()!\n    return [arr[smallestIndex],\
    \ smallestIndex]", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let\
    \ min = evens.min() else { return [] }\n    return [min, arr.firstIndex(of: min)!]",
  "    var result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < minEven {\n            minEven = value\n            minEvenIndex = index\n\
    \        }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for\
    \ (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n        \
    \    if value < minEven {\n                minEven = value\n                minEvenIndex\
    \ = index\n            }\n        }\n    }\n    if minEven != Int.max {\n    \
    \    result.append(minEven)\n        result.append(minEvenIndex)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 {\n            if value < minEven {\n                minEven = value\n\
    \                minEvenIndex = index\n            }\n        }\n    }\n    if\
    \ minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    guard !arr.isEmpty else { return [] }\n    let\
    \ evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return []\
    \ }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    var evens = [Int]()\n \
    \   var evensIndex = [Int]()\n    for (index, value) in arr.enumerated() {\n \
    \       if value % 2 == 0 {\n            evens.append(value)\n            evensIndex.append(index)\n\
    \        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    var\
    \ minEven = evens[0]\n    var minEvenIndex = evensIndex[0]\n    for (index, value)\
    \ in evens.enumerated() {\n        if value < minEven {\n            minEven =\
    \ value\n            minEvenIndex = evensIndex[index]\n        }\n    }\n    return\
    \ [minEven, minEvenIndex]", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ let min = evens.min() else { return [] }\n    return [min, arr.firstIndex(of:\
    \ min)!]", "    var result = [Int]()\n    var min = Int.max\n    var index = -1\n\
    \    for (i, value) in arr.enumerated() {\n        if value % 2 == 0 && value\
    \ < min {\n            min = value\n            index = i\n        }\n    }\n\
    \    if index != -1 {\n        result.append(min)\n        result.append(index)\n\
    \    }\n    return result", "    var result = [Int]()\n    var smallest = Int.max\n\
    \    var smallestIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 && value < smallest {\n            smallest = value\n\
    \            smallestIndex = index\n        }\n    }\n    if smallest != Int.max\
    \ {\n        result.append(smallest)\n        result.append(smallestIndex)\n \
    \   }\n    return result", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ let min = evens.min() else { return [] }\n    guard let index = arr.firstIndex(of:\
    \ min) else { return [] }\n    return [min, index]", '    return arr.enumerated().filter
    { $0.element % 2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', " \
    \   guard !arr.isEmpty else { return [] }\n    let evens = arr.filter { $0 % 2\
    \ == 0 }\n    guard !evens.isEmpty else { return [] }\n    let minEven = evens.min()!\n\
    \    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  "    var evens = [Int]()\n    var evensIndex = [Int]()\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \            evensIndex.append(index)\n        }\n    }\n    if evens.count ==\
    \ 0 {\n        return []\n    }\n    let minEven = evens.min()!\n    let minEvenIndex\
    \ = evensIndex[evens.firstIndex(of: minEven)!]\n    return [minEven, minEvenIndex]",
  "    var result = [Int]()\n    var evens = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n          \
    \  result.append(index)\n        }\n    }\n    if evens.count > 0 {\n        let\
    \ minEven = evens.min()!\n        let minEvenIndex = evens.firstIndex(of: minEven)!\n\
    \        return [minEven, result[minEvenIndex]]\n    }\n    return []", "    let\
    \ evens = arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min() else { return\
    \ [] }\n    guard let index = arr.firstIndex(of: min) else { return [] }\n   \
    \ return [min, index]", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ let min = evens.min() else { return [] }\n    let index = arr.firstIndex(of:\
    \ min) ?? 0\n    return [min, index]", "    var evens = [Int]()\n    var indexes\
    \ = [Int]()\n    var result = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n          \
    \  indexes.append(index)\n        }\n    }\n    if evens.count > 0 {\n       \
    \ let min = evens.min()\n        let index = evens.firstIndex(of: min!)\n    \
    \    result.append(min!)\n        result.append(indexes[index!])\n    }\n    return\
    \ result", "    var result = [Int]()\n    var minEven = Int.max\n    var minEvenIndex\
    \ = Int.max\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 && value < minEven {\n            minEven = value\n            minEvenIndex\
    \ = index\n        }\n    }\n    if minEven < Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    var evens:\
    \ [Int] = []\n    var evensIndex: [Int] = []\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n          \
    \  evensIndex.append(index)\n        }\n    }\n    if evens.count == 0 {\n   \
    \     return []\n    }\n    var min = evens[0]\n    var minIndex = evensIndex[0]\n\
    \    for (index, value) in evens.enumerated() {\n        if value < min {\n  \
    \          min = value\n            minIndex = evensIndex[index]\n        }\n\
    \    }\n    return [min, minIndex]", "    var evens: [Int] = []\n    var evensIndices:\
    \ [Int] = []\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 {\n            evens.append(value)\n            evensIndices.append(index)\n\
    \        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    let\
    \ minEven = evens.min()!\n    let minEvenIndex = evensIndices[evens.firstIndex(of:\
    \ minEven)!]\n    return [minEven, minEvenIndex]", "    var evens = [Int]()\n\
    \    var evensIndex = [Int]()\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 {\n            evens.append(value)\n            evensIndex.append(index)\n\
    \        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    let\
    \ minEven = evens.min()!\n    let minEvenIndex = evensIndex[evens.firstIndex(of:\
    \ minEven)!]\n    return [minEven, minEvenIndex]", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let smallestEven = evens.min() else { return [] }\n\
    \    guard let index = arr.firstIndex(of: smallestEven) else { return [] }\n \
    \   return [smallestEven, index]", "    guard arr.count > 0 else { return [] }\n\
    \    var smallestEven = Int.max\n    var smallestEvenIndex = Int.max\n    for\
    \ (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value < smallestEven\
    \ {\n            smallestEven = value\n            smallestEvenIndex = index\n\
    \        }\n    }\n    return smallestEven == Int.max ? [] : [smallestEven, smallestEvenIndex]",
  "    guard arr.count > 0 else { return [] }\n    var evens = [Int]()\n    for (index,\
    \ value) in arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \        }\n    }\n    guard evens.count > 0 else { return [] }\n    let smallestEven\
    \ = evens.min()!\n    let smallestEvenIndex = arr.firstIndex(of: smallestEven)!\n\
    \    return [smallestEven, smallestEvenIndex]", "    var result = [Int]()\n  \
    \  var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n    \
    \        minEven = value\n            minEvenIndex = index\n        }\n    }\n\
    \    if minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    var evens = [Int]()\n    var evensIndex = [Int]()\n\
    \    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 {\n \
    \           evens.append(value)\n            evensIndex.append(index)\n      \
    \  }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    let minEven\
    \ = evens.min()!\n    let minEvenIndex = evensIndex[evens.firstIndex(of: minEven)!]\n\
    \    return [minEven, minEvenIndex]", '    return arr.enumerated().filter { $0.element
    % 2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', "    guard arr.count\
    \ > 0 else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ evens.count > 0 else { return [] }\n    let minEven = evens.min()!\n    let\
    \ minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  "    var evens = [Int]()\n    var evensIndex = [Int]()\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \            evensIndex.append(index)\n        }\n    }\n    if evens.count ==\
    \ 0 {\n        return []\n    }\n    var min = evens[0]\n    var minIndex = evensIndex[0]\n\
    \    for (index, value) in evens.enumerated() {\n        if value < min {\n  \
    \          min = value\n            minIndex = evensIndex[index]\n        }\n\
    \    }\n    return [min, minIndex]", '    return arr.enumerated().filter { $0.element
    % 2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', "    var evens:\
    \ [Int] = []\n    var evensIndexes: [Int] = []\n    for (index, element) in arr.enumerated()\
    \ {\n        if element % 2 == 0 {\n            evens.append(element)\n      \
    \      evensIndexes.append(index)\n        }\n    }\n    if evens.count == 0 {\n\
    \        return []\n    }\n    let minEven = evens.min()!\n    let minEvenIndex\
    \ = evensIndexes[evens.firstIndex(of: minEven)!]\n    return [minEven, minEvenIndex]",
  "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min()\
    \ else { return [] }\n    let index = arr.firstIndex(of: minEven)!\n    return\
    \ [minEven, index]", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let\
    \ minEven = evens.min() else { return [] }\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let smallestEven = evens.min() else { return [] }\n\
    \    guard let index = arr.firstIndex(of: smallestEven) else { return [] }\n \
    \   return [smallestEven, index]", "    var smallestEven: Int?\n    var smallestEvenIndex:\
    \ Int?\n    for (index, value) in arr.enumerated() {\n        if value % 2 ==\
    \ 0 {\n            if smallestEven == nil || value < smallestEven! {\n       \
    \         smallestEven = value\n                smallestEvenIndex = index\n  \
    \          }\n        }\n    }\n    if let smallestEven = smallestEven, let smallestEvenIndex\
    \ = smallestEvenIndex {\n        return [smallestEven, smallestEvenIndex]\n  \
    \  }\n    return []", "    var result = [Int]()\n    var minEven = Int.max\n \
    \   var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 {\n            if value < minEven {\n             \
    \   minEven = value\n                minEvenIndex = index\n            }\n   \
    \     }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    var evens\
    \ = [Int]()\n    var index = 0\n    for i in arr {\n        if i % 2 == 0 {\n\
    \            evens.append(i)\n        }\n    }\n    if evens.count == 0 {\n  \
    \      return []\n    }\n    evens.sort()\n    for i in arr {\n        if i ==\
    \ evens[0] {\n            return [i, index]\n        }\n        index += 1\n \
    \   }\n    return []", "    guard !arr.isEmpty else { return [] }\n    let evens\
    \ = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return [] }\n\
    \    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of: minEven)!\n\
    \    return [minEven, minEvenIndex]", '    return arr.enumerated().filter { $0.element
    % 2 == 0 }.min { $0.element < $1.element }?.map { [$0.element, $0.offset] } ??
    []', "    guard !arr.isEmpty else { return [] }\n    let evens = arr.filter {\
    \ $0 % 2 == 0 }\n    guard !evens.isEmpty else { return [] }\n    let minEven\
    \ = evens.min()!\n    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return\
    \ [minEven, minEvenIndex]", "    var result = [Int]()\n    var minEven = Int.max\n\
    \    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n\
    \        if value % 2 == 0 {\n            if value < minEven {\n             \
    \   minEven = value\n                minEvenIndex = index\n            }\n   \
    \     }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var minEven = Int.max\n    var index = 0\n    for i in 0..<arr.count\
    \ {\n        if arr[i] % 2 == 0 {\n            if arr[i] < minEven {\n       \
    \         minEven = arr[i]\n                index = i\n            }\n       \
    \ }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n    \
    \    result.append(index)\n    }\n    return result", "    var minEven: Int?\n\
    \    var minEvenIndex: Int?\n    for (index, value) in arr.enumerated() {\n  \
    \      if value % 2 == 0 {\n            if minEven == nil || value < minEven!\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           }\n        }\n    }\n    if minEven == nil {\n        return []\n\
    \    }\n    return [minEven!, minEvenIndex!]", '    return arr.enumerated().filter
    { $0.element % 2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', " \
    \   let evens = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min()\
    \ else { return [] }\n    guard let index = arr.firstIndex(of: minEven) else {\
    \ return [] }\n    return [minEven, index]", "    var result = [Int]()\n    var\
    \ evens = [Int]()\n    for (index, value) in arr.enumerated() {\n        if value\
    \ % 2 == 0 {\n            evens.append(value)\n            result.append(index)\n\
    \        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    let\
    \ minEven = evens.min()!\n    let minEvenIndex = result[evens.firstIndex(of: minEven)!]\n\
    \    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else { return []\
    \ }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else\
    \ { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    var result = [Int]()\n\
    \    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           }\n        }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    var evens\
    \ = [Int]()\n    var evensIndex = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n          \
    \  evensIndex.append(index)\n        }\n    }\n    if evens.count == 0 {\n   \
    \     return []\n    }\n    var min = evens[0]\n    var minIndex = evensIndex[0]\n\
    \    for (index, value) in evens.enumerated() {\n        if value < min {\n  \
    \          min = value\n            minIndex = evensIndex[index]\n        }\n\
    \    }\n    return [min, minIndex]", "    var evens: [Int] = []\n    var evensIndex:\
    \ [Int] = []\n    for (index, value) in arr.enumerated() {\n        if value %\
    \ 2 == 0 {\n            evens.append(value)\n            evensIndex.append(index)\n\
    \        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    var\
    \ min = evens[0]\n    var minIndex = evensIndex[0]\n    for (index, value) in\
    \ evens.enumerated() {\n        if value < min {\n            min = value\n  \
    \          minIndex = evensIndex[index]\n        }\n    }\n    return [min, minIndex]",
  "    var smallestEvenValue = Int.max\n    var smallestEvenValueIndex = Int.max\n\
    \    var isEvenValueFound = false\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            isEvenValueFound = true\n      \
    \      if value < smallestEvenValue {\n                smallestEvenValue = value\n\
    \                smallestEvenValueIndex = index\n            }\n        }\n  \
    \  }\n    if isEvenValueFound {\n        return [smallestEvenValue, smallestEvenValueIndex]\n\
    \    } else {\n        return []\n    }", "    guard arr.count > 0 else { return\
    \ [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0\
    \ else { return [] }\n    let min = evens.min()!\n    let minIndex = arr.firstIndex(of:\
    \ min)!\n    return [min, minIndex]", "    guard arr.count > 0 else { return []\
    \ }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else\
    \ { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", '    return arr.enumerated().filter
    { $0.element % 2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', " \
    \   let evens = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min()\
    \ else { return [] }\n    let index = arr.firstIndex(of: minEven)!\n    return\
    \ [minEven, index]", "    guard !arr.isEmpty else { return [] }\n    var evens\
    \ = [Int]()\n    for (index, value) in arr.enumerated() where value % 2 == 0 {\n\
    \        evens.append(value)\n        evens.append(index)\n    }\n    guard evens.count\
    \ > 0 else { return [] }\n    var min = evens[0]\n    var minIndex = evens[1]\n\
    \    for i in stride(from: 2, to: evens.count, by: 2) {\n        if evens[i] <\
    \ min {\n            min = evens[i]\n            minIndex = evens[i + 1]\n   \
    \     }\n    }\n    return [min, minIndex]", "    var result = [Int]()\n    var\
    \ minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           }\n        }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    var evens\
    \ = [Int]()\n    var evensIndex = [Int]()\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            evens.append(value)\n          \
    \  evensIndex.append(index)\n        }\n    }\n    if evens.count == 0 {\n   \
    \     return []\n    }\n    var min = evens[0]\n    var minIndex = evensIndex[0]\n\
    \    for (index, value) in evens.enumerated() {\n        if value < min {\n  \
    \          min = value\n            minIndex = evensIndex[index]\n        }\n\
    \    }\n    return [min, minIndex]", "    let evens = arr.filter { $0 % 2 == 0\
    \ }\n    guard let minEven = evens.min() else { return [] }\n    guard let index\
    \ = arr.firstIndex(of: minEven) else { return [] }\n    return [minEven, index]",
  "    var evens = [Int]()\n    var evensIndex = [Int]()\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 {\n            evens.append(value)\n\
    \            evensIndex.append(index)\n        }\n    }\n    guard let minEven\
    \ = evens.min() else { return [] }\n    let minEvenIndex = evensIndex[evens.firstIndex(of:\
    \ minEven)!]\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", '    return arr.enumerated().filter
    { $0.element % 2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', " \
    \   let evens = arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min() else\
    \ { return [] }\n    let index = arr.firstIndex(of: min) ?? 0\n    return [min,\
    \ index]", "    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for\
    \ (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven\
    \ {\n            minEven = value\n            minEvenIndex = index\n        }\n\
    \    }\n    if minEven == Int.max {\n        return []\n    }\n    return [minEven,\
    \ minEvenIndex]", "    var evens = [Int]()\n    var index = 0\n    for i in arr\
    \ {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n\
    \    if evens.count == 0 {\n        return []\n    }\n    var min = evens[0]\n\
    \    for i in evens {\n        if i < min {\n            min = i\n        }\n\
    \    }\n    for i in arr {\n        if i == min {\n            break\n       \
    \ }\n        index += 1\n    }\n    return [min, index]", "    guard !arr.isEmpty\
    \ else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let index = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, index]", "    var result = [Int]()\n    var\
    \ minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 && value < minEven {\n       \
    \     minEven = value\n            minEvenIndex = index\n        }\n    }\n  \
    \  if minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", '    return arr.enumerated().filter { $0.element %
    2 == 0 }.min { $0.element < $1.element }?.reversed() ?? []', "    guard arr.count\
    \ > 0 else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard\
    \ evens.count > 0 else { return [] }\n    let min = evens.min()!\n    let index\
    \ = arr.firstIndex(of: min)!\n    return [min, index]", "    guard !arr.isEmpty\
    \ else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    var result = [Int]()\n\
    \    var min = Int.max\n    var minIndex = Int.max\n    for (index, value) in\
    \ arr.enumerated() {\n        if value % 2 == 0 {\n            if value < min\
    \ {\n                min = value\n                minIndex = index\n         \
    \   }\n        }\n    }\n    if min != Int.max {\n        result.append(min)\n\
    \        result.append(minIndex)\n    }\n    return result", "    var result =\
    \ [Int]()\n    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for\
    \ (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value < minEven\
    \ {\n            minEven = value\n            minEvenIndex = index\n        }\n\
    \    }\n    if minEven != Int.max {\n        result.append(minEven)\n        result.append(minEvenIndex)\n\
    \    }\n    return result", "    guard arr.count > 0 else { return [] }\n    let\
    \ evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else { return\
    \ [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    guard !arr.isEmpty else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty\
    \ else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    var result = [Int]()\n\
    \    var minEven = Int.max\n    var minEvenIndex = Int.max\n    for (index, value)\
    \ in arr.enumerated() {\n        if value % 2 == 0 {\n            if value < minEven\
    \ {\n                minEven = value\n                minEvenIndex = index\n \
    \           }\n        }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result", "    let evens\
    \ = arr.filter { $0 % 2 == 0 }\n    guard let minEven = evens.min() else { return\
    \ [] }\n    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven,\
    \ minEvenIndex]", "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let min\
    \ = evens.min() else { return [] }\n    guard let index = arr.firstIndex(of: min)\
    \ else { return [] }\n    return [min, index]", "    guard arr.count > 0 else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count\
    \ > 0 else { return [] }\n    let minEven = evens.min()!\n    let minEvenIndex\
    \ = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]", "    guard\
    \ !arr.isEmpty else { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n\
    \    guard !evens.isEmpty else { return [] }\n    let minEven = evens.min()!\n\
    \    let minEvenIndex = arr.firstIndex(of: minEven)!\n    return [minEven, minEvenIndex]",
  '    return arr.enumerated().filter { $0.element % 2 == 0 }.min { $0.element < $1.element
    }?.map { [$0.element, $0.offset] } ?? []', "    var result = [Int]()\n    var\
    \ evens = [Int]()\n    for (index, value) in arr.enumerated() {\n        if value\
    \ % 2 == 0 {\n            evens.append(value)\n            result.append(index)\n\
    \        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    let\
    \ min = evens.min()!\n    let minIndex = evens.firstIndex(of: min)!\n    return\
    \ [min, result[minIndex]]", "    guard !arr.isEmpty else { return [] }\n    let\
    \ evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return []\
    \ }\n    let minEven = evens.min()!\n    let minEvenIndex = arr.firstIndex(of:\
    \ minEven)!\n    return [minEven, minEvenIndex]", "    var evens = [Int]()\n \
    \   var evensIndex = [Int]()\n    for (index, value) in arr.enumerated() {\n \
    \       if value % 2 == 0 {\n            evens.append(value)\n            evensIndex.append(index)\n\
    \        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    let\
    \ minEven = evens.min()\n    let minEvenIndex = evensIndex[evens.firstIndex(of:\
    \ minEven!)!]\n    return [minEven!, minEvenIndex]", "    let evens = arr.filter\
    \ { $0 % 2 == 0 }\n    guard let smallestEven = evens.min() else { return [] }\n\
    \    guard let index = arr.firstIndex(of: smallestEven) else { return [] }\n \
    \   return [smallestEven, index]", '    return []', "    guard arr.count > 0 else\
    \ { return [] }\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count\
    \ > 0 else { return [] }\n    let smallestEven = evens.min()!\n    let smallestEvenIndex\
    \ = arr.firstIndex(of: smallestEven)!\n    return [smallestEven, smallestEvenIndex]",
  "    let evens = arr.filter { $0 % 2 == 0 }\n    guard let min = evens.min() else\
    \ { return [] }\n    let index = arr.firstIndex(of: min) ?? 0\n    return [min,\
    \ index]", '    return arr.enumerated().filter { $0.element % 2 == 0 }.min { $0.element
    < $1.element }?.reversed() ?? []', "    guard arr.count > 0 else { return [] }\n\
    \    let evens = arr.filter { $0 % 2 == 0 }\n    guard evens.count > 0 else {\
    \ return [] }\n    let min = evens.min()!\n    let index = arr.firstIndex(of:\
    \ min)!\n    return [min, index]", "    var result = [Int]()\n    var minEven\
    \ = Int.max\n    var minEvenIndex = Int.max\n    for (index, value) in arr.enumerated()\
    \ {\n        if value % 2 == 0 {\n            if value < minEven {\n         \
    \       minEven = value\n                minEvenIndex = index\n            }\n\
    \        }\n    }\n    if minEven != Int.max {\n        result.append(minEven)\n\
    \        result.append(minEvenIndex)\n    }\n    return result"]
stop_tokens:
- "\n}"
