language: swift
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    let max = Int(sqrt(Double(n)))\n    for i in 3...max {\n \
    \       if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp69kkcg5u.swift:27:19: error: cannot find 'sqrt' in scope\n    let\
    \ max = Int(sqrt(Double(n)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2...n-1 {\n        if n % i == 0 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3..<n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo0_h9qr1.swift:21:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoggmfg2z.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3..<n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2...n-1 {\n        if n % i == 0 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2...n-1 {\n        if n % i == 0 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...n/2 {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b38ca3a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38ca09b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b38ca09b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b38ca09b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b38ca09abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp53ltbuva                        0x000056038c0e8b4b <unavailable> + 6987

    6    tmp53ltbuva                        0x000056038c0e85fd <unavailable> + 5629

    7    libc.so.6                          0x00002b38ca590460 __libc_start_main +
    245

    8    tmp53ltbuva                        0x000056038c0e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n < 2 || n % 2 == 0 {\n        return false\n    }\n    for i in 3..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps213hi4h.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824324
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824324
