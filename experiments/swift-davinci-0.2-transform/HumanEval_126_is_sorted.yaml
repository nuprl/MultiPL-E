name: HumanEval_126_is_sorted
language: swift
prompt: "\n/// Given a list of numbers, return whether or not they are sorted\n///\
  \ in ascending order. If list has more than 1 duplicate of the same\n/// number,\
  \ return False. Assume no negative numbers and only integers.\n/// Examples\n///\
  \ >>> is_sorted(lst: [5])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5])\n///\
  \ true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(lst:\
  \ [1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5, 6, 7])\n\
  /// true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(lst:\
  \ [1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(lst: [1, 2, 2, 2, 3, 4])\n///\
  \ false\nfunc is_sorted(lst: [Int]) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
  \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
  assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2,\
  \ 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\n\
  assert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\n\
  assert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3,\
  \ 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst:\
  \ [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
completions: ["    var sorted = true\n    for i in 0..<lst.count-1 {\n        if lst[i]\
    \ > lst[i+1] {\n            sorted = false\n        }\n    }\n    return sorted",
  "    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < prev {\n            sorted = false\n        }\n        prev\
    \ = lst[i]\n    }\n    return sorted", "    var sorted = true\n    var prev =\
    \ lst[0]\n    for num in lst {\n        if num < prev {\n            sorted =\
    \ false\n        }\n        prev = num\n    }\n    return sorted", "    var sorted\
    \ = true\n    var prev = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < prev {\n            sorted = false\n        }\n        prev = lst[i]\n   \
    \ }\n    return sorted", "    var sorted = true\n    for i in 0..<lst.count-1\
    \ {\n        if lst[i] > lst[i+1] {\n            sorted = false\n        }\n \
    \   }\n    return sorted", "    var sorted = true\n    var prev = lst[0]\n   \
    \ for i in 1..<lst.count {\n        if lst[i] < prev {\n            sorted = false\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted", "    var sorted\
    \ = true\n    var prev = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < prev {\n            sorted = false\n        }\n        prev = lst[i]\n   \
    \ }\n    return sorted", "    var sorted = true\n    var last = 0\n    for i in\
    \ lst {\n        if i < last {\n            sorted = false\n        }\n      \
    \  last = i\n    }\n    return sorted", "    var sorted = true\n    var prev =\
    \ lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < prev {\n         \
    \   sorted = false\n        }\n        prev = lst[i]\n    }\n    return sorted",
  "    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < prev {\n            sorted = false\n        }\n        prev\
    \ = lst[i]\n    }\n    return sorted", "    var sorted = true\n    var last =\
    \ lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < last {\n         \
    \   sorted = false\n        }\n        last = lst[i]\n    }\n    return sorted",
  "    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < prev {\n            sorted = false\n        }\n        prev\
    \ = lst[i]\n    }\n    return sorted", "    var sorted = true\n    var prev =\
    \ lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < prev {\n         \
    \   sorted = false\n        }\n        prev = lst[i]\n    }\n    return sorted",
  "    var prev = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < prev {\n\
    \            return false\n        }\n        prev = lst[i]\n    }\n    return\
    \ true", "    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n        }\n     \
    \   prev = lst[i]\n    }\n    return sorted", "    var sorted = true\n    var\
    \ prev = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < prev {\n  \
    \          sorted = false\n        }\n        prev = lst[i]\n    }\n    return\
    \ sorted", "    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n        }\n     \
    \   prev = lst[i]\n    }\n    return sorted", "    if lst.count == 1 {\n     \
    \   return true\n    }\n    for i in 0..<lst.count - 1 {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true",
  "    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < prev {\n            sorted = false\n        }\n        prev\
    \ = lst[i]\n    }\n    return sorted", "    var sorted = true\n    var prev =\
    \ lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < prev {\n         \
    \   sorted = false\n        }\n        prev = lst[i]\n    }\n    return sorted"]
stop_tokens:
- "\n}"
