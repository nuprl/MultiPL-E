name: HumanEval_26_remove_duplicates
language: swift
prompt: "\n/// From a list of integers, remove all elements that occur more than once.\n\
  /// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
  \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int])\
  \ == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3,\
  \ 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
completions: ["    var numbers_set = Set<Int>()\n    var result = [Int]()\n    for\
    \ number in numbers {\n        if !numbers_set.contains(number) {\n          \
    \  numbers_set.insert(number)\n            result.append(number)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for number in numbers\
    \ {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for number\
    \ in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for number\
    \ in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in numbers {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var numbers = numbers\n    var index\
    \ = 0\n    while index < numbers.count {\n        let number = numbers[index]\n\
    \        let occurrences = numbers.filter { $0 == number }.count\n        if occurrences\
    \ > 1 {\n            numbers.remove(at: index)\n        } else {\n           \
    \ index += 1\n        }\n    }\n    return numbers", "    return numbers.filter\
    \ { (number) -> Bool in\n        return numbers.filter({$0 == number}).count ==\
    \ 1\n    }", "    var numbers = numbers\n    var result = [Int]()\n    var index\
    \ = 0\n    while index < numbers.count {\n        let number = numbers[index]\n\
    \        if numbers.filter({ $0 == number }).count == 1 {\n            result.append(number)\n\
    \        }\n        index += 1\n    }\n    return result", "    var result: [Int]\
    \ = []\n    for number in numbers {\n        if !result.contains(number) {\n \
    \           result.append(number)\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n\
    \        if !set.contains(number) {\n            result.append(number)\n     \
    \       set.insert(number)\n        }\n    }\n    return result", "    var uniqueNumbers\
    \ = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
