name: HumanEval_159_eat
language: swift
prompt: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
  \ of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n\
  /// you should return an array of [ total number of eaten carrots after your meals,\n\
  /// the number of carrots left after your meals ]\n/// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n\
  /// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number:\
  \ 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining:\
  \ 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n\
  /// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n\
  /// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining\
  \ : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n\
  /// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n\
  /// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) ==\
  \ [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
  \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
  \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
  \ 4, need: 5, remaining: 1) == [5, 0])"
completions: ["    let total = number + remaining\n    let eaten = total >= need ?\
    \ need : total\n    return [eaten, total - eaten]", "    var eaten = number\n\
    \    var left = remaining\n    if left + eaten >= need {\n        eaten += need\n\
    \        left -= need\n    } else {\n        eaten += left\n        left = 0\n\
    \    }\n    return [eaten, left]", "    var result = [Int]()\n    var total =\
    \ number + remaining\n    if total >= need {\n        result.append(need)\n  \
    \      result.append(total - need)\n    } else {\n        result.append(total)\n\
    \        result.append(0)\n    }\n    return result", "    var total = number\n\
    \    var left = remaining\n    var result = [Int]()\n    if need > remaining {\n\
    \        total += remaining\n        left = 0\n    } else {\n        total +=\
    \ need\n        left -= need\n    }\n    result.append(total)\n    result.append(left)\n\
    \    return result", "    if number >= need {\n        return [number, remaining]\n\
    \    }\n    if remaining >= need - number {\n        return [need, remaining -\
    \ (need - number)]\n    }\n    return [remaining + number, 0]", "    let total\
    \ = number + remaining\n    let eaten = total < need ? total : need\n    return\
    \ [eaten, total - eaten]", "    let total = number + remaining\n    return [total\
    \ >= need ? need : total, total >= need ? total - need : 0]", "    let total =\
    \ number + remaining\n    let eaten = total < need ? total : need\n    return\
    \ [eaten, total - eaten]", "    let total = number + remaining\n    let eaten\
    \ = min(total, need)\n    let left = total - eaten\n    return [eaten, left]",
  "    let total = number + remaining\n    let eaten = total > need ? need : total\n\
    \    return [eaten, total - eaten]", "    var total = number\n    var left = remaining\n\
    \    if left >= need {\n        total += need\n        left -= need\n    } else\
    \ {\n        total += left\n        left = 0\n    }\n    return [total, left]",
  "    var result = [Int]()\n    if remaining >= need {\n        result.append(number\
    \ + need)\n        result.append(remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result", "    let\
    \ total = number + remaining\n    let eaten = total >= need ? need : total\n \
    \   return [eaten, total - eaten]", "    let total = number + remaining\n    let\
    \ eaten = total > need ? need : total\n    return [eaten, total - eaten]", " \
    \   let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    var result: [Int] = []\n    if number + remaining >= need {\n        result.append(need)\n\
    \        result.append(number + remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var numberOfCarrots = number\n    var numberOfCarrotsNeeded\
    \ = need\n    var numberOfCarrotsRemaining = remaining\n    \n    if numberOfCarrotsRemaining\
    \ > numberOfCarrotsNeeded {\n        numberOfCarrots += numberOfCarrotsNeeded\n\
    \        numberOfCarrotsRemaining -= numberOfCarrotsNeeded\n    } else {\n   \
    \     numberOfCarrots += numberOfCarrotsRemaining\n        numberOfCarrotsRemaining\
    \ = 0\n    }\n    \n    result.append(numberOfCarrots)\n    result.append(numberOfCarrotsRemaining)\n\
    \    \n    return result", "    var total = number + remaining\n    if total >=\
    \ need {\n        total = need\n    }\n    return [total, remaining - (total -\
    \ number)]", "    let total = number + remaining\n    let eaten = total >= need\
    \ ? need : total\n    return [eaten, total - eaten]"]
stop_tokens:
- "\n}"
