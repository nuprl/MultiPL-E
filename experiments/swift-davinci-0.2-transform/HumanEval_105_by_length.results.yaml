language: swift
name: HumanEval_105_by_length
results:
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.reversed().map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpivpp15i7/tmpivpp15i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af60ed5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60ea55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60ea55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60ea547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivpp15i7                        0x000056327b0ff9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002af60ef4a460 __libc_start_main +
    245

    6    tmpivpp15i7                        0x000056327b0ff479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpp4cvdjjf/tmpp4cvdjjf.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afedb319c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afedb010b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afedb010988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afedb00f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4cvdjjf                        0x000055e479561901 <unavailable> + 6401

    5    libc.so.6                          0x00002afedb505460 __libc_start_main +
    245

    6    tmpp4cvdjjf                        0x000055e4795613a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ words = reversed.map { String($0) }\n    let result = words.map { $0.replacingOccurrences(of:\
    \ \"1\", with: \"One\")\n        .replacingOccurrences(of: \"2\", with: \"Two\"\
    )\n        .replacingOccurrences(of: \"3\", with: \"Three\")\n        .replacingOccurrences(of:\
    \ \"4\", with: \"Four\")\n        .replacingOccurrences(of: \"5\", with: \"Five\"\
    )\n        .replacingOccurrences(of: \"6\", with: \"Six\")\n        .replacingOccurrences(of:\
    \ \"7\", with: \"Seven\")\n        .replacingOccurrences(of: \"8\", with: \"Eight\"\
    )\n        .replacingOccurrences(of: \"9\", with: \"Nine\")\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxdiu818e.swift:18:33: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let result = words.map { $0.replacingOccurrences(of:\
    \ \"1\", with: \"One\")\n                             ~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted().reversed().map({ String($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpptqw_w74/tmpptqw_w74.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b119d88ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b119d585b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b119d585988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b119d5847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptqw_w74                        0x000055b2aa7d09d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b119da7a460 __libc_start_main +
    245

    6    tmpptqw_w74                        0x000055b2aa7d0479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw5ftd2xc/tmpw5ftd2xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ad5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ad2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ad2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ad2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ftd2xc                        0x00005605482da9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae6ad7e5460 __libc_start_main +
    245

    6    tmpw5ftd2xc                        0x00005605482da479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ result = reversed.map { String(describing: $0) }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpotorek53/tmpotorek53.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd342f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd33feab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd33fea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd33fe97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotorek53                        0x000055ee1dfdd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002acd344df460 __libc_start_main +
    245

    6    tmpotorek53                        0x000055ee1dfdd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed()\n    return numbers.map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpqcgz34k8/tmpqcgz34k8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8985809c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8985500b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8985500988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89854ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcgz34k8                        0x000055aef06949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b89859f5460 __libc_start_main +
    245

    6    tmpqcgz34k8                        0x000055aef0694479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.map { String($0) }.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpou05c_bs/tmpou05c_bs.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5780817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b578050eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b578050e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b578050d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou05c_bs                        0x00005566bb813961 <unavailable> + 6497

    5    libc.so.6                          0x00002b5780a03460 __libc_start_main +
    245

    6    tmpou05c_bs                        0x00005566bb813409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result.sorted().reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpk545a7ya/tmpk545a7ya.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677631dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6776014b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6776014988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67760137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk545a7ya                        0x000055aa45100941 <unavailable> + 6465

    5    libc.so.6                          0x00002b6776509460 __libc_start_main +
    245

    6    tmpk545a7ya                        0x000055aa451003e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let strings\
    \ = reversed.map({String($0)})\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp4omp24nq/tmp4omp24nq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b704cb98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b704c88fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b704c88f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b704c88e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4omp24nq                        0x00005634e3da19d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b704cd84460 __libc_start_main +
    245

    6    tmp4omp24nq                        0x00005634e3da1479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.map { String($0) }.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpou05c_bs/tmpou05c_bs.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5780817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b578050eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b578050e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b578050d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou05c_bs                        0x00005566bb813961 <unavailable> + 6497

    5    libc.so.6                          0x00002b5780a03460 __libc_start_main +
    245

    6    tmpou05c_bs                        0x00005566bb813409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkc60_fku/tmpkc60_fku.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56fc89bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56fc592b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56fc592988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56fc5917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc60_fku                        0x000055ceaa18c9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b56fca87460 __libc_start_main +
    245

    6    tmpkc60_fku                        0x000055ceaa18c479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ strings = reversed.map { String($0) }\n    let result = strings.map {\n    \
    \    switch $0 {\n        case \"1\":\n            return \"One\"\n        case\
    \ \"2\":\n            return \"Two\"\n        case \"3\":\n            return\
    \ \"Three\"\n        case \"4\":\n            return \"Four\"\n        case \"\
    5\":\n            return \"Five\"\n        case \"6\":\n            return \"\
    Six\"\n        case \"7\":\n            return \"Seven\"\n        case \"8\":\n\
    \            return \"Eight\"\n        case \"9\":\n            return \"Nine\"\
    \n        default:\n            return \"\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String(describing: $0) }\n    return names\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpdzjaku2d/tmpdzjaku2d.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ff6d48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ff6a3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ff6a3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ff6a3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzjaku2d                        0x000055c77b26f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3ff6f34460 __libc_start_main +
    245

    6    tmpdzjaku2d                        0x000055c77b26f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxaosojlb/tmpxaosojlb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b063363ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0633331b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0633331988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06333307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaosojlb                        0x0000564a0e8389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b0633826460 __libc_start_main +
    245

    6    tmpxaosojlb                        0x0000564a0e838479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed()\n    return numbers.map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpqcgz34k8/tmpqcgz34k8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8985809c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8985500b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8985500988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89854ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcgz34k8                        0x000055aef06949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b89859f5460 __libc_start_main +
    245

    6    tmpqcgz34k8                        0x000055aef0694479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ strings = reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_kh6qp0u/tmp_kh6qp0u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c002e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfffd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfffd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfffd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kh6qp0u                        0x0000561b21e689d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b4c004cc460 __libc_start_main +
    245

    6    tmp_kh6qp0u                        0x0000561b21e68479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw5ftd2xc/tmpw5ftd2xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ad5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ad2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ad2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ad2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ftd2xc                        0x00005605482da9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae6ad7e5460 __libc_start_main +
    245

    6    tmpw5ftd2xc                        0x00005605482da479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw5ftd2xc/tmpw5ftd2xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ad5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ad2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ad2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ad2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ftd2xc                        0x00005605482da9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae6ad7e5460 __libc_start_main +
    245

    6    tmpw5ftd2xc                        0x00005605482da479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let sorted = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    for number in\
    \ sorted.reversed() {\n        switch number {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ strings = reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprcusqswl/tmprcusqswl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33664f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33661efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33661ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33661ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcusqswl                        0x000055aa2a5db9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b33666e4460 __libc_start_main +
    245

    6    tmprcusqswl                        0x000055aa2a5db479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ result = reversed.map({ String($0) })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplwg0tnk0/tmplwg0tnk0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ab237dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ab2074b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ab2074988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ab20737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplwg0tnk0                        0x000055b2f3f7e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b7ab2569460 __libc_start_main +
    245

    6    tmplwg0tnk0                        0x000055b2f3f7e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map {\n        switch $0 {\n        case 1: return \"One\"\
    \n        case 2: return \"Two\"\n        case 3: return \"Three\"\n        case\
    \ 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6: return\
    \ \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n\
    \        case 9: return \"Nine\"\n        default: return \"\"\n        }\n  \
    \  }\n    return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxaosojlb/tmpxaosojlb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b063363ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0633331b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0633331988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06333307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaosojlb                        0x0000564a0e8389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b0633826460 __libc_start_main +
    245

    6    tmpxaosojlb                        0x0000564a0e838479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    return sorted.reversed().map({ String($0)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmptd9daf2r/tmptd9daf2r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad94d27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad94a1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad94a1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad94a1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptd9daf2r                        0x000055fd1719a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aad94f13460 __libc_start_main +
    245

    6    tmptd9daf2r                        0x000055fd1719a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ strings = reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprcusqswl/tmprcusqswl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33664f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33661efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33661ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33661ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcusqswl                        0x000055aa2a5db9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b33666e4460 __libc_start_main +
    245

    6    tmprcusqswl                        0x000055aa2a5db479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ stringified = reversed.map { String($0) }\n    return stringified\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpv76an5l0/tmpv76an5l0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0e7cb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0e79a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0e79a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0e79a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv76an5l0                        0x000056488ee079d1 <unavailable> + 6609

    5    libc.so.6                          0x00002af0e7e9d460 __libc_start_main +
    245

    6    tmpv76an5l0                        0x000056488ee07479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed()\n    return numbers.map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpqcgz34k8/tmpqcgz34k8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8985809c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8985500b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8985500988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89854ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcgz34k8                        0x000055aef06949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b89859f5460 __libc_start_main +
    245

    6    tmpqcgz34k8                        0x000055aef0694479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.map { String($0) }.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpou05c_bs/tmpou05c_bs.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5780817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b578050eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b578050e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b578050d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou05c_bs                        0x00005566bb813961 <unavailable> + 6497

    5    libc.so.6                          0x00002b5780a03460 __libc_start_main +
    245

    6    tmpou05c_bs                        0x00005566bb813409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map({ String($0) })\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_ribuea5/tmp_ribuea5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5a2b37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5a282eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5a282e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5a282d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ribuea5                        0x000055e0349159d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba5a2d23460 __libc_start_main +
    245

    6    tmp_ribuea5                        0x000055e034915479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ strings = reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_kh6qp0u/tmp_kh6qp0u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c002e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfffd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfffd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfffd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kh6qp0u                        0x0000561b21e689d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b4c004cc460 __libc_start_main +
    245

    6    tmp_kh6qp0u                        0x0000561b21e68479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.map { String($0) }.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpou05c_bs/tmpou05c_bs.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5780817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b578050eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b578050e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b578050d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou05c_bs                        0x00005566bb813961 <unavailable> + 6497

    5    libc.so.6                          0x00002b5780a03460 __libc_start_main +
    245

    6    tmpou05c_bs                        0x00005566bb813409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw5ftd2xc/tmpw5ftd2xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ad5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ad2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ad2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ad2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ftd2xc                        0x00005605482da9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae6ad7e5460 __libc_start_main +
    245

    6    tmpw5ftd2xc                        0x00005605482da479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpohy71kun/tmpohy71kun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acad6933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acad662ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acad662a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acad66297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohy71kun                        0x000055cf7cae69d1 <unavailable> + 6609

    5    libc.so.6                          0x00002acad6b1f460 __libc_start_main +
    245

    6    tmpohy71kun                        0x000055cf7cae6479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxdge837j/tmpxdge837j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f14bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f148bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f148bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f148be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdge837j                        0x000055b5393bd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b2f14db4460 __libc_start_main +
    245

    6    tmpxdge837j                        0x000055b5393bd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 > 0 && $0 < 10 }\n    let sorted = numbers.sorted()\n    let reversed =\
    \ sorted.reversed()\n    let strings = reversed.map { String($0) }\n    return\
    \ strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpslq9b1hn/tmpslq9b1hn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b9a15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b970cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b970c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b970b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpslq9b1hn                        0x0000558a7877b9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba6b9c01460 __libc_start_main +
    245

    6    tmpslq9b1hn                        0x0000558a7877b479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    return sorted.reversed().map { String($0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpfken4fev/tmpfken4fev.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb50e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb4dd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fb4dd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fb4dd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfken4fev                        0x0000557408fd89d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b2fb52cd460 __libc_start_main +
    245

    6    tmpfken4fev                        0x0000557408fd8479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 > 0 && $0 < 10 }\n    let sorted = numbers.sorted()\n    let reversed =\
    \ sorted.reversed()\n    let names = reversed.map { String($0) }\n    return names\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpgve5bbpt/tmpgve5bbpt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefb3a6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefb3762b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefb3762988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefb37617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgve5bbpt                        0x000056025f61e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aefb3c57460 __libc_start_main +
    245

    6    tmpgve5bbpt                        0x000056025f61e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed().map {\n        switch $0 {\n    \
    \    case 1: return \"One\"\n        case 2: return \"Two\"\n        case 3: return\
    \ \"Three\"\n        case 4: return \"Four\"\n        case 5: return \"Five\"\n\
    \        case 6: return \"Six\"\n        case 7: return \"Seven\"\n        case\
    \ 8: return \"Eight\"\n        case 9: return \"Nine\"\n        default: return\
    \ \"\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw5ftd2xc/tmpw5ftd2xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ad5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ad2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ad2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ad2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ftd2xc                        0x00005605482da9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae6ad7e5460 __libc_start_main +
    245

    6    tmpw5ftd2xc                        0x00005605482da479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxaosojlb/tmpxaosojlb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b063363ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0633331b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0633331988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06333307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaosojlb                        0x0000564a0e8389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b0633826460 __libc_start_main +
    245

    6    tmpxaosojlb                        0x0000564a0e838479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 > 0 && $0 < 10 }\n    let sorted = numbers.sorted()\n    let reversed =\
    \ sorted.reversed()\n    let names = reversed.map { String($0) }\n    return names\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpgve5bbpt/tmpgve5bbpt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefb3a6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefb3762b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefb3762988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefb37617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgve5bbpt                        0x000056025f61e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aefb3c57460 __libc_start_main +
    245

    6    tmpgve5bbpt                        0x000056025f61e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw5ftd2xc/tmpw5ftd2xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ad5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ad2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ad2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ad2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ftd2xc                        0x00005605482da9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae6ad7e5460 __libc_start_main +
    245

    6    tmpw5ftd2xc                        0x00005605482da479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    sorted.reverse()\n    return sorted.map({\n\
    \        switch $0 {\n        case 1: return \"One\"\n        case 2: return \"\
    Two\"\n        case 3: return \"Three\"\n        case 4: return \"Four\"\n   \
    \     case 5: return \"Five\"\n        case 6: return \"Six\"\n        case 7:\
    \ return \"Seven\"\n        case 8: return \"Eight\"\n        case 9: return \"\
    Nine\"\n        default: return \"\"\n        }\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpohy71kun/tmpohy71kun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acad6933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acad662ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acad662a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acad66297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohy71kun                        0x000055cf7cae69d1 <unavailable> + 6609

    5    libc.so.6                          0x00002acad6b1f460 __libc_start_main +
    245

    6    tmpohy71kun                        0x000055cf7cae6479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 > 0 && $0 < 10 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpy6p8flkn/tmpy6p8flkn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb390f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb38de8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb38de8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb38de77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6p8flkn                        0x000055a90c08f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002acb392dd460 __libc_start_main +
    245

    6    tmpy6p8flkn                        0x000055a90c08f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxaosojlb/tmpxaosojlb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b063363ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0633331b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0633331988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06333307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaosojlb                        0x0000564a0e8389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b0633826460 __libc_start_main +
    245

    6    tmpxaosojlb                        0x0000564a0e838479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let names\
    \ = reversed.map({String($0)})\n    return names\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_h9cclnf/tmp_h9cclnf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49660acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4965da3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4965da3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4965da27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_h9cclnf                        0x000055c3bb6579d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b4966298460 __libc_start_main +
    245

    6    tmp_h9cclnf                        0x000055c3bb657479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.reversed().map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpivpp15i7/tmpivpp15i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af60ed5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60ea55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60ea55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60ea547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivpp15i7                        0x000056327b0ff9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002af60ef4a460 __libc_start_main +
    245

    6    tmpivpp15i7                        0x000056327b0ff479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.reversed().map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpivpp15i7/tmpivpp15i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af60ed5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60ea55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60ea55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60ea547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivpp15i7                        0x000056327b0ff9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002af60ef4a460 __libc_start_main +
    245

    6    tmpivpp15i7                        0x000056327b0ff479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed().map { String(describing: $0) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp54c0hwbk/tmp54c0hwbk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8acdd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8acacbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8acacb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8acaca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54c0hwbk                        0x0000556b65c149d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ad8acfc0460 __libc_start_main +
    245

    6    tmp54c0hwbk                        0x0000556b65c14479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpohy71kun/tmpohy71kun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acad6933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acad662ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acad662a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acad66297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohy71kun                        0x000055cf7cae69d1 <unavailable> + 6609

    5    libc.so.6                          0x00002acad6b1f460 __libc_start_main +
    245

    6    tmpohy71kun                        0x000055cf7cae6479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ strings = reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprcusqswl/tmprcusqswl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33664f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33661efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33661ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33661ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcusqswl                        0x000055aa2a5db9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b33666e4460 __libc_start_main +
    245

    6    tmprcusqswl                        0x000055aa2a5db479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed().map {\n        switch $0 {\n    \
    \    case 1: return \"One\"\n        case 2: return \"Two\"\n        case 3: return\
    \ \"Three\"\n        case 4: return \"Four\"\n        case 5: return \"Five\"\n\
    \        case 6: return \"Six\"\n        case 7: return \"Seven\"\n        case\
    \ 8: return \"Eight\"\n        case 9: return \"Nine\"\n        default: return\
    \ \"\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed().map {\n        switch $0 {\n    \
    \    case 1: return \"One\"\n        case 2: return \"Two\"\n        case 3: return\
    \ \"Three\"\n        case 4: return \"Four\"\n        case 5: return \"Five\"\n\
    \        case 6: return \"Six\"\n        case 7: return \"Seven\"\n        case\
    \ 8: return \"Eight\"\n        case 9: return \"Nine\"\n        default: return\
    \ \"\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { numberToName(number: $0) }\n    return names\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmph6nj0khv.swift:17:32: error: cannot find 'numberToName' in scope\n\
    \    let names = reversed.map { numberToName(number: $0) }\n                 \
    \              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw5ftd2xc/tmpw5ftd2xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ad5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ad2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ad2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ad2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ftd2xc                        0x00005605482da9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae6ad7e5460 __libc_start_main +
    245

    6    tmpw5ftd2xc                        0x00005605482da479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    let mapped2 = mapped.map({\n    \
    \    switch $0 {\n        case \"1\":\n            return \"One\"\n        case\
    \ \"2\":\n            return \"Two\"\n        case \"3\":\n            return\
    \ \"Three\"\n        case \"4\":\n            return \"Four\"\n        case \"\
    5\":\n            return \"Five\"\n        case \"6\":\n            return \"\
    Six\"\n        case \"7\":\n            return \"Seven\"\n        case \"8\":\n\
    \            return \"Eight\"\n        case \"9\":\n            return \"Nine\"\
    \n        default:\n            return \"\"\n        }\n    })\n    return mapped2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.reversed().map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpivpp15i7/tmpivpp15i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af60ed5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60ea55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60ea55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60ea547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivpp15i7                        0x000056327b0ff9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002af60ef4a460 __libc_start_main +
    245

    6    tmpivpp15i7                        0x000056327b0ff479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let names\
    \ = reversed.map({String($0)})\n    return names\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpvz10j7su/tmpvz10j7su.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b435eedcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b435ebd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b435ebd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b435ebd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz10j7su                        0x000055775dbbb9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b435f0c8460 __libc_start_main +
    245

    6    tmpvz10j7su                        0x000055775dbbb479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxdge837j/tmpxdge837j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f14bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f148bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f148bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f148be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdge837j                        0x000055b5393bd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b2f14db4460 __libc_start_main +
    245

    6    tmpxdge837j                        0x000055b5393bd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return\
    \ reversed.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpif3lkth0/tmpif3lkth0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8110b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad810da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad810da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad810da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif3lkth0                        0x000056279b3059d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ad81129e460 __libc_start_main +
    245

    6    tmpif3lkth0                        0x000056279b305479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxaosojlb/tmpxaosojlb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b063363ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0633331b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0633331988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06333307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaosojlb                        0x0000564a0e8389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b0633826460 __libc_start_main +
    245

    6    tmpxaosojlb                        0x0000564a0e838479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw5ftd2xc/tmpw5ftd2xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ad5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ad2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ad2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ad2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ftd2xc                        0x00005605482da9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae6ad7e5460 __libc_start_main +
    245

    6    tmpw5ftd2xc                        0x00005605482da479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpluoqkt6k/tmpluoqkt6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0fda83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0fd77ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0fd77a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0fd7797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpluoqkt6k                        0x0000556384fd6621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba0fdc6f460 __libc_start_main +
    245

    6    tmpluoqkt6k                        0x0000556384fd60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxdge837j/tmpxdge837j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f14bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f148bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f148bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f148be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdge837j                        0x000055b5393bd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b2f14db4460 __libc_start_main +
    245

    6    tmpxdge837j                        0x000055b5393bd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxdge837j/tmpxdge837j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f14bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f148bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f148bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f148be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdge837j                        0x000055b5393bd9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b2f14db4460 __libc_start_main +
    245

    6    tmpxdge837j                        0x000055b5393bd479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.map { String($0) }.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpou05c_bs/tmpou05c_bs.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5780817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b578050eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b578050e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b578050d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou05c_bs                        0x00005566bb813961 <unavailable> + 6497

    5    libc.so.6                          0x00002b5780a03460 __libc_start_main +
    245

    6    tmpou05c_bs                        0x00005566bb813409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxaosojlb/tmpxaosojlb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b063363ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0633331b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0633331988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06333307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaosojlb                        0x0000564a0e8389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b0633826460 __libc_start_main +
    245

    6    tmpxaosojlb                        0x0000564a0e838479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ result = reversed.map { String($0) }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpegkccl_w/tmpegkccl_w.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdbc6e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdbc3dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdbc3df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdbc3de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegkccl_w                        0x000055592b0d79d1 <unavailable> + 6609

    5    libc.so.6                          0x00002afdbc8d4460 __libc_start_main +
    245

    6    tmpegkccl_w                        0x000055592b0d7479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    return\
    \ reversed.map({ String($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpy3xp_h9l/tmpy3xp_h9l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1aaf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1a7edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1a7ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1a7ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3xp_h9l                        0x0000562bb8d0a9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aee1ace2460 __libc_start_main +
    245

    6    tmpy3xp_h9l                        0x0000562bb8d0a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            result[i] = \"Error\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxaosojlb/tmpxaosojlb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b063363ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0633331b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0633331988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06333307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaosojlb                        0x0000564a0e8389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b0633826460 __libc_start_main +
    245

    6    tmpxaosojlb                        0x0000564a0e838479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ strings = reversed.map { String($0) }\n    let result = strings.map {\n    \
    \    switch $0 {\n        case \"1\": return \"One\"\n        case \"2\": return\
    \ \"Two\"\n        case \"3\": return \"Three\"\n        case \"4\": return \"\
    Four\"\n        case \"5\": return \"Five\"\n        case \"6\": return \"Six\"\
    \n        case \"7\": return \"Seven\"\n        case \"8\": return \"Eight\"\n\
    \        case \"9\": return \"Nine\"\n        default: return \"\"\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(String(i))\n\
    \        }\n    }\n    result.sort()\n    result.reverse()\n    for i in 0..<result.count\
    \ {\n        switch result[i] {\n        case \"1\":\n            result[i] =\
    \ \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.reversed().map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpivpp15i7/tmpivpp15i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af60ed5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60ea55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60ea55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60ea547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivpp15i7                        0x000056327b0ff9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002af60ef4a460 __libc_start_main +
    245

    6    tmpivpp15i7                        0x000056327b0ff479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map({ String($0) })\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_ribuea5/tmp_ribuea5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5a2b37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5a282eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5a282e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5a282d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ribuea5                        0x000055e0349159d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba5a2d23460 __libc_start_main +
    245

    6    tmp_ribuea5                        0x000055e034915479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map {\n        switch $0 {\n        case 1: return \"One\"\n\
    \        case 2: return \"Two\"\n        case 3: return \"Three\"\n        case\
    \ 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6: return\
    \ \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n\
    \        case 9: return \"Nine\"\n        default: return \"\"\n        }\n  \
    \  }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    return sorted.reversed().map { String($0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpfken4fev/tmpfken4fev.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb50e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb4dd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fb4dd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fb4dd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfken4fev                        0x0000557408fd89d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b2fb52cd460 __libc_start_main +
    245

    6    tmpfken4fev                        0x0000557408fd8479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { number in\n        switch number {\n        case 1: return\
    \ \"One\"\n        case 2: return \"Two\"\n        case 3: return \"Three\"\n\
    \        case 4: return \"Four\"\n        case 5: return \"Five\"\n        case\
    \ 6: return \"Six\"\n        case 7: return \"Seven\"\n        case 8: return\
    \ \"Eight\"\n        case 9: return \"Nine\"\n        default: return \"\"\n \
    \       }\n    }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            switch i {\n  \
    \          case 1:\n                result.append(\"One\")\n            case 2:\n\
    \                result.append(\"Two\")\n            case 3:\n               \
    \ result.append(\"Three\")\n            case 4:\n                result.append(\"\
    Four\")\n            case 5:\n                result.append(\"Five\")\n      \
    \      case 6:\n                result.append(\"Six\")\n            case 7:\n\
    \                result.append(\"Seven\")\n            case 8:\n             \
    \   result.append(\"Eight\")\n            case 9:\n                result.append(\"\
    Nine\")\n            default:\n                break\n            }\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpa__ggjb_/tmpa__ggjb_.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3704fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3701f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3701f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3701f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa__ggjb_                        0x000055af36bd38a1 <unavailable> + 6305

    5    libc.so.6                          0x00002ac3706ea460 __libc_start_main +
    245

    6    tmpa__ggjb_                        0x000055af36bd3349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpohy71kun/tmpohy71kun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acad6933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acad662ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acad662a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acad66297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohy71kun                        0x000055cf7cae69d1 <unavailable> + 6609

    5    libc.so.6                          0x00002acad6b1f460 __libc_start_main +
    245

    6    tmpohy71kun                        0x000055cf7cae6479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    return\
    \ reversed.map({\n        switch $0 {\n        case 1:\n            return \"\
    One\"\n        case 2:\n            return \"Two\"\n        case 3:\n        \
    \    return \"Three\"\n        case 4:\n            return \"Four\"\n        case\
    \ 5:\n            return \"Five\"\n        case 6:\n            return \"Six\"\
    \n        case 7:\n            return \"Seven\"\n        case 8:\n           \
    \ return \"Eight\"\n        case 9:\n            return \"Nine\"\n        default:\n\
    \            return \"\"\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted(by: >)\n    return numbers.map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0jc5uasc/tmp0jc5uasc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b29935c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2962cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2962c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2962b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jc5uasc                        0x00005567c1ee18d1 <unavailable> + 6353

    5    libc.so.6                          0x00002b8b29b21460 __libc_start_main +
    245

    6    tmp0jc5uasc                        0x00005567c1ee1379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String(describing: $0) }\n    return names\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpvi2y0jjm/tmpvi2y0jjm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e07b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e07894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e07894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e078937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi2y0jjm                        0x00005649d99109d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b8e07d89460 __libc_start_main +
    245

    6    tmpvi2y0jjm                        0x00005649d9910479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let result\
    \ = reversed.map({String($0)})\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8pbvuzzn/tmp8pbvuzzn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6513f70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6513c67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6513c67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6513c667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pbvuzzn                        0x0000557c88e969d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b651415c460 __libc_start_main +
    245

    6    tmp8pbvuzzn                        0x0000557c88e96479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    let result = mapped.map({\n        switch\
    \ $0 {\n        case \"1\":\n            return \"One\"\n        case \"2\":\n\
    \            return \"Two\"\n        case \"3\":\n            return \"Three\"\
    \n        case \"4\":\n            return \"Four\"\n        case \"5\":\n    \
    \        return \"Five\"\n        case \"6\":\n            return \"Six\"\n  \
    \      case \"7\":\n            return \"Seven\"\n        case \"8\":\n      \
    \      return \"Eight\"\n        case \"9\":\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw5ftd2xc/tmpw5ftd2xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ad5f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ad2f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ad2f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ad2ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ftd2xc                        0x00005605482da9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ae6ad7e5460 __libc_start_main +
    245

    6    tmpw5ftd2xc                        0x00005605482da479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ result = reversed.map { String($0) }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpegkccl_w/tmpegkccl_w.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdbc6e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdbc3dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdbc3df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdbc3de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegkccl_w                        0x000055592b0d79d1 <unavailable> + 6609

    5    libc.so.6                          0x00002afdbc8d4460 __libc_start_main +
    245

    6    tmpegkccl_w                        0x000055592b0d7479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkc60_fku/tmpkc60_fku.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56fc89bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56fc592b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56fc592988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56fc5917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc60_fku                        0x000055ceaa18c9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b56fca87460 __libc_start_main +
    245

    6    tmpkc60_fku                        0x000055ceaa18c479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ strings = reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprcusqswl/tmprcusqswl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33664f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33661efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33661ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33661ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcusqswl                        0x000055aa2a5db9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b33666e4460 __libc_start_main +
    245

    6    tmprcusqswl                        0x000055aa2a5db479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted().reversed().map { String($0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpfic4s8zh/tmpfic4s8zh.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b76c09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b76900b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b76900988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b768ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfic4s8zh                        0x000056543f37f9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b1b76df5460 __libc_start_main +
    245

    6    tmpfic4s8zh                        0x000056543f37f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkc60_fku/tmpkc60_fku.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56fc89bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56fc592b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56fc592988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56fc5917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc60_fku                        0x000055ceaa18c9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b56fca87460 __libc_start_main +
    245

    6    tmpkc60_fku                        0x000055ceaa18c479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let strings\
    \ = reversed.map({String($0)})\n    let result = strings.map({\n        switch\
    \ $0 {\n        case \"1\":\n            return \"One\"\n        case \"2\":\n\
    \            return \"Two\"\n        case \"3\":\n            return \"Three\"\
    \n        case \"4\":\n            return \"Four\"\n        case \"5\":\n    \
    \        return \"Five\"\n        case \"6\":\n            return \"Six\"\n  \
    \      case \"7\":\n            return \"Seven\"\n        case \"8\":\n      \
    \      return \"Eight\"\n        case \"9\":\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    return\
    \ reversed.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpif3lkth0/tmpif3lkth0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8110b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad810da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad810da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad810da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif3lkth0                        0x000056279b3059d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ad81129e460 __libc_start_main +
    245

    6    tmpif3lkth0                        0x000056279b305479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkc60_fku/tmpkc60_fku.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56fc89bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56fc592b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56fc592988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56fc5917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc60_fku                        0x000055ceaa18c9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b56fca87460 __libc_start_main +
    245

    6    tmpkc60_fku                        0x000055ceaa18c479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map({ String($0) })\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_ribuea5/tmp_ribuea5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5a2b37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5a282eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5a282e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5a282d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ribuea5                        0x000055e0349159d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba5a2d23460 __libc_start_main +
    245

    6    tmp_ribuea5                        0x000055e034915479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted()\n    let reversed = sorted.reversed()\n    let result\
    \ = reversed.map({\n        switch $0 {\n        case 1:\n            return \"\
    One\"\n        case 2:\n            return \"Two\"\n        case 3:\n        \
    \    return \"Three\"\n        case 4:\n            return \"Four\"\n        case\
    \ 5:\n            return \"Five\"\n        case 6:\n            return \"Six\"\
    \n        case 7:\n            return \"Seven\"\n        case 8:\n           \
    \ return \"Eight\"\n        case 9:\n            return \"Nine\"\n        default:\n\
    \            return \"\"\n        }\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpohy71kun/tmpohy71kun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acad6933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acad662ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acad662a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acad66297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohy71kun                        0x000055cf7cae69d1 <unavailable> + 6609

    5    libc.so.6                          0x00002acad6b1f460 __libc_start_main +
    245

    6    tmpohy71kun                        0x000055cf7cae6479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted().reversed().map({\n        switch $0 {\n        case\
    \ 1:\n            return \"One\"\n        case 2:\n            return \"Two\"\n\
    \        case 3:\n            return \"Three\"\n        case 4:\n            return\
    \ \"Four\"\n        case 5:\n            return \"Five\"\n        case 6:\n  \
    \          return \"Six\"\n        case 7:\n            return \"Seven\"\n   \
    \     case 8:\n            return \"Eight\"\n        case 9:\n            return\
    \ \"Nine\"\n        default:\n            return \"\"\n        }\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013984
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.reversed().map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpivpp15i7/tmpivpp15i7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af60ed5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60ea55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60ea55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60ea547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivpp15i7                        0x000056327b0ff9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002af60ef4a460 __libc_start_main +
    245

    6    tmpivpp15i7                        0x000056327b0ff479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map({ String($0) })\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_ribuea5/tmp_ribuea5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5a2b37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5a282eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5a282e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5a282d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ribuea5                        0x000055e0349159d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba5a2d23460 __libc_start_main +
    245

    6    tmp_ribuea5                        0x000055e034915479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ strings = reversed.map { String($0) }\n    return strings\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_kh6qp0u/tmp_kh6qp0u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c002e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfffd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfffd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfffd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kh6qp0u                        0x0000561b21e689d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b4c004cc460 __libc_start_main +
    245

    6    tmp_kh6qp0u                        0x0000561b21e68479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map({ String($0) })\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_ribuea5/tmp_ribuea5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5a2b37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5a282eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5a282e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5a282d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ribuea5                        0x000055e0349159d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba5a2d23460 __libc_start_main +
    245

    6    tmp_ribuea5                        0x000055e034915479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 > 0 && $0 < 10 }).sorted().reversed()\n    let result = sorted.map({ String($0)\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmppbkukfvd/tmppbkukfvd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d39691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d39388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d39388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d393877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbkukfvd                        0x0000555952f189d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b3d3987d460 __libc_start_main +
    245

    6    tmppbkukfvd                        0x0000555952f18479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013983
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ words = reversed.map { String($0) }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7p8212c_/tmp7p8212c_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24634d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24631cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24631cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24631cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7p8212c_                        0x00005592a32ed9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b24636c2460 __libc_start_main +
    245

    6    tmp7p8212c_                        0x00005592a32ed479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted(by: >)\n    let names = sorted.map({ String($0)\
    \ })\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpp7gi9at3/tmpp7gi9at3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6baa7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ba772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ba772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ba7717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7gi9at3                        0x00005628fd7e18d1 <unavailable> + 6353

    5    libc.so.6                          0x00002ba6bac67460 __libc_start_main +
    245

    6    tmpp7gi9at3                        0x00005628fd7e1379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013984
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { number in\n        switch number {\n        case 1: return\
    \ \"One\"\n        case 2: return \"Two\"\n        case 3: return \"Three\"\n\
    \        case 4: return \"Four\"\n        case 5: return \"Five\"\n        case\
    \ 6: return \"Six\"\n        case 7: return \"Seven\"\n        case 8: return\
    \ \"Eight\"\n        case 9: return \"Nine\"\n        default: return \"\"\n \
    \       }\n    }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let mapped\
    \ = reversed.map({String($0)})\n    return mapped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxaosojlb/tmpxaosojlb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b063363ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0633331b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0633331988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06333307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaosojlb                        0x0000564a0e8389d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b0633826460 __libc_start_main +
    245

    6    tmpxaosojlb                        0x0000564a0e838479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            result.append(dict[i]!)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpa_g8hdw8/tmpa_g8hdw8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eb7560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eb7257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eb7257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eb72567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_g8hdw8                        0x000055daefa3c9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b1eb774c460 __libc_start_main +
    245

    6    tmpa_g8hdw8                        0x000055daefa3c479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013984
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    let sorted = numbers.sorted()\n    let reversed\
    \ = sorted.reversed()\n    let strings = reversed.map { String($0) }\n    let\
    \ result = strings.map {\n        switch $0 {\n        case \"1\":\n         \
    \   return \"One\"\n        case \"2\":\n            return \"Two\"\n        case\
    \ \"3\":\n            return \"Three\"\n        case \"4\":\n            return\
    \ \"Four\"\n        case \"5\":\n            return \"Five\"\n        case \"\
    6\":\n            return \"Six\"\n        case \"7\":\n            return \"Seven\"\
    \n        case \"8\":\n            return \"Eight\"\n        case \"9\":\n   \
    \         return \"Nine\"\n        default:\n            return \"\"\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013984
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map({\n        switch $0 {\n        case 1: return \"One\"\n\
    \        case 2: return \"Two\"\n        case 3: return \"Three\"\n        case\
    \ 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6: return\
    \ \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n\
    \        case 9: return \"Nine\"\n        default: return \"\"\n        }\n  \
    \  })\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013984
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted().reversed().map({ String($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpptqw_w74/tmpptqw_w74.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b119d88ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b119d585b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b119d585988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b119d5847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptqw_w74                        0x000055b2aa7d09d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b119da7a460 __libc_start_main +
    245

    6    tmpptqw_w74                        0x000055b2aa7d0479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map({ String($0) })\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_ribuea5/tmp_ribuea5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5a2b37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5a282eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5a282e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5a282d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ribuea5                        0x000055e0349159d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ba5a2d23460 __libc_start_main +
    245

    6    tmp_ribuea5                        0x000055e034915479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    return sorted.map { String($0) }.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp_e7mhyw6/tmp_e7mhyw6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad824196c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad823e8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad823e8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad823e8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e7mhyw6                        0x000055f33b738961 <unavailable> + 6497

    5    libc.so.6                          0x00002ad824382460 __libc_start_main +
    245

    6    tmp_e7mhyw6                        0x000055f33b738409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013984
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpluoqkt6k/tmpluoqkt6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0fda83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0fd77ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0fd77a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0fd7797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpluoqkt6k                        0x0000556384fd6621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba0fdc6f460 __libc_start_main +
    245

    6    tmpluoqkt6k                        0x0000556384fd60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let nums = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return nums.reversed().map { String(describing:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpzb0at6uv/tmpzb0at6uv.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9baa6bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9baa3b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9baa3b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9baa3b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzb0at6uv                        0x000055f2b3b949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b9baa8a9460 __libc_start_main +
    245

    6    tmpzb0at6uv                        0x000055f2b3b94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013984
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map({ String($0) })\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpohy71kun/tmpohy71kun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acad6933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acad662ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acad662a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acad66297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohy71kun                        0x000055cf7cae69d1 <unavailable> + 6609

    5    libc.so.6                          0x00002acad6b1f460 __libc_start_main +
    245

    6    tmpohy71kun                        0x000055cf7cae6479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnd2zk17r/tmpnd2zk17r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d0c856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d0c54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d0c54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d0c54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd2zk17r                        0x00005568b8fe59d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6d0ca42460 __libc_start_main +
    245

    6    tmpnd2zk17r                        0x00005568b8fe5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
