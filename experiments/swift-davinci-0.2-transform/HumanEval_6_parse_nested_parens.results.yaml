language: swift
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ current_nesting_level += 1\n            } else if char == \")\" {\n        \
    \        current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnni4_hz1.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var current_max: Int = 0\n\
    \    var current_level: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_level += 1\n            if current_level > current_max\
    \ {\n                current_max = current_level\n            }\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(current_max)\n            current_max = 0\n\
    \            current_level = 0\n        }\n    }\n    result.append(current_max)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpw45bd2ov.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_depth_list = [Int]()\n    var max_depth = 0\n\
    \    var current_depth = 0\n    for char in paren_string {\n        if char ==\
    \ \"(\" {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == \")\" {\n            current_depth -= 1\n            if current_depth\
    \ == 0 {\n                max_depth_list.append(max_depth)\n                max_depth\
    \ = 0\n            }\n        }\n    }\n    return max_depth_list\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpw45bd2ov.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var nesting_level = 0\n        var\
    \ max_nesting_level = 0\n        for paren in group {\n            if paren ==\
    \ \"(\" {\n                nesting_level += 1\n            } else if paren ==\
    \ \")\" {\n                nesting_level -= 1\n            }\n            if nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = nesting_level\n \
    \           }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var current_max = 0\n  \
    \  var current_count = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_count += 1\n            if current_count > current_max\
    \ {\n                current_max = current_count\n            }\n        } else\
    \ if char == \")\" {\n            current_count -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(current_max)\n            current_max = 0\n\
    \            current_count = 0\n        }\n    }\n    result.append(current_max)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var current_nesting = 0\n \
    \   var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting += 1\n            if current_nesting > max_nesting\
    \ {\n                max_nesting = current_nesting\n            }\n        } else\
    \ if char == \")\" {\n            current_nesting -= 1\n        } else if char\
    \ == \" \" {\n            result.append(max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp24w47rqm.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_depth = 0\n    var curr_depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        curr_depth += 1\n            max_depth = max(max_depth, curr_depth)\n\
    \        } else if char == \")\" {\n            curr_depth -= 1\n        } else\
    \ if char == \" \" {\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            curr_depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa8cz0o6y.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = [Int]()\n    var current_nesting =\
    \ 0\n    var max_current_nesting = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting += 1\n            if current_nesting\
    \ > max_current_nesting {\n                max_current_nesting = current_nesting\n\
    \            }\n        } else if char == \")\" {\n            current_nesting\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting.append(max_current_nesting)\n\
    \            max_current_nesting = 0\n            current_nesting = 0\n      \
    \  }\n    }\n    max_nesting.append(max_current_nesting)\n    return max_nesting\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        result.append(parse_nested_parens_helper(paren_group:\
    \ paren_group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy6osjb2w.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpty4dvi65.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_nesting_level = 0\n     \
    \   var current_nesting_level = 0\n        for char in group {\n            if\
    \ char == \"(\" {\n                current_nesting_level += 1\n            } else\
    \ if char == \")\" {\n                current_nesting_level -= 1\n           \
    \ }\n            if current_nesting_level > max_nesting_level {\n            \
    \    max_nesting_level = current_nesting_level\n            }\n        }\n   \
    \     max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpt0u9k6n7.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for paren_group in paren_groups {\n  \
    \      result.append(parse_nested_parens_helper(paren_group: paren_group))\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1413eqe_.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var max_levels = [Int]()\n    for group in groups {\n        var level\
    \ = 0\n        var max_level = 0\n        for char in group {\n            if\
    \ char == \"(\" {\n                level += 1\n            } else if char == \"\
    )\" {\n                level -= 1\n            }\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        }\n        max_levels.append(max_level)\n\
    \    }\n    return max_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppbcd0nmr.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var paren_stack: [Character]\
    \ = []\n        var max_nesting = 0\n        var current_nesting = 0\n       \
    \ for paren in paren_group {\n            if paren == \"(\" {\n              \
    \  paren_stack.append(paren)\n                current_nesting += 1\n         \
    \       if current_nesting > max_nesting {\n                    max_nesting =\
    \ current_nesting\n                }\n            } else if paren == \")\" {\n\
    \                if paren_stack.count > 0 {\n                    paren_stack.removeLast()\n\
    \                    current_nesting -= 1\n                }\n            }\n\
    \        }\n        result.append(max_nesting)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgdoix1to.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var current_depth = 0\n        for paren in\
    \ paren_group {\n            if paren == \"(\" {\n                stack.push(paren)\n\
    \                current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if paren == \")\" {\n                if stack.isEmpty() {\n    \
    \                print(\"Error: Unbalanced parentheses\")\n                  \
    \  return []\n                }\n                stack.pop()\n               \
    \ current_depth -= 1\n            }\n        }\n        if !stack.isEmpty() {\n\
    \            print(\"Error: Unbalanced parentheses\")\n            return []\n\
    \        }\n        result.append(max_depth)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7x1m35mn.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp7x1m35mn.swift:11:21:\
    \ error: cannot find 'Stack' in scope\n        var stack = Stack<Character>()\n\
    \                    ^~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let paren_groups = paren_string.split(separator:\
    \ \" \")\n    for group in paren_groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var current_depth = 0\n        for char in\
    \ group {\n            if char == \"(\" {\n                stack.push(char)\n\
    \                current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                if stack.isEmpty() {\n     \
    \               print(\"Invalid string\")\n                    return []\n   \
    \             }\n                stack.pop()\n                current_depth -=\
    \ 1\n            }\n        }\n        if !stack.isEmpty() {\n            print(\"\
    Invalid string\")\n            return []\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi41qczb8.swift:11:21: error: cannot find 'Stack' in scope\n   \
    \     var stack = Stack<Character>()\n                    ^~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var result = [Int]()\n    for group in groups {\n        var max_nesting\
    \ = 0\n        var current_nesting = 0\n        for char in group {\n        \
    \    if char == \"(\" {\n                current_nesting += 1\n            } else\
    \ if char == \")\" {\n                current_nesting -= 1\n            }\n  \
    \          if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for paren_group in paren_groups {\n  \
    \      var max_nesting = 0\n        var current_nesting = 0\n        for paren\
    \ in paren_group {\n            if paren == \"(\" {\n                current_nesting\
    \ += 1\n            } else if paren == \")\" {\n                current_nesting\
    \ -= 1\n            }\n            if current_nesting > max_nesting {\n      \
    \          max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbb5q_6mt.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_level = 0\n       \
    \ var current_level = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_level += 1\n            } else if char == \")\"\
    \ {\n                current_level -= 1\n            }\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      }\n        result.append(max_level)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfbarxt_v.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var paren_counts = [Int]()\n    for paren_group in paren_groups {\n\
    \        var paren_count = 0\n        var max_paren_count = 0\n        for paren\
    \ in paren_group {\n            if paren == \"(\" {\n                paren_count\
    \ += 1\n            } else if paren == \")\" {\n                paren_count -=\
    \ 1\n            }\n            if paren_count > max_paren_count {\n         \
    \       max_paren_count = paren_count\n            }\n        }\n        paren_counts.append(max_paren_count)\n\
    \    }\n    return paren_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var current_level = 0\n        var max_level = 0\n        for char\
    \ in paren_group {\n            if char == \"(\" {\n                current_level\
    \ += 1\n            } else if char == \")\" {\n                current_level -=\
    \ 1\n            }\n            if current_level > max_level {\n             \
    \   max_level = current_level\n            }\n        }\n        max_nesting_levels.append(max_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var max_level\
    \ = 0\n        var level = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                level += 1\n            } else if char == \")\"\
    \ {\n                level -= 1\n            }\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp42sq6__4.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_nesting = 0\n     \
    \   var current_nesting = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                current_nesting += 1\n            } else if char\
    \ == \")\" {\n                current_nesting -= 1\n            }\n          \
    \  if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmph9rte20c.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups {\n\
    \        var max_nesting_level = 0\n        var current_nesting_level = 0\n  \
    \      for char in group {\n            if char == \"(\" {\n                current_nesting_level\
    \ += 1\n            } else if char == \")\" {\n                current_nesting_level\
    \ -= 1\n            }\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var paren_stack: [Character]\
    \ = []\n    var max_depth: Int = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            paren_stack.append(char)\n            max_depth\
    \ += 1\n        } else if char == \")\" {\n            paren_stack.popLast()\n\
    \            if paren_stack.isEmpty {\n                result.append(max_depth)\n\
    \                max_depth = 0\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp_n5d_1j7/tmp_n5d_1j7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2895b2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2895822b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2895822988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28958217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_n5d_1j7                        0x00005598dd4d484e <unavailable> + 6222

    5    libc.so.6                          0x00002b2895d17460 __libc_start_main +
    245

    6    tmp_n5d_1j7                        0x00005598dd4d4469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let paren_groups = paren_string.split(separator:\
    \ \" \")\n    for paren_group in paren_groups {\n        var curr_max = 0\n  \
    \      var curr_count = 0\n        for paren in paren_group {\n            if\
    \ paren == \"(\" {\n                curr_count += 1\n                if curr_count\
    \ > curr_max {\n                    curr_max = curr_count\n                }\n\
    \            } else if paren == \")\" {\n                curr_count -= 1\n   \
    \         }\n        }\n        result.append(curr_max)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var nesting_level = 0\n   \
    \ var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            nesting_level += 1\n            if nesting_level > max_nesting\
    \ {\n                max_nesting = nesting_level\n            }\n        } else\
    \ if char == \")\" {\n            nesting_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_nesting)\n            max_nesting = 0\n\
    \            nesting_level = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var current_level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_level += 1\n                if current_level > max_level {\n \
    \                   max_level = current_level\n                }\n           \
    \ } else if char == \")\" {\n                current_level -= 1\n            }\n\
    \        }\n        result.append(max_level)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp154fjy5d.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var results = [Int]()\n    for group in groups {\n        var stack\
    \ = [Character]()\n        var max_depth = 0\n        var current_depth = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ stack.append(char)\n                current_depth += 1\n                if current_depth\
    \ > max_depth {\n                    max_depth = current_depth\n             \
    \   }\n            } else if char == \")\" {\n                if stack.popLast()\
    \ == nil {\n                    // If we pop an empty stack, then we have an invalid\
    \ string\n                    return []\n                }\n                current_depth\
    \ -= 1\n            }\n        }\n        if stack.count > 0 {\n            //\
    \ If we have an unbalanced string, then we have an invalid string\n          \
    \  return []\n        }\n        results.append(max_depth)\n    }\n    return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpeaqzouzq.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var current_depth = 0\n        for char in paren_group {\n           \
    \ if char == \"(\" {\n                current_depth += 1\n            } else if\
    \ char == \")\" {\n                current_depth -= 1\n            }\n       \
    \     if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2i6r3erb.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var max_depth\
    \ = 0\n        var depth = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                depth += 1\n            } else if char == \")\"\
    \ {\n                depth -= 1\n            }\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpga1s1qxx.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var nesting_level = 0\n   \
    \ var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            nesting_level += 1\n            if nesting_level > max_nesting\
    \ {\n                max_nesting = nesting_level\n            }\n        } else\
    \ if char == \")\" {\n            nesting_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_nesting)\n            max_nesting = 0\n\
    \            nesting_level = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for paren_group in paren_groups {\n  \
    \      result.append(parse_nested_parens_helper(paren_group: paren_group))\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1413eqe_.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var current_depth = 0\n        for char in\
    \ group {\n            if char == \"(\" {\n                stack.push(char)\n\
    \                current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                if stack.isEmpty() {\n     \
    \               print(\"Error: mismatched parentheses\")\n                   \
    \ return [Int]()\n                }\n                stack.pop()\n           \
    \     current_depth -= 1\n            }\n        }\n        if !stack.isEmpty()\
    \ {\n            print(\"Error: mismatched parentheses\")\n            return\
    \ [Int]()\n        }\n        result.append(max_depth)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpr3ou0uj5.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpr3ou0uj5.swift:11:21: error:\
    \ cannot find 'Stack' in scope\n        var stack = Stack<Character>()\n     \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var paren_level = 0\n        var max_paren_level = 0\n        for\
    \ paren in paren_group {\n            if paren == \"(\" {\n                paren_level\
    \ += 1\n            } else if paren == \")\" {\n                paren_level -=\
    \ 1\n            }\n            if paren_level > max_paren_level {\n         \
    \       max_paren_level = paren_level\n            }\n        }\n        paren_levels.append(max_paren_level)\n\
    \    }\n    return paren_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpt3iu_e68.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0vm_jxrc.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_counts = [Int]()\n    for group in paren_groups {\n  \
    \      var paren_stack = Stack<Character>()\n        var max_count = 0\n     \
    \   var count = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                paren_stack.push(char)\n                count += 1\n        \
    \        if count > max_count {\n                    max_count = count\n     \
    \           }\n            } else if char == \")\" {\n                if paren_stack.isEmpty()\
    \ {\n                    break\n                }\n                paren_stack.pop()\n\
    \                count -= 1\n            }\n        }\n        paren_counts.append(max_count)\n\
    \    }\n    return paren_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_7vpow38.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_7vpow38.swift:11:27:\
    \ error: cannot find 'Stack' in scope\n        var paren_stack = Stack<Character>()\n\
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var result: [Int] = []\n    for group in groups {\n        var max_depth\
    \ = 0\n        var current_depth = 0\n        for char in group {\n          \
    \  if char == \"(\" {\n                current_depth += 1\n            } else\
    \ if char == \")\" {\n                current_depth -= 1\n            }\n    \
    \        if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var nesting_level = 0\n   \
    \ var result = [Int]()\n    var paren_array = paren_string.characters.map { String($0)\
    \ }\n    for paren in paren_array {\n        if paren == \"(\" {\n           \
    \ nesting_level += 1\n            if nesting_level > max_nesting {\n         \
    \       max_nesting = nesting_level\n            }\n        } else if paren ==\
    \ \")\" {\n            nesting_level -= 1\n        } else if paren == \" \" {\n\
    \            result.append(max_nesting)\n            max_nesting = 0\n       \
    \     nesting_level = 0\n        }\n    }\n    result.append(max_nesting)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3a3oret9.swift:11:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var paren_array = paren_string.characters.map { String($0)\
    \ }\n                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3a3oret9.swift:11:9: warning: variable 'paren_array'\
    \ was never mutated; consider changing to 'let' constant\n    var paren_array\
    \ = paren_string.characters.map { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var stack: [Character] =\
    \ []\n    var current_max: Int = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            stack.append(char)\n            current_max +=\
    \ 1\n        } else if char == \")\" {\n            stack.removeLast()\n     \
    \       if stack.isEmpty {\n                result.append(current_max)\n     \
    \           current_max = 0\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp7wes8frw/tmp7wes8frw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b986865bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9868352b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9868352988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98683517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wes8frw                        0x000055d8362bd84e <unavailable> + 6222

    5    libc.so.6                          0x00002b9868847460 __libc_start_main +
    245

    6    tmp7wes8frw                        0x000055d8362bd469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpobjegby2.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var depth = 0\n        for char in paren_group {\n            if char\
    \ == \"(\" {\n                depth += 1\n            } else if char == \")\"\
    \ {\n                depth -= 1\n            }\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsmrvglav.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var nesting_level = 0\n        var\
    \ max_nesting_level = 0\n        for char in group {\n            if char == \"\
    (\" {\n                nesting_level += 1\n            } else if char == \")\"\
    \ {\n                nesting_level -= 1\n            }\n            if nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = nesting_level\n \
    \           }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmuz1oxlr.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting = [Int]()\n    for paren_group in paren_groups {\n\
    \        var nesting_level = 0\n        var max_level = 0\n        for paren in\
    \ paren_group {\n            if paren == \"(\" {\n                nesting_level\
    \ += 1\n            } else if paren == \")\" {\n                nesting_level\
    \ -= 1\n            }\n            if nesting_level > max_level {\n          \
    \      max_level = nesting_level\n            }\n        }\n        max_nesting.append(max_level)\n\
    \    }\n    return max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy_k7jw1v.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack: [Character] = []\n   \
    \     var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.append(char)\n        \
    \        depth += 1\n                if depth > max_depth {\n                \
    \    max_depth = depth\n                }\n            } else if char == \")\"\
    \ {\n                stack.popLast()\n                depth -= 1\n           \
    \ }\n        }\n        result.append(max_depth)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqwx7xdhg.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var current_nesting = 0\n \
    \   var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting += 1\n            if current_nesting > max_nesting\
    \ {\n                max_nesting = current_nesting\n            }\n        } else\
    \ if char == \")\" {\n            current_nesting -= 1\n        } else if char\
    \ == \" \" {\n            result.append(max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var paren_stack = Stack<Character>()\n        var max_nesting_level\
    \ = 0\n        var current_nesting_level = 0\n        for paren in paren_group\
    \ {\n            if paren == \"(\" {\n                paren_stack.push(paren)\n\
    \                current_nesting_level += 1\n                if current_nesting_level\
    \ > max_nesting_level {\n                    max_nesting_level = current_nesting_level\n\
    \                }\n            } else if paren == \")\" {\n                paren_stack.pop()\n\
    \                current_nesting_level -= 1\n            }\n        }\n      \
    \  max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgl2rjtuq.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgl2rjtuq.swift:11:27:\
    \ error: cannot find 'Stack' in scope\n        var paren_stack = Stack<Character>()\n\
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack: [Character] = []\n   \
    \     var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.append(char)\n        \
    \        depth += 1\n                if depth > max_depth {\n                \
    \    max_depth = depth\n                }\n            } else if char == \")\"\
    \ {\n                if stack.isEmpty {\n                    print(\"Invalid paren\
    \ string\")\n                    return []\n                }\n              \
    \  stack.removeLast()\n                depth -= 1\n            }\n        }\n\
    \        if !stack.isEmpty {\n            print(\"Invalid paren string\")\n  \
    \          return []\n        }\n        result.append(max_depth)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy0istuq9.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var max_nesting\
    \ = 0\n        var current_nesting = 0\n        for char in group {\n        \
    \    if char == \"(\" {\n                current_nesting += 1\n            } else\
    \ if char == \")\" {\n                current_nesting -= 1\n            }\n  \
    \          if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptceqybv2.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.split(separator: \" \").map {\n\
    \        var max_depth = 0\n        var depth = 0\n        for char in $0 {\n\
    \            if char == \"(\" {\n                depth += 1\n                if\
    \ depth > max_depth {\n                    max_depth = depth\n               \
    \ }\n            } else if char == \")\" {\n                depth -= 1\n     \
    \       }\n        }\n        return max_depth\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpb0avska4.swift:11:23: error: cannot find 'parse_nested_parens_helper'\
    \ in scope\n        result.append(parse_nested_parens_helper(paren_string: group))\n\
    \                      ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0vm_jxrc.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for char in paren_group {\n            if char == \"(\" {\n         \
    \       current_nesting_level += 1\n            } else if char == \")\" {\n  \
    \              current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpysgiyp5s.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack: [Character] = []\n   \
    \     var max_nesting = 0\n        var current_nesting = 0\n        for char in\
    \ group {\n            if char == \"(\" {\n                stack.append(char)\n\
    \                current_nesting += 1\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting\n                }\n  \
    \          } else if char == \")\" {\n                if stack.isEmpty {\n   \
    \                 print(\"Invalid input\")\n                    return []\n  \
    \              }\n                stack.removeLast()\n                current_nesting\
    \ -= 1\n            }\n        }\n        if !stack.isEmpty {\n            print(\"\
    Invalid input\")\n            return []\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjopnsb2_.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = [Int]()\n    var current_nesting =\
    \ 0\n    var current_group = \"\"\n    for char in paren_string {\n        if\
    \ char == \" \" {\n            max_nesting.append(current_nesting)\n         \
    \   current_nesting = 0\n            current_group = \"\"\n        } else {\n\
    \            current_group.append(char)\n            if char == \"(\" {\n    \
    \            current_nesting += 1\n            } else if char == \")\" {\n   \
    \             current_nesting -= 1\n            }\n        }\n    }\n    max_nesting.append(current_nesting)\n\
    \    return max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmppfzjtx0f/tmppfzjtx0f.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b737646cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7376163b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7376163988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73761627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfzjtx0f                        0x00005605a2e136ee <unavailable> + 5870

    5    libc.so.6                          0x00002b7376658460 __libc_start_main +
    245

    6    tmppfzjtx0f                        0x00005605a2e13309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for group in paren_groups {\n        var\
    \ max_nesting = 0\n        var current_nesting = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                current_nesting += 1\n  \
    \          } else if char == \")\" {\n                current_nesting -= 1\n \
    \           }\n            if current_nesting > max_nesting {\n              \
    \  max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp96bjdtuc.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in group {\n            if char == \"(\" {\n                nesting_level\
    \ += 1\n            } else if char == \")\" {\n                nesting_level -=\
    \ 1\n            }\n            if nesting_level > max_nesting_level {\n     \
    \           max_nesting_level = nesting_level\n            }\n        }\n    \
    \    max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqybr1ff9.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var nesting_level = 0\n   \
    \ var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            nesting_level += 1\n            if nesting_level > max_nesting\
    \ {\n                max_nesting = nesting_level\n            }\n        } else\
    \ if char == \")\" {\n            nesting_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_nesting)\n            max_nesting = 0\n\
    \            nesting_level = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var max_nesting = [Int]()\n    for group in groups {\n        var nesting\
    \ = 0\n        var max_nesting_in_group = 0\n        for paren in group {\n  \
    \          if paren == \"(\" {\n                nesting += 1\n            } else\
    \ if paren == \")\" {\n                nesting -= 1\n            }\n         \
    \   if nesting > max_nesting_in_group {\n                max_nesting_in_group\
    \ = nesting\n            }\n        }\n        max_nesting.append(max_nesting_in_group)\n\
    \    }\n    return max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_level = 0\n \
    \       var level = 0\n        for char in paren_group {\n            if char\
    \ == \"(\" {\n                level += 1\n            } else if char == \")\"\
    \ {\n                level -= 1\n            }\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpf8sef6pq.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        paren_levels.append(parse_nested_parens_helper(paren_group: paren_group))\n\
    \    }\n    return paren_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnr27wcw7.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in group {\n            if char == \"(\" {\n                nesting_level\
    \ += 1\n            } else if char == \")\" {\n                nesting_level -=\
    \ 1\n            }\n            if nesting_level > max_nesting_level {\n     \
    \           max_nesting_level = nesting_level\n            }\n        }\n    \
    \    max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpg8_0c6gr.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_nesting = 0\n\
    \        var current_nesting = 0\n        for paren in paren_group {\n       \
    \     if paren == \"(\" {\n                current_nesting += 1\n            }\
    \ else if paren == \")\" {\n                current_nesting -= 1\n           \
    \ }\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpoapz9nkt.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var nesting_levels = [Int]()\n\
    \    var paren_stack = [Character]()\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            paren_stack.append(char)\n            max_nesting\
    \ += 1\n        } else if char == \")\" {\n            paren_stack.removeLast()\n\
    \            max_nesting -= 1\n        } else if char == \" \" {\n           \
    \ nesting_levels.append(max_nesting)\n        }\n    }\n    return nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmprw0d58q5/tmprw0d58q5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af40ae27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af40ab1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af40ab1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af40ab1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprw0d58q5                        0x00005574c6b7282e <unavailable> + 6190

    5    libc.so.6                          0x00002af40b013460 __libc_start_main +
    245

    6    tmprw0d58q5                        0x00005574c6b72449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ current_nesting_level += 1\n            } else if char == \")\" {\n        \
    \        current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnni4_hz1.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0q09g37b.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var max_level\
    \ = 0\n        var level = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                level += 1\n            } else if char == \")\"\
    \ {\n                level -= 1\n            }\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp42sq6__4.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe_zkxx_f.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var current_nesting = 0\n \
    \   var results = [Int]()\n    for char in paren_string {\n        if char ==\
    \ \"(\" {\n            current_nesting += 1\n            if current_nesting >\
    \ max_nesting {\n                max_nesting = current_nesting\n            }\n\
    \        } else if char == \")\" {\n            current_nesting -= 1\n       \
    \ } else if char == \" \" {\n            results.append(max_nesting)\n       \
    \     max_nesting = 0\n            current_nesting = 0\n        }\n    }\n   \
    \ results.append(max_nesting)\n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        paren_levels.append(paren_group.count(of: \"(\") - paren_group.count(of:\
    \ \")\"))\n    }\n    return paren_levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjq9e_fbp.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var current_max = 0\n  \
    \  var current_count = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_count += 1\n            if current_count > current_max\
    \ {\n                current_max = current_count\n            }\n        } else\
    \ if char == \")\" {\n            current_count -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(current_max)\n            current_max = 0\n\
    \            current_count = 0\n        }\n    }\n    result.append(current_max)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for paren in paren_group {\n            if paren == \"(\" {\n       \
    \         current_nesting_level += 1\n            } else if paren == \")\" {\n\
    \                current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var result = [Int]()\n    for paren_group in paren_groups {\n     \
    \   result.append(parse_nested_parens(paren_group: paren_group))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcrj6v_fw.swift:11:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(parse_nested_parens(paren_group: paren_group))\n\
    \               ^\n/tmp/tmpcrj6v_fw.swift:11:16: note: candidate expects value\
    \ of type '[Int]' for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n\
    \        result.append(parse_nested_parens(paren_group: paren_group))\n      \
    \         ^\n/tmp/tmpcrj6v_fw.swift:11:16: note: candidate expects value of type\
    \ '[Int]' for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n    \
    \    result.append(parse_nested_parens(paren_group: paren_group))\n          \
    \     ^\n/tmp/tmpcrj6v_fw.swift:11:42: error: incorrect argument label in call\
    \ (have 'paren_group:', expected 'paren_string:')\n        result.append(parse_nested_parens(paren_group:\
    \ paren_group))\n                                         ^~~~~~~~~~~~\n     \
    \                                     paren_string\n/tmp/tmpcrj6v_fw.swift:11:56:\
    \ error: cannot convert value of type 'String.SubSequence' (aka 'Substring') to\
    \ expected argument type 'String'\n        result.append(parse_nested_parens(paren_group:\
    \ paren_group))\n                                                       ^\n  \
    \                                                     String(    )\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var current_depth = 0\n        for char in\
    \ group {\n            if char == \"(\" {\n                stack.push(char)\n\
    \                current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                if stack.isEmpty() {\n     \
    \               print(\"Invalid input: \\(group)\")\n                    break\n\
    \                }\n                stack.pop()\n                current_depth\
    \ -= 1\n            }\n        }\n        if !stack.isEmpty() {\n            print(\"\
    Invalid input: \\(group)\")\n        }\n        result.append(max_depth)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpap1fz6z2.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpap1fz6z2.swift:11:21: error:\
    \ cannot find 'Stack' in scope\n        var stack = Stack<Character>()\n     \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var paren_groups = paren_string.split(separator:\
    \ \" \")\n    for group in paren_groups {\n        var max_depth = 0\n       \
    \ var depth = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                depth += 1\n            } else if char == \")\" {\n         \
    \       depth -= 1\n            }\n            if depth > max_depth {\n      \
    \          max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting = [Int]()\n    for paren_group in paren_groups {\n\
    \        var max_nest = 0\n        var curr_nest = 0\n        for paren in paren_group\
    \ {\n            if paren == \"(\" {\n                curr_nest += 1\n       \
    \     } else if paren == \")\" {\n                curr_nest -= 1\n           \
    \ }\n            if curr_nest > max_nest {\n                max_nest = curr_nest\n\
    \            }\n        }\n        max_nesting.append(max_nest)\n    }\n    return\
    \ max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0qnrvlbt.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    var current_level\
    \ = 0\n    var max_level = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            max_nesting_levels.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    max_nesting_levels.append(max_level)\n\
    \    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0q09g37b.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in group {\n            if char == \"(\" {\n                nesting_level\
    \ += 1\n            } else if char == \")\" {\n                nesting_level -=\
    \ 1\n            }\n            if nesting_level > max_nesting_level {\n     \
    \           max_nesting_level = nesting_level\n            }\n        }\n    \
    \    max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprdisnyuc.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var current_level = 0\n   \
    \     var max_level = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_level += 1\n            } else if char == \")\"\
    \ {\n                current_level -= 1\n            }\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      }\n        result.append(max_level)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpits7julc.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var result = [Int]()\n    for group in groups {\n        var max_nesting\
    \ = 0\n        var current_nesting = 0\n        for char in group {\n        \
    \    if char == \"(\" {\n                current_nesting += 1\n            } else\
    \ if char == \")\" {\n                current_nesting -= 1\n            }\n  \
    \          if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var stack = Stack<Character>()\n\
    \    var current_level = 0\n    var max_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            stack.push(char)\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if char == \")\" {\n        \
    \    stack.pop()\n            current_level -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_level)\n            max_level = 0\n    \
    \        current_level = 0\n        }\n    }\n    result.append(max_level)\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnaniypa9.swift:9:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var level = 0\n        var max_level = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                level += 1\n            }\
    \ else if char == \")\" {\n                level -= 1\n            }\n       \
    \     if level > max_level {\n                max_level = level\n            }\n\
    \        }\n        paren_levels.append(max_level)\n    }\n    return paren_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptcja1i4r.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    var is_nested = false\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            current_nesting_level\
    \ += 1\n            is_nested = true\n        } else if char == \")\" {\n    \
    \        current_nesting_level -= 1\n        } else if char == \" \" {\n     \
    \       if is_nested {\n                max_nesting_levels.append(current_nesting_level)\n\
    \                is_nested = false\n            }\n        }\n    }\n    return\
    \ max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmplgw8i4ro/tmplgw8i4ro.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87d9603c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87d92fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87d92fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87d92f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplgw8i4ro                        0x000055840ff1c68e <unavailable> + 5774

    5    libc.so.6                          0x00002b87d97ef460 __libc_start_main +
    245

    6    tmplgw8i4ro                        0x000055840ff1c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var current_nesting = 0\n \
    \   var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting += 1\n            if current_nesting > max_nesting\
    \ {\n                max_nesting = current_nesting\n            }\n        } else\
    \ if char == \")\" {\n            current_nesting -= 1\n        } else if char\
    \ == \" \" {\n            result.append(max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_level = 0\n  \
    \  var max_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var result = [Int]()\n    for group in groups {\n        var max_depth =\
    \ 0\n        var current_depth = 0\n        for char in group {\n            if\
    \ char == \"(\" {\n                current_depth += 1\n            } else if char\
    \ == \")\" {\n                current_depth -= 1\n            }\n            if\
    \ current_depth > max_depth {\n                max_depth = current_depth\n   \
    \         }\n        }\n        result.append(max_depth)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var current_level = 0\n\
    \    var max_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_level = 0\n \
    \       var level = 0\n        for char in paren_group {\n            if char\
    \ == \"(\" {\n                level += 1\n            } else if char == \")\"\
    \ {\n                level -= 1\n            }\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpp_0zc_x9.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = [Character]()\n     \
    \   var max_depth = 0\n        var depth = 0\n        for char in group {\n  \
    \          if char == \"(\" {\n                stack.append(char)\n          \
    \      depth += 1\n                if depth > max_depth {\n                  \
    \  max_depth = depth\n                }\n            } else if char == \")\" {\n\
    \                stack.popLast()\n                depth -= 1\n            }\n\
    \        }\n        result.append(max_depth)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6ht_te_l.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0vm_jxrc.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.push(char)\n          \
    \      depth += 1\n                if depth > max_depth {\n                  \
    \  max_depth = depth\n                }\n            } else if char == \")\" {\n\
    \                stack.pop()\n                depth -= 1\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_jgikqsn.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_jgikqsn.swift:11:21: error:\
    \ cannot find 'Stack' in scope\n        var stack = Stack<Character>()\n     \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var max_nested_parens = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var paren_stack = Stack<Character>()\n        var max_nested_paren\
    \ = 0\n        for paren in paren_group {\n            if paren == \"(\" {\n \
    \               paren_stack.push(paren)\n            } else if paren == \")\"\
    \ {\n                if paren_stack.isEmpty() {\n                    continue\n\
    \                }\n                paren_stack.pop()\n                max_nested_paren\
    \ += 1\n            }\n        }\n        max_nested_parens.append(max_nested_paren)\n\
    \    }\n    return max_nested_parens\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2g4y2f13.swift:11:27: error: cannot find 'Stack' in scope\n   \
    \     var paren_stack = Stack<Character>()\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa8cz0o6y.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.push(char)\n          \
    \      depth += 1\n                if depth > max_depth {\n                  \
    \  max_depth = depth\n                }\n            } else if char == \")\" {\n\
    \                stack.pop()\n                depth -= 1\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_jgikqsn.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_jgikqsn.swift:11:21: error:\
    \ cannot find 'Stack' in scope\n        var stack = Stack<Character>()\n     \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in paren_group {\n            if char == \"(\" {\n               \
    \ nesting_level += 1\n            } else if char == \")\" {\n                nesting_level\
    \ -= 1\n            }\n            if nesting_level > max_nesting_level {\n  \
    \              max_nesting_level = nesting_level\n            }\n        }\n \
    \       max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpg8wfmqst.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for char in paren_group {\n            if char == \"(\" {\n         \
    \       current_nesting_level += 1\n            } else if char == \")\" {\n  \
    \              current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphlwcl2m5.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_depth = 0\n       \
    \ var depth = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                depth += 1\n            } else if char == \")\" {\n         \
    \       depth -= 1\n            }\n            if depth > max_depth {\n      \
    \          max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxec3z8jr.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_nesting = 0\n        var current_nesting = 0\n        for paren\
    \ in group {\n            if paren == \"(\" {\n                stack.push(paren)\n\
    \                current_nesting += 1\n                if current_nesting > max_nesting\
    \ {\n                    max_nesting = current_nesting\n                }\n  \
    \          } else if paren == \")\" {\n                if stack.isEmpty {\n  \
    \                  // invalid string\n                    return []\n        \
    \        }\n                stack.pop()\n                current_nesting -= 1\n\
    \            }\n        }\n        if !stack.isEmpty {\n            // invalid\
    \ string\n            return []\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6_9b999p.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp6_9b999p.swift:11:21: error:\
    \ cannot find 'Stack' in scope\n        var stack = Stack<Character>()\n     \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for paren_group in paren_groups {\n  \
    \      var max_level = 0\n        var level = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                level += 1\n            }\
    \ else if char == \")\" {\n                level -= 1\n            }\n       \
    \     if level > max_level {\n                max_level = level\n            }\n\
    \        }\n        result.append(max_level)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe3rt72jv.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var max_depth = [Int]()\n    for group in groups {\n        var depth\
    \ = 0\n        var max_depth_in_group = 0\n        for char in group {\n     \
    \       if char == \"(\" {\n                depth += 1\n            } else if\
    \ char == \")\" {\n                depth -= 1\n            }\n            if depth\
    \ > max_depth_in_group {\n                max_depth_in_group = depth\n       \
    \     }\n        }\n        max_depth.append(max_depth_in_group)\n    }\n    return\
    \ max_depth\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpunf5ljmc.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpflu4ozbb.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4ygh1hmz.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var max_depth\
    \ = 0\n        var depth = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                depth += 1\n            } else if char == \")\"\
    \ {\n                depth -= 1\n            }\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpga1s1qxx.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let paren_groups = paren_string.split(separator:\
    \ \" \")\n    for group in paren_groups {\n        var max_depth = 0\n       \
    \ var current_depth = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_depth += 1\n            } else if char == \")\"\
    \ {\n                current_depth -= 1\n            }\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      }\n        result.append(max_depth)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var depth = 0\n    var depths = [Int]()\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            paren_stack.push(char)\n        \
    \    depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            if paren_stack.isEmpty()\
    \ {\n                print(\"Error: mismatched parentheses\")\n              \
    \  return []\n            } else {\n                paren_stack.pop()\n      \
    \          depth -= 1\n            }\n        } else if char == \" \" {\n    \
    \        depths.append(max_depth)\n            max_depth = 0\n            depth\
    \ = 0\n        }\n    }\n    return depths\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpah3gba8a.swift:8:23: error: cannot find 'Stack' in scope\n    var\
    \ paren_stack = Stack<Character>()\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi_t5ftkh.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var count = 0\n        var max_count\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       count += 1\n            } else if char == \")\" {\n                count\
    \ -= 1\n            }\n            if count > max_count {\n                max_count\
    \ = count\n            }\n        }\n        result.append(max_count)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmj99bwbx.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi_t5ftkh.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_depth = 0\n    var depth = 0\n    var max_depths\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            depth\
    \ -= 1\n        } else if char == \" \" {\n            max_depths.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    max_depths.append(max_depth)\n\
    \    return max_depths\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824835
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var max_depth = 0\n    var\
    \ depth = 0\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var nesting_levels = [Int]()\n\
    \    var current_nesting = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_nesting += 1\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        } else if char == \")\" {\n            current_nesting -= 1\n   \
    \     } else if char == \" \" {\n            nesting_levels.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n        }\n   \
    \ }\n    nesting_levels.append(max_nesting)\n    return nesting_levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe_zkxx_f.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level = 0\n    var level = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        level += 1\n            max_level = max(max_level, level)\n        }\
    \ else if char == \")\" {\n            level -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_level)\n            max_level = 0\n    \
    \        level = 0\n        }\n    }\n    result.append(max_level)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_level = 0\n  \
    \  var max_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpx1dtrzyr.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var paren_stack = Stack<Character>()\n        var max_nesting_level\
    \ = 0\n        var current_nesting_level = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                current_nesting_level +=\
    \ 1\n                paren_stack.push(char)\n            } else if char == \"\
    )\" {\n                if paren_stack.isEmpty() {\n                    break\n\
    \                }\n                paren_stack.pop()\n                current_nesting_level\
    \ -= 1\n            }\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcjv3yf02.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpcjv3yf02.swift:11:27:\
    \ error: cannot find 'Stack' in scope\n        var paren_stack = Stack<Character>()\n\
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var stack: [Character] =\
    \ []\n    var max_depth: Int = 0\n    var current_depth: Int = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            stack.append(char)\n\
    \            current_depth += 1\n            if current_depth > max_depth {\n\
    \                max_depth = current_depth\n            }\n        } else if char\
    \ == \")\" {\n            stack.popLast()\n            current_depth -= 1\n  \
    \      } else if char == \" \" {\n            result.append(max_depth)\n     \
    \       max_depth = 0\n            current_depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpflu4ozbb.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var level = 0\n        var max_level = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                level += 1\n            }\
    \ else if char == \")\" {\n                level -= 1\n            }\n       \
    \     if level > max_level {\n                max_level = level\n            }\n\
    \        }\n        paren_levels.append(max_level)\n    }\n    return paren_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptcja1i4r.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var results = [Int]()\n    for group in groups {\n        var depth\
    \ = 0\n        var max_depth = 0\n        for char in group {\n            if\
    \ char == \"(\" {\n                depth += 1\n            } else if char == \"\
    )\" {\n                depth -= 1\n            }\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        }\n        results.append(max_depth)\n\
    \    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyspzrs00.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5cxyq7eb.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpty4dvi65.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe_zkxx_f.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var result = [Int]()\n    for group in paren_groups {\n        var\
    \ max_nesting = 0\n        var current_nesting = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                current_nesting += 1\n  \
    \          } else if char == \")\" {\n                current_nesting -= 1\n \
    \           }\n            if current_nesting > max_nesting {\n              \
    \  max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var max_depth\
    \ = 0\n        var current_depth = 0\n        for char in group {\n          \
    \  if char == \"(\" {\n                current_depth += 1\n                if\
    \ current_depth > max_depth {\n                    max_depth = current_depth\n\
    \                }\n            } else if char == \")\" {\n                current_depth\
    \ -= 1\n            }\n        }\n        result.append(max_depth)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp541ds6zw.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplwe0esxm.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_depth = 0\n    var current_depth = 0\n    var\
    \ max_depth_list = [Int]()\n    for char in paren_string {\n        if char ==\
    \ \"(\" {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == \")\" {\n            current_depth -= 1\n            if current_depth\
    \ == 0 {\n                max_depth_list.append(max_depth)\n                max_depth\
    \ = 0\n            }\n        }\n    }\n    return max_depth_list\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var current_level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_level += 1\n                if current_level > max_level {\n \
    \                   max_level = current_level\n                }\n           \
    \ } else if char == \")\" {\n                current_level -= 1\n            }\n\
    \        }\n        result.append(max_level)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in paren_group {\n            if char == \"(\" {\n               \
    \ nesting_level += 1\n            } else if char == \")\" {\n                nesting_level\
    \ -= 1\n            }\n            if nesting_level > max_nesting_level {\n  \
    \              max_nesting_level = nesting_level\n            }\n        }\n \
    \       max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuc_9orpd.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpx1dtrzyr.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ current_nesting_level += 1\n            } else if char == \")\" {\n        \
    \        current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpc_sajd4n.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var paren_stack: [Character]\
    \ = []\n        var max_depth = 0\n        var curr_depth = 0\n        for paren\
    \ in paren_group {\n            if paren == \"(\" {\n                paren_stack.append(paren)\n\
    \                curr_depth += 1\n                if curr_depth > max_depth {\n\
    \                    max_depth = curr_depth\n                }\n            }\
    \ else if paren == \")\" {\n                paren_stack.removeLast()\n       \
    \         curr_depth -= 1\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqsur1a1q.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in paren_group {\n            if char == \"(\" {\n               \
    \ nesting_level += 1\n            } else if char == \")\" {\n                nesting_level\
    \ -= 1\n            }\n            if nesting_level > max_nesting_level {\n  \
    \              max_nesting_level = nesting_level\n            }\n        }\n \
    \       max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpg8wfmqst.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_level = 0\n        var current_level = 0\n        for paren\
    \ in paren_group {\n            if paren == \"(\" {\n                current_level\
    \ += 1\n            } else if paren == \")\" {\n                current_level\
    \ -= 1\n            }\n            if current_level > max_level {\n          \
    \      max_level = current_level\n            }\n        }\n        max_nesting_levels.append(max_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpau1qh1wb.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0vm_jxrc.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for char in paren_group {\n            if char == \"(\" {\n         \
    \       current_nesting_level += 1\n            } else if char == \")\" {\n  \
    \              current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwpa_4qkc.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ curr_nesting = 0\n        for char in group {\n            if char == \"(\"\
    \ {\n                curr_nesting += 1\n            } else if char == \")\" {\n\
    \                curr_nesting -= 1\n            }\n            if curr_nesting\
    \ > max_nesting {\n                max_nesting = curr_nesting\n            }\n\
    \        }\n        result.append(max_nesting)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi_t5ftkh.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var current_nesting = 0\n \
    \   var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting += 1\n            if current_nesting > max_nesting\
    \ {\n                max_nesting = current_nesting\n            }\n        } else\
    \ if char == \")\" {\n            current_nesting -= 1\n        } else if char\
    \ == \" \" {\n            result.append(max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var paren_stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var depth = 0\n    for char in paren_string {\n  \
    \      if char == \"(\" {\n            paren_stack.push(char)\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp17eqnffc.swift:9:23: error: cannot find 'Stack' in scope\n    var\
    \ paren_stack = Stack<Character>()\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe_zkxx_f.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var max_depth = 0\n    var\
    \ current_depth = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == \")\" {\n            current_depth -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in paren_group {\n            if char == \"(\" {\n               \
    \ nesting_level += 1\n            } else if char == \")\" {\n                nesting_level\
    \ -= 1\n            }\n            if nesting_level > max_nesting_level {\n  \
    \              max_nesting_level = nesting_level\n            }\n        }\n \
    \       max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_45jc3jy.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.push(char)\n          \
    \      depth += 1\n                if depth > max_depth {\n                  \
    \  max_depth = depth\n                }\n            } else if char == \")\" {\n\
    \                stack.pop()\n                depth -= 1\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_jgikqsn.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_jgikqsn.swift:11:21: error:\
    \ cannot find 'Stack' in scope\n        var stack = Stack<Character>()\n     \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack: [Character] = []\n   \
    \     var max_depth = 0\n        var current_depth = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                stack.append(char)\n    \
    \            current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                if stack.popLast() == nil {\n\
    \                    // This is an invalid group\n                    max_depth\
    \ = -1\n                    break\n                }\n                current_depth\
    \ -= 1\n            }\n        }\n        if stack.count > 0 {\n            //\
    \ This is an invalid group\n            max_depth = -1\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphkoz5bc3.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0vm_jxrc.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var paren_counts = [Int]()\n    for group in paren_groups {\n     \
    \   var count = 0\n        var max_count = 0\n        for char in group {\n  \
    \          if char == \"(\" {\n                count += 1\n            } else\
    \ if char == \")\" {\n                count -= 1\n            }\n            if\
    \ count > max_count {\n                max_count = count\n            }\n    \
    \    }\n        paren_counts.append(max_count)\n    }\n    return paren_counts\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.split(separator: \" \")\n    for group in paren_groups {\n  \
    \      var nesting_level = 0\n        var max_nesting_level = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                nesting_level +=\
    \ 1\n            } else if char == \")\" {\n                nesting_level -= 1\n\
    \            }\n            if nesting_level > max_nesting_level {\n         \
    \       max_nesting_level = nesting_level\n            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824835
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5cxyq7eb.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_level = 0\n  \
    \  var max_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n            } else if char == \")\" {\n          \
    \      current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for char in paren_group {\n            if char == \"(\" {\n         \
    \       current_nesting_level += 1\n            } else if char == \")\" {\n  \
    \              current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwpa_4qkc.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpflu4ozbb.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var current_nesting = 0\n \
    \   var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting += 1\n            if current_nesting > max_nesting\
    \ {\n                max_nesting = current_nesting\n            }\n        } else\
    \ if char == \")\" {\n            current_nesting -= 1\n        } else if char\
    \ == \" \" {\n            result.append(max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack: [Character] = []\n   \
    \     var max_depth = 0\n        var depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                stack.append(char)\n        \
    \        depth += 1\n                if depth > max_depth {\n                \
    \    max_depth = depth\n                }\n            } else if char == \")\"\
    \ {\n                if stack.popLast() == nil {\n                    break\n\
    \                }\n                depth -= 1\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpp3hfb4m1.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var max_nesting = [Int]()\n    for group in groups {\n        var stack\
    \ = [Character]()\n        var max_level = 0\n        var current_level = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ current_level += 1\n                if current_level > max_level {\n       \
    \             max_level = current_level\n                }\n                stack.append(char)\n\
    \            } else if char == \")\" {\n                current_level -= 1\n \
    \               if stack.count > 0 {\n                    stack.removeLast()\n\
    \                }\n            }\n        }\n        max_nesting.append(max_level)\n\
    \    }\n    return max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5it5_tlt.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups {\n\
    \        var max_level = 0\n        var current_level = 0\n        for char in\
    \ group {\n            if char == \"(\" {\n                current_level += 1\n\
    \            } else if char == \")\" {\n                current_level -= 1\n \
    \           }\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        }\n        max_nesting_levels.append(max_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var max_nesting_levels = [Int]()\n    for group in groups {\n        var\
    \ current_level = 0\n        var max_level = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                current_level += 1\n        \
    \    } else if char == \")\" {\n                current_level -= 1\n         \
    \   }\n            if current_level > max_level {\n                max_level =\
    \ current_level\n            }\n        }\n        max_nesting_levels.append(max_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting = [Int]()\n    for paren_group in paren_groups {\n\
    \        var paren_stack = Stack<Character>()\n        var max_nesting_count =\
    \ 0\n        var current_nesting_count = 0\n        for paren in paren_group {\n\
    \            if paren == \"(\" {\n                paren_stack.push(paren)\n  \
    \              current_nesting_count += 1\n                if current_nesting_count\
    \ > max_nesting_count {\n                    max_nesting_count = current_nesting_count\n\
    \                }\n            } else if paren == \")\" {\n                if\
    \ paren_stack.isEmpty() {\n                    print(\"Invalid paren group\")\n\
    \                    return []\n                }\n                paren_stack.pop()\n\
    \                current_nesting_count -= 1\n            }\n        }\n      \
    \  if !paren_stack.isEmpty() {\n            print(\"Invalid paren group\")\n \
    \           return []\n        }\n        max_nesting.append(max_nesting_count)\n\
    \    }\n    return max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5vt25r6x.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5vt25r6x.swift:11:27:\
    \ error: cannot find 'Stack' in scope\n        var paren_stack = Stack<Character>()\n\
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack: [Character] = []\n   \
    \     var max_nesting = 0\n        var nesting = 0\n        for paren in group\
    \ {\n            if paren == \"(\" {\n                stack.append(paren)\n  \
    \              nesting += 1\n                if nesting > max_nesting {\n    \
    \                max_nesting = nesting\n                }\n            } else\
    \ if paren == \")\" {\n                if stack.popLast() == nil {\n         \
    \           nesting = 0\n                } else {\n                    nesting\
    \ -= 1\n                }\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq5lyz0li.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var paren_stack: [Character]\
    \ = []\n    var current_level = 0\n    var max_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            paren_stack.append(char)\n      \
    \      current_level += 1\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ \")\" {\n            paren_stack.removeLast()\n            current_level -=\
    \ 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = 0\n    var nesting_level = 0\n   \
    \ var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            nesting_level += 1\n            if nesting_level > max_nesting\
    \ {\n                max_nesting = nesting_level\n            }\n        } else\
    \ if char == \")\" {\n            nesting_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_nesting)\n            max_nesting = 0\n\
    \            nesting_level = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_levels = [Int]()\n    var level = 0\n    var\
    \ max_level = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            level += 1\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == \")\" {\n            level\
    \ -= 1\n        } else if char == \" \" {\n            max_levels.append(max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    max_levels.append(max_level)\n\
    \    return max_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_nesting = 0\n\
    \        var current_nesting = 0\n        for paren in paren_group {\n       \
    \     if paren == \"(\" {\n                current_nesting += 1\n            }\
    \ else if paren == \")\" {\n                current_nesting -= 1\n           \
    \ }\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpoapz9nkt.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var stack\
    \ = [Character]()\n        var max_depth = 0\n        var current_depth = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ stack.append(char)\n                current_depth += 1\n                if current_depth\
    \ > max_depth {\n                    max_depth = current_depth\n             \
    \   }\n            } else if char == \")\" {\n                if stack.count >\
    \ 0 {\n                    stack.removeLast()\n                    current_depth\
    \ -= 1\n                }\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsrzemb79.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups\
    \ {\n        var paren_stack = Stack<Character>()\n        var max_nesting_level\
    \ = 0\n        var current_nesting_level = 0\n        for char in group {\n  \
    \          if char == \"(\" {\n                paren_stack.push(char)\n      \
    \          current_nesting_level += 1\n                if current_nesting_level\
    \ > max_nesting_level {\n                    max_nesting_level = current_nesting_level\n\
    \                }\n            } else if char == \")\" {\n                if\
    \ paren_stack.isEmpty() {\n                    print(\"Invalid string. Unbalanced\
    \ parentheses.\")\n                    return []\n                } else {\n \
    \                   paren_stack.pop()\n                    current_nesting_level\
    \ -= 1\n                }\n            }\n        }\n        if !paren_stack.isEmpty()\
    \ {\n            print(\"Invalid string. Unbalanced parentheses.\")\n        \
    \    return []\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpo1ai7_l_.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpo1ai7_l_.swift:11:27:\
    \ error: cannot find 'Stack' in scope\n        var paren_stack = Stack<Character>()\n\
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_level = 0\n        var level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0vm_jxrc.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824833
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_nesting = 0\n\
    \        var current_nesting = 0\n        for char in paren_group {\n        \
    \    if char == \"(\" {\n                current_nesting += 1\n            } else\
    \ if char == \")\" {\n                current_nesting -= 1\n            }\n  \
    \          if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmft_85ty.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_level = 0\n  \
    \  var max_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups\
    \ {\n        var max_level = 0\n        var current_level = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                current_level +=\
    \ 1\n            } else if char == \")\" {\n                current_level -= 1\n\
    \            }\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        }\n        max_nesting_levels.append(max_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1n9v7vtz.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_nesting = 0\n\
    \        var current_nesting = 0\n        for char in paren_group {\n        \
    \    if char == \"(\" {\n                current_nesting += 1\n            } else\
    \ if char == \")\" {\n                current_nesting -= 1\n            }\n  \
    \          if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        }\n        result.append(max_nesting)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprhi8b8au.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n                if current_depth > max_depth {\n \
    \                   max_depth = current_depth\n                }\n           \
    \ } else if char == \")\" {\n                current_depth -= 1\n            }\n\
    \        }\n        result.append(max_depth)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpexpsro1t.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       depth += 1\n            } else if char == \")\" {\n                depth\
    \ -= 1\n            }\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        }\n        result.append(max_depth)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi_t5ftkh.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824834
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var max_nesting = [Int]()\n    for group in paren_groups {\n      \
    \  var max_nesting_level = 0\n        var current_nesting_level = 0\n        for\
    \ paren in group {\n            if paren == \"(\" {\n                current_nesting_level\
    \ += 1\n            } else if paren == \")\" {\n                current_nesting_level\
    \ -= 1\n            }\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        }\n        max_nesting.append(max_nesting_level)\n    }\n    return max_nesting\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var depth = 0\n    var max_depth = 0\n    var max_depths\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            depth\
    \ -= 1\n            if depth == 0 {\n                max_depths.append(max_depth)\n\
    \                max_depth = 0\n            }\n        }\n    }\n    return max_depths\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var current_depth = 0\n        for char in\
    \ group {\n            if char == \"(\" {\n                stack.push(char)\n\
    \                current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                if stack.isEmpty() {\n     \
    \               print(\"Invalid string\")\n                    return []\n   \
    \             }\n                stack.pop()\n                current_depth -=\
    \ 1\n            }\n        }\n        if !stack.isEmpty() {\n            print(\"\
    Invalid string\")\n            return []\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0y0yxb_w.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp0y0yxb_w.swift:11:21: error:\
    \ cannot find 'Stack' in scope\n        var stack = Stack<Character>()\n     \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1659824909
