name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name:\
  \ \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\"\
  )\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    // TODO: Write some code to solve this coding challenge\n    return\
    \ \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_split = file_name.split(separator: \".\")\n    if file_name_split.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_split[0]\n\
    \    let second_part = file_name_split[1]\n    if !first_part.is_alphabetic()\
    \ || first_part.count == 0 {\n        return \"No\"\n    }\n    if first_part.count\
    \ > 3 {\n        return \"No\"\n    }\n    if !(second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\") {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let range = NSRange(location: 0, length: file_name.utf16.count)\n    if regex.firstMatch(in:\
    \ file_name, options: [], range: range) != nil {\n        return \"Yes\"\n   \
    \ } else {\n        return \"No\"\n    }", "    // TODO: Write some code to solve\
    \ this coding challenge\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""', '    return ""', "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    // TODO: Write your code here\n    return\
    \ \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n  \
    \  if file_name.range(of: file_name_regex, options: .regularExpression) != nil\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", '    return ""', "   \
    \ let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n   \
    \ if file_name.range(of: file_name_regex, options: .regularExpression) != nil\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", '    return ""', "   \
    \ // TODO: Write some code to solve this coding challenge\n    return \"\"", " \
    \   let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n \
    \   let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\
    \ != nil ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let range = NSRange(location: 0, length: file_name.utf16.count)\n    if regex.firstMatch(in:\
    \ file_name, options: [], range: range) != nil {\n        return \"Yes\"\n   \
    \ } else {\n        return \"No\"\n    }", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    return matches.count > 0 ? \"Yes\" : \"No\"",
  "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_matches = file_name.range(of: file_name_regex, options: .regularExpression)\n\
    \    return file_name_matches != nil ? \"Yes\" : \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil ? \"Yes\" : \"No\"", '    return
    ""', "    // TODO: Write your code here!\n    return \"\"", "    // TODO: Write\
    \ your code here!\n    return \"\"", '    return ""', '    return ""', '    return
    ""', '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // TODO: Implement this function\n    return \"\"",
  "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location:\
    \ 0, length: file_name.utf16.count)\n    let result = regex.firstMatch(in: file_name,\
    \ options: [], range: range)\n    return result != nil ? \"Yes\" : \"No\"", " \
    \   let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n \
    \   return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  if file_name.range(of: file_name_regex, options: .regularExpression) != nil\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_predicate = NSPredicate(format: \"SELF\
    \ MATCHES %@\", file_name_regex)\n    return file_name_predicate.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // Write your code here\n    return \"\"", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return\
    \ file_name.range(of: file_name_regex, options: .regularExpression) != nil ? \"\
    Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.range(of: file_name_regex, options: .regularExpression) !=\
    \ nil ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let range = NSRange(location: 0, length: file_name.utf16.count)\n    if regex.firstMatch(in:\
    \ file_name, options: [], range: range) != nil {\n        return \"Yes\"\n   \
    \ } else {\n        return \"No\"\n    }", '    return ""', "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_predicate\
    \ = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_predicate.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    // TODO: Write some code to solve this\
    \ coding challenge\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    if file_name_test.evaluate(with: file_name) {\n\
    \        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  // Write your code here\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 || file_name_suffix.count\
    \ == 0 {\n        return \"No\"\n    }\n    if !file_name_prefix.contains(where:\
    \ { $0.isLetter }) {\n        return \"No\"\n    }\n    if file_name_prefix.contains(where:\
    \ { $0.isNumber }) {\n        return \"No\"\n    }\n    if file_name_prefix.filter({\
    \ $0.isNumber }).count > 3 {\n        return \"No\"\n    }\n    if ![\"txt\",\
    \ \"exe\", \"dll\"].contains(file_name_suffix) {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_pattern) ? \"Yes\"\
    \ : \"No\"", "    let file_name_regex = #\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$\"\
    #\n    let file_name_matches = file_name.range(of: file_name_regex, options: .regularExpression)\n\
    \    return file_name_matches != nil ? \"Yes\" : \"No\"", "    let file_name_characters\
    \ = file_name.characters\n    let file_name_characters_count = file_name_characters.count\n\
    \    var digits_count = 0\n    var dot_count = 0\n    var dot_index = 0\n    var\
    \ extension_index = 0\n    var extension_length = 0\n    var extension_is_valid\
    \ = false\n    var extension_is_empty = true\n    var extension_is_txt = false\n\
    \    var extension_is_exe = false\n    var extension_is_dll = false\n    var extension_is_txt_or_exe_or_dll\
    \ = false\n    var extension_is_txt_or_exe_or_dll_or_empty = false\n    var extension_is_txt_or_exe_or_dll_or_empty_or_nil\
    \ = false\n    var extension_is_txt_or_exe_or_dll_or_empty_or_nil_or_nil = false\n\
    \    var extension_is_txt_or_exe_or_dll_or_empty_or_nil_or_nil_or_nil = false\n\
    \    var extension_is_txt_or_exe_or_dll_or_empty_or_nil_or_nil_or_nil_or_nil =\
    \ false\n    var extension_is_txt_or_exe_or_dll_or_empty_or_nil_or_nil_or_nil_or_nil_or_nil\
    \ = false\n    var extension_is_txt_or_exe_or_dll_or_empty_or_nil_or_nil_or_nil_or_nil_or_nil_or_nil\
    \ = false\n    var extension_is_txt_or_exe_or_dll_or_empty_or_nil_or_nil_or_nil_or_nil_or_nil_or_nil_or_nil\
    \ = false\n    var extension_is_txt_or_exe_or_dll_or_empty_or_nil_or_nil_or_nil_or_nil_or_nil_or_nil_or_nil_or_nil\
    \ = false\n    var extension_is_txt_or_exe_or_dll_or_empty_or_nil_or", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", "   \
    \ let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n   \
    \ let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n\
    \    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  if file_name.range(of: file_name_regex, options: .regularExpression) != nil\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    // Write your code\
    \ here\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 || file_name_suffix.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_prefix.count > 3 {\n\
    \        return \"No\"\n    }\n    let file_name_prefix_first_char = file_name_prefix[file_name_prefix.startIndex]\n\
    \    if !file_name_prefix_first_char.isLetter {\n        return \"No\"\n    }\n\
    \    if !file_name_suffix.isOneOf([\"txt\", \"exe\", \"dll\"]) {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    return matches.count > 0\
    \ ? \"Yes\" : \"No\"", '    return ""', "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let range = NSRange(location: 0, length: file_name.utf16.count)\n\
    \    if regex.firstMatch(in: file_name, options: [], range: range) != nil {\n\
    \        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_components = file_name.components(separatedBy: \".\")\n    if\
    \ file_name_components.count != 2 {\n        return \"No\"\n    }\n    let file_name_prefix\
    \ = file_name_components[0]\n    let file_name_suffix = file_name_components[1]\n\
    \    let file_name_prefix_components = file_name_prefix.components(separatedBy:\
    \ CharacterSet.decimalDigits)\n    if file_name_prefix_components.count != 2 {\n\
    \        return \"No\"\n    }\n    let file_name_prefix_first_char = file_name_prefix_components[0].first\n\
    \    if file_name_prefix_first_char == nil {\n        return \"No\"\n    }\n \
    \   if !CharacterSet.letters.contains(file_name_prefix_first_char!.unicodeScalars.first!)\
    \ {\n        return \"No\"\n    }\n    if ![\"txt\", \"exe\", \"dll\"].contains(file_name_suffix)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""', '    return ""', "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", "    let file_name_split = file_name.split(separator: \".\")\n\
    \    if file_name_split.count != 2 {\n        return \"No\"\n    }\n    let file_name_split_0\
    \ = file_name_split[0]\n    let file_name_split_1 = file_name_split[1]\n    if\
    \ file_name_split_0.count == 0 {\n        return \"No\"\n    }\n    if !file_name_split_0.first!.isLetter\
    \ {\n        return \"No\"\n    }\n    if file_name_split_0.filter({ $0.isNumber\
    \ }).count > 3 {\n        return \"No\"\n    }\n    if ![\"txt\", \"exe\", \"\
    dll\"].contains(file_name_split_1) {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    return file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", " \
    \   let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location:\
    \ 0, length: file_name.utf16.count)\n    let result = regex.firstMatch(in: file_name,\
    \ options: [], range: range)\n    return result != nil ? \"Yes\" : \"No\"", " \
    \   // TODO: Implement this function\n    return \"\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_components = file_name.components(separatedBy: \".\")\n    if\
    \ file_name_components.count != 2 {\n        return \"No\"\n    }\n    let file_name_prefix\
    \ = file_name_components[0]\n    let file_name_suffix = file_name_components[1]\n\
    \    if file_name_prefix.count == 0 || file_name_suffix.count == 0 {\n       \
    \ return \"No\"\n    }\n    if file_name_prefix.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_prefix.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return \"No\"\n    }\n    if file_name_suffix\
    \ != \"txt\" && file_name_suffix != \"exe\" && file_name_suffix != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex =\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\
    \ \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    // TODO: Write some code to solve this\
    \ coding challenge\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    // TODO: Write\
    \ your code here\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // Write your code here\n    return \"\"", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  // Write your code here\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // TODO: Write your code here\n    return \"\"", " \
    \   let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n \
    \   let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  if file_name.range(of: file_name_regex, options: .regularExpression) != nil\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_components[0]\n\
    \    let second_part = file_name_components[1]\n    if !first_part.is_valid_file_name_part()\
    \ || !second_part.is_valid_file_name_part() {\n        return \"No\"\n    }\n\
    \    if !second_part.is_valid_file_extension() {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_regex = try! NSRegularExpression(pattern:\
    \ file_name_pattern, options: .caseInsensitive)\n    let file_name_matches = file_name_regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    return file_name_matches.count > 0 ? \"Yes\" : \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(regex:\
    \ file_name_regex) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""', "    // TODO: Write your code here\n \
    \   return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches =\
    \ regex.matches(in: file_name, options: [], range: NSRange(location: 0, length:\
    \ file_name.count))\n    return matches.count > 0 ? \"Yes\" : \"No\"", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    if file_name.matches(regex:\
    \ file_name_regex) {\n        return \"Yes\"\n    }\n    return \"No\"", "   \
    \ let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n   \
    \ let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    "No"', "    var is_valid = true\n    var dot_count = 0\n    var digit_count =\
    \ 0\n    var extension_valid = false\n    var extension_start = 0\n    var extension_end\
    \ = 0\n    var extension = \"\"\n    var name_start = 0\n    var name_end = 0\n\
    \    var name = \"\"\n    for (index, char) in file_name.enumerated() {\n    \
    \    if char == \".\" {\n            dot_count += 1\n            extension_start\
    \ = index + 1\n        }\n        if char.isNumber {\n            digit_count\
    \ += 1\n        }\n        if index == file_name.count - 1 {\n            extension_end\
    \ = index + 1\n            name_end = index\n        }\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false\n    }\n    if digit_count > 3 {\n        is_valid\
    \ = false\n    }\n    if extension_start == 0 {\n        is_valid = false\n  \
    \  }\n    if extension_end == 0 {\n        is_valid = false\n    }\n    if name_end\
    \ == 0 {\n        is_valid = false\n    }\n    extension = String(file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: extension_start)..<file_name.index(file_name.startIndex, offsetBy:\
    \ extension_end)])\n    name = String(file_name[file_name.startIndex..<file_name.index(file_name.startIndex,\
    \ offsetBy: name_end)])\n    if extension == \"txt\" || extension == \"exe\" ||\
    \ extension == \"dll\" {\n        extension_valid = true\n    }\n    if extension_valid\
    \ == false {\n        is_valid = false\n    }\n    if name.count == 0 {\n    \
    \    is_valid = false\n    }\n    if name.first!.isLetter == false {\n       \
    \ is_valid = false\n    }\n    if is_valid == true {\n        return \"Yes\"\n\
    \    } else {\n        return \"No\"\n    }", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let matches = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count))\n    return matches.count\
    \ > 0 ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // TODO: Write some code to solve this coding challenge\n\
    \    return \"\"", "    // Write your code here\n    return \"\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    // TODO: Write your code here!\n    return\
    \ \"\"", "    // Write your code here\n    return \"\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = #\"^[a-zA-Z]\\w{0,2}\\.(txt|exe|dll)$\"#\n    let file_name_matches\
    \ = file_name.range(of: file_name_regex, options: .regularExpression)\n    return\
    \ file_name_matches != nil ? \"Yes\" : \"No\"", "    // Write your code here\n\
    \    return \"\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_without_extension = file_name_components[0]\n    let\
    \ file_name_extension = file_name_components[1]\n    let file_name_without_extension_components\
    \ = file_name_without_extension.components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \    let file_name_without_extension_digits = file_name_without_extension_components.filter\
    \ { $0 != \"\" }\n    let file_name_without_extension_first_character = file_name_without_extension.first!\n\
    \    let file_name_without_extension_first_character_is_letter = file_name_without_extension_first_character.isLetter\n\
    \    let file_name_without_extension_digits_count = file_name_without_extension_digits.count\n\
    \    let file_name_extension_is_valid = [\"txt\", \"exe\", \"dll\"].contains(file_name_extension)\n\
    \    if file_name_without_extension_digits_count > 3 {\n        return \"No\"\n\
    \    } else if !file_name_without_extension_first_character_is_letter {\n    \
    \    return \"No\"\n    } else if !file_name_extension_is_valid {\n        return\
    \ \"No\"\n    } else {\n        return \"Yes\"\n    }", '    return "No"', " \
    \   let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n \
    \   return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  if file_name.matches(regex: file_name_regex) {\n        return \"Yes\"\n  \
    \  }\n    return \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    "Yes"', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    ""', "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n   \
    \ return file_name.matches(pattern) ? \"Yes\" : \"No\"", '    return ""', "  \
    \  var digits = 0\n    var dot = false\n    var extension = \"\"\n    var name\
    \ = \"\"\n    for c in file_name {\n        if c >= \"0\" && c <= \"9\" {\n  \
    \          digits += 1\n        } else if c == \".\" {\n            dot = true\n\
    \        } else if dot {\n            extension += String(c)\n        } else {\n\
    \            name += String(c)\n        }\n    }\n    if digits > 3 || !dot ||\
    \ name.isEmpty || !(name[name.startIndex] >= \"a\" && name[name.startIndex] <=\
    \ \"z\" || name[name.startIndex] >= \"A\" && name[name.startIndex] <= \"Z\") ||\
    \ !(extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", '    return ""', "    let\
    \ file_name_regex = \"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n\
    \    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0\
    \ {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var count = 0\n    for char in file_name_arr_0 {\n        if char >= \"0\"\
    \ && char <= \"9\" {\n            count += 1\n        }\n    }\n    if count >\
    \ 3 {\n        return \"No\"\n    }\n    if file_name_arr_0[file_name_arr_0.startIndex]\
    \ >= \"0\" && file_name_arr_0[file_name_arr_0.startIndex] <= \"9\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: pattern, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", '    return ""',
  "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  // Write your code here\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 || file_name_suffix.count\
    \ == 0 {\n        return \"No\"\n    }\n    let file_name_prefix_first_char =\
    \ file_name_prefix[file_name_prefix.startIndex]\n    if !(file_name_prefix_first_char\
    \ >= \"a\" && file_name_prefix_first_char <= \"z\" ||\n        file_name_prefix_first_char\
    \ >= \"A\" && file_name_prefix_first_char <= \"Z\") {\n        return \"No\"\n\
    \    }\n    if file_name_prefix.filter({ $0 >= \"0\" && $0 <= \"9\" }).count >\
    \ 3 {\n        return \"No\"\n    }\n    if file_name_suffix != \"txt\" && file_name_suffix\
    \ != \"exe\" && file_name_suffix != \"dll\" {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""']
stop_tokens:
- "\n}"
