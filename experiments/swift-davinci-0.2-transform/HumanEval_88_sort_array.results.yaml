language: swift
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpquhmchc6.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpquhmchc6.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpquhmchc6.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: {$0 > $1})\n\
    \        } else {\n            result.sort(by: {$0 < $1})\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpc4yn6j9x/tmpc4yn6j9x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3b77a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3b7497b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3b7497988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3b74967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc4yn6j9x                        0x0000556156141934 <unavailable> + 6452

    5    libc.so.6                          0x00002ab3b798c460 __libc_start_main +
    245

    6    tmpc4yn6j9x                        0x0000556156141189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        let first\
    \ = array.removeFirst()\n        let last = array.removeLast()\n        if (first\
    \ + last) % 2 == 0 {\n            array.sort(by: >)\n        } else {\n      \
    \      array.sort(by: <)\n        }\n        array.insert(first, at: 0)\n    \
    \    array.append(last)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpk4etpy1y/tmpk4etpy1y.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04497dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04494d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04494d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04494d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4etpy1y                        0x0000557008e9b946 <unavailable> + 6470

    5    libc.so.6                          0x00002b04499c7460 __libc_start_main +
    245

    6    tmpk4etpy1y                        0x0000557008e9b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.first! + array.last!\n\
    \    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdrpk74yf/tmpdrpk74yf.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002accc9d15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc9a0c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accc9a0c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accc9a0c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accc9a0bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdrpk74yf                        0x0000561745353efd <unavailable> + 7933

    6    tmpdrpk74yf                        0x000056174535350d <unavailable> + 5389

    7    libc.so.6                          0x00002accc9f01460 __libc_start_main +
    245

    8    tmpdrpk74yf                        0x0000561745353219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            array.swapAt(0,\
    \ 1)\n        }\n        return array\n    }\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            array.swapAt(0,\
    \ 1)\n        }\n        return array\n    }\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count > 1 {\n        if\
    \ array[0] + array[array.count - 1] % 2 == 0 {\n            sortedArray.sort(by:\
    \ >)\n        } else {\n            sortedArray.sort(by: <)\n        }\n    }\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp15qs_l2l/tmp15qs_l2l.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba707bb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7078aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7078aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7078a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15qs_l2l                        0x000055db230d2934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba707d9f460 __libc_start_main +
    245

    6    tmp15qs_l2l                        0x000055db230d2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        let first\
    \ = array.removeFirst()\n        let last = array.removeLast()\n        let sum\
    \ = first + last\n        if sum % 2 == 0 {\n            array.sort(by: >)\n \
    \       } else {\n            array.sort(by: <)\n        }\n        array.insert(first,\
    \ at: 0)\n        array.append(last)\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpubfrzoot/tmpubfrzoot.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b793a3d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b793a0cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b793a0cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b793a0ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubfrzoot                        0x000055cbfda8d946 <unavailable> + 6470

    5    libc.so.6                          0x00002b793a5c0460 __libc_start_main +
    245

    6    tmpubfrzoot                        0x000055cbfda8d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    for i in 0..<result.count {\n      \
    \  for j in i+1..<result.count {\n            if (i + j) % 2 == 0 {\n        \
    \        if result[i] < result[j] {\n                    let temp = result[i]\n\
    \                    result[i] = result[j]\n                    result[j] = temp\n\
    \                }\n            } else {\n                if result[i] > result[j]\
    \ {\n                    let temp = result[i]\n                    result[i] =\
    \ result[j]\n                    result[j] = temp\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpp00gwd06/tmpp00gwd06.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae641a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae63e99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae63e99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae63e987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp00gwd06                        0x00005592bd58b876 <unavailable> + 6262

    5    libc.so.6                          0x00002aae6438e460 __libc_start_main +
    245

    6    tmpp00gwd06                        0x00005592bd58b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.isEmpty {\n        return array\n\
    \    }\n    if array.count == 1 {\n        return array\n    }\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else\
    \ {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_9iu9rfc/tmp_9iu9rfc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1456d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1453cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1453cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1453ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9iu9rfc                        0x0000561ddc786934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba1458c0460 __libc_start_main +
    245

    6    tmp_9iu9rfc                        0x0000561ddc786189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpuel40qsa/tmpuel40qsa.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4244274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4243f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4243f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4243f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuel40qsa                        0x0000559b691c4934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4244460460 __libc_start_main +
    245

    6    tmpuel40qsa                        0x0000559b691c4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else\
    \ {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpquhmchc6.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpquhmchc6.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpquhmchc6.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        let first\
    \ = array.removeFirst()\n        let last = array.removeLast()\n        if (first\
    \ + last) % 2 == 0 {\n            array.sort(by: >)\n        } else {\n      \
    \      array.sort(by: <)\n        }\n        array.insert(first, at: 0)\n    \
    \    array.append(last)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpk4etpy1y/tmpk4etpy1y.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04497dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04494d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04494d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04494d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4etpy1y                        0x0000557008e9b946 <unavailable> + 6470

    5    libc.so.6                          0x00002b04499c7460 __libc_start_main +
    245

    6    tmpk4etpy1y                        0x0000557008e9b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count == 0 {\n        return\
    \ result\n    }\n    if array.count == 1 {\n        return result\n    }\n   \
    \ if (array[0] + array[array.count - 1]) % 2 == 0 {\n        result.sort(by: >)\n\
    \    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sortedArray = array.sorted()\n    return sum\
    \ % 2 == 0 ? sortedArray.reversed() : sortedArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n           \
    \ result.sort(by: >)\n        } else {\n            result.sort(by: <)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n            array.sort(by: >)\n      \
    \  } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count > 1 {\n        if\
    \ array[0] + array[array.count - 1] % 2 == 0 {\n            sortedArray.sort(by:\
    \ >)\n        } else {\n            sortedArray.sort(by: <)\n        }\n    }\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp15qs_l2l/tmp15qs_l2l.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba707bb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7078aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7078aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7078a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15qs_l2l                        0x000055db230d2934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba707d9f460 __libc_start_main +
    245

    6    tmp15qs_l2l                        0x000055db230d2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sortedArray = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5zi4zqte.swift:19:55: error: unary operator cannot be separated\
    \ from its operand\n    let sortedArray = array.sorted(by: sum % 2 == 0 ? > :\
    \ <)\n                                                      ^~\n             \
    \                                          \n/tmp/tmp5zi4zqte.swift:19:57: error:\
    \ expected expression after '?' in ternary expression\n    let sortedArray = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n                                                    \
    \    ^\n/tmp/tmp5zi4zqte.swift:18:9: warning: initialization of immutable value\
    \ 'sum' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let sum = array[0] + array[array.count - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n          \
    \  array.swapAt(0, 1)\n        }\n        return array\n    }\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else\
    \ {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpql8d8bfc/tmpql8d8bfc.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ffffb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fffcb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fffcb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fffcaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpql8d8bfc                        0x000056250c0fbb12 <unavailable> + 6930

    5    libc.so.6                          0x00002b70001a5460 __libc_start_main +
    245

    6    tmpql8d8bfc                        0x000056250c0fb229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    for i in 0..<array.count {\n        for\
    \ j in i..<array.count {\n            if (i + j) % 2 == 0 {\n                if\
    \ array[i] < array[j] {\n                    array.swapAt(i, j)\n            \
    \    }\n            } else {\n                if array[i] > array[j] {\n     \
    \               array.swapAt(i, j)\n                }\n            }\n       \
    \ }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpb15kql3w/tmpb15kql3w.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1d43e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1d40dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1d40db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1d40da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb15kql3w                        0x000055e845d4a8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002ac1d45d0460 __libc_start_main +
    245

    6    tmpb15kql3w                        0x000055e845d4a2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sortedArray = sum % 2 == 0 ? array.sorted(by:\
    \ >) : array.sorted()\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpuel40qsa/tmpuel40qsa.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4244274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4243f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4243f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4243f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuel40qsa                        0x0000559b691c4934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4244460460 __libc_start_main +
    245

    6    tmpuel40qsa                        0x0000559b691c4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    var result = array\n    let sum = array[0]\
    \ + array[array.count - 1]\n    if sum % 2 == 0 {\n        result.sort(by: >)\n\
    \    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result: [Int] = array\n    if array.count > 1 {\n      \
    \  if array.first! + array.last! % 2 == 0 {\n            result.sort(by: >)\n\
    \        } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp02rh78ij/tmp02rh78ij.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab899fb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab899ca9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab899ca9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab899ca87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02rh78ij                        0x0000556fb1ab2a14 <unavailable> + 6676

    5    libc.so.6                          0x00002ab89a19e460 __libc_start_main +
    245

    6    tmp02rh78ij                        0x0000556fb1ab2269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        let sum = first + last\n\
    \        if sum % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    var result = array\n    if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n        result.sort(by: >)\n    } else\
    \ {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpo3o1osx6/tmpo3o1osx6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaa41d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaa3ec8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaa3ec8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaa3ec77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3o1osx6                        0x000055f68ea61934 <unavailable> + 6452

    5    libc.so.6                          0x00002adaa43bd460 __libc_start_main +
    245

    6    tmpo3o1osx6                        0x000055f68ea61189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjd8hvkk4/tmpjd8hvkk4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e7f1b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e7eeaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e7eeae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e7eead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjd8hvkk4                        0x0000556fac07a5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1e7f3a3460 __libc_start_main +
    245

    6    tmpjd8hvkk4                        0x0000556fac079fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpuel40qsa/tmpuel40qsa.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4244274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4243f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4243f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4243f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuel40qsa                        0x0000559b691c4934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4244460460 __libc_start_main +
    245

    6    tmpuel40qsa                        0x0000559b691c4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_9iu9rfc/tmp_9iu9rfc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1456d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1453cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1453cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1453ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9iu9rfc                        0x0000561ddc786934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba1458c0460 __libc_start_main +
    245

    6    tmp_9iu9rfc                        0x0000561ddc786189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sortedArray = array.sorted()\n    return sum\
    \ % 2 == 0 ? sortedArray.reversed() : sortedArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            array.swapAt(0,\
    \ 1)\n        }\n        return array\n    }\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        return array.sorted(by: >)\n    } else\
    \ {\n        return array.sorted(by: <)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    let sum = array[0] + array[array.count - 1]\n    if sum %\
    \ 2 == 0 {\n        return array.sorted(by: >)\n    }\n    return array.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    let sum = array[0] + array[array.count - 1]\n    if sum %\
    \ 2 == 0 {\n        return array.sorted(by: >)\n    }\n    return array.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjd8hvkk4/tmpjd8hvkk4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e7f1b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e7eeaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e7eeae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e7eead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjd8hvkk4                        0x0000556fac07a5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1e7f3a3460 __libc_start_main +
    245

    6    tmpjd8hvkk4                        0x0000556fac079fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpuel40qsa/tmpuel40qsa.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4244274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4243f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4243f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4243f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuel40qsa                        0x0000559b691c4934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4244460460 __libc_start_main +
    245

    6    tmpuel40qsa                        0x0000559b691c4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            array.swapAt(0,\
    \ 1)\n        }\n        return array\n    }\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n            array.sort(by: >)\n      \
    \  } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    var array = array\n    let sum = array[0]\
    \ + array[array.count - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n\
    \    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            return [array[1], array[0]]\n        } else\
    \ {\n            return array\n        }\n    }\n    var temp = array\n    if\
    \ (temp[0] + temp[temp.count - 1]) % 2 == 0 {\n        temp.sort(by: >)\n    }\
    \ else {\n        temp.sort(by: <)\n    }\n    return temp\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7iv3nov9/tmp7iv3nov9.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba201424c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba20111bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba20111b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba20111a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iv3nov9                        0x00005650bb9e2a72 <unavailable> + 6770

    5    libc.so.6                          0x00002ba201610460 __libc_start_main +
    245

    6    tmp7iv3nov9                        0x00005650bb9e2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if array[left] % 2 == 0 {\n         \
    \   if array[right] % 2 == 1 {\n                result.swapAt(left, right)\n \
    \               left += 1\n                right -= 1\n            } else {\n\
    \                right -= 1\n            }\n        } else {\n            left\
    \ += 1\n        }\n    }\n    if array.count % 2 == 0 {\n        for i in 0..<array.count/2\
    \ {\n            result.swapAt(i, array.count - 1 - i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmplj548wiq/tmplj548wiq.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3607901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36075f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36075f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36075f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj548wiq                        0x000056164141e8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b3607aed460 __libc_start_main +
    245

    6    tmplj548wiq                        0x000056164141e2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpuel40qsa/tmpuel40qsa.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4244274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4243f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4243f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4243f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuel40qsa                        0x0000559b691c4934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4244460460 __libc_start_main +
    245

    6    tmpuel40qsa                        0x0000559b691c4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count > 1 {\n        if\
    \ array[0] + array[array.count - 1] % 2 == 0 {\n            sortedArray.sort(by:\
    \ >)\n        } else {\n            sortedArray.sort(by: <)\n        }\n    }\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp15qs_l2l/tmp15qs_l2l.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba707bb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7078aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7078aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7078a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15qs_l2l                        0x000055db230d2934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba707d9f460 __libc_start_main +
    245

    6    tmp15qs_l2l                        0x000055db230d2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            return [array[1], array[0]]\n        } else\
    \ {\n            return array\n        }\n    }\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        return sort_array(array: array[0..<array.count - 1]).sorted(by:\
    \ >) + [array[array.count - 1]]\n    } else {\n        return sort_array(array:\
    \ array[0..<array.count - 1]).sorted(by: <) + [array[array.count - 1]]\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpzo1qtjla.swift:31:39: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        return sort_array(array: array[0..<array.count\
    \ - 1]).sorted(by: >) + [array[array.count - 1]]\n                           \
    \           ^\n/tmp/tmpzo1qtjla.swift:33:39: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n        return sort_array(array:\
    \ array[0..<array.count - 1]).sorted(by: <) + [array[array.count - 1]]\n     \
    \                                 ^\n"
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count == 0 {\n        return\
    \ result\n    }\n    if array.count == 1 {\n        return result\n    }\n   \
    \ if array.count == 2 {\n        if array[0] > array[1] {\n            result[0]\
    \ = array[1]\n            result[1] = array[0]\n        }\n        return result\n\
    \    }\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdahut_mf/tmpdahut_mf.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad71f5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad71c54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad71c54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad71c537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdahut_mf                        0x00005580406b4984 <unavailable> + 6532

    5    libc.so.6                          0x00002aad72149460 __libc_start_main +
    245

    6    tmpdahut_mf                        0x00005580406b41d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjd8hvkk4/tmpjd8hvkk4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e7f1b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e7eeaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e7eeae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e7eead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjd8hvkk4                        0x0000556fac07a5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1e7f3a3460 __libc_start_main +
    245

    6    tmpjd8hvkk4                        0x0000556fac079fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        let first\
    \ = array.removeFirst()\n        let last = array.removeLast()\n        if (first\
    \ + last) % 2 == 0 {\n            array.sort(by: >)\n        } else {\n      \
    \      array.sort(by: <)\n        }\n        array.insert(first, at: 0)\n    \
    \    array.append(last)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpk4etpy1y/tmpk4etpy1y.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04497dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04494d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04494d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04494d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4etpy1y                        0x0000557008e9b946 <unavailable> + 6470

    5    libc.so.6                          0x00002b04499c7460 __libc_start_main +
    245

    6    tmpk4etpy1y                        0x0000557008e9b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n        return\
    \ array.sorted(by: >)\n    } else {\n        return array.sorted()\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.first! + array.last!\n\
    \    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdrpk74yf/tmpdrpk74yf.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002accc9d15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc9a0c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accc9a0c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accc9a0c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accc9a0bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdrpk74yf                        0x0000561745353efd <unavailable> + 7933

    6    tmpdrpk74yf                        0x000056174535350d <unavailable> + 5389

    7    libc.so.6                          0x00002accc9f01460 __libc_start_main +
    245

    8    tmpdrpk74yf                        0x0000561745353219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        var left\
    \ = 0\n        var right = array.count - 1\n        while left < right {\n   \
    \         while left < right && (array[left] + array[right]) % 2 == 1 {\n    \
    \            left += 1\n            }\n            while left < right && (array[left]\
    \ + array[right]) % 2 == 0 {\n                right -= 1\n            }\n    \
    \        if left < right {\n                result.swapAt(left, right)\n     \
    \       }\n        }\n        if left == right {\n            if (array[left]\
    \ + array[right]) % 2 == 0 {\n                left += 1\n            } else {\n\
    \                right -= 1\n            }\n        }\n        if left < array.count\
    \ {\n            result[left...].sort()\n        }\n        if right >= 0 {\n\
    \            result[0...right].sort(by: >)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpadfcyhkp/tmpadfcyhkp.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ff537fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ff5076b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ff5076988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ff50757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadfcyhkp                        0x000055d50295cb16 <unavailable> + 6934

    5    libc.so.6                          0x00002b6ff556b460 __libc_start_main +
    245

    6    tmpadfcyhkp                        0x000055d50295c4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: { $0 < $1 })\n \
    \   return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpquhmchc6.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpquhmchc6.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpquhmchc6.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_9iu9rfc/tmp_9iu9rfc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1456d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1453cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1453cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1453ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9iu9rfc                        0x0000561ddc786934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba1458c0460 __libc_start_main +
    245

    6    tmp_9iu9rfc                        0x0000561ddc786189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.first! + array.last!\n    return sum % 2 ==\
    \ 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0zc7zhf9/tmp0zc7zhf9.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f92a0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f92702561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9f92702286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9f9270213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9f92701bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0zc7zhf9                        0x000056127e700f7b <unavailable> + 8059

    6    tmp0zc7zhf9                        0x000056127e70059d <unavailable> + 5533

    7    libc.so.6                          0x00002b9f92bf7460 __libc_start_main +
    245

    8    tmp0zc7zhf9                        0x000056127e7002a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            array.swapAt(0,\
    \ 1)\n        }\n        return array\n    }\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n     \
    \   array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpquhmchc6.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpquhmchc6.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpquhmchc6.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjd8hvkk4/tmpjd8hvkk4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e7f1b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e7eeaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e7eeae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e7eead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjd8hvkk4                        0x0000556fac07a5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1e7f3a3460 __libc_start_main +
    245

    6    tmpjd8hvkk4                        0x0000556fac079fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.first! + array.last!\n\
    \    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdrpk74yf/tmpdrpk74yf.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002accc9d15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc9a0c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accc9a0c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accc9a0c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accc9a0bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdrpk74yf                        0x0000561745353efd <unavailable> + 7933

    6    tmpdrpk74yf                        0x000056174535350d <unavailable> + 5389

    7    libc.so.6                          0x00002accc9f01460 __libc_start_main +
    245

    8    tmpdrpk74yf                        0x0000561745353219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrt5lkcw/tmptrt5lkcw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eaf20cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eaef03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8eaef03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8eaef027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrt5lkcw                        0x000056320c1bf47d <unavailable> + 5245

    5    libc.so.6                          0x00002b8eaf3f8460 __libc_start_main +
    245

    6    tmptrt5lkcw                        0x000056320c1befc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n      \
    \  return array.sorted(by: >)\n    }\n    return array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n           \
    \ result.sort(by: >)\n        } else {\n            result.sort(by: <)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            return [array[1], array[0]]\n        } else\
    \ {\n            return array\n        }\n    }\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        return array.sorted(by: >)\n    } else\
    \ {\n        return array.sorted(by: <)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1t58kw2z/tmp1t58kw2z.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b478523fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4784f36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4784f36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4784f357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1t58kw2z                        0x0000564ec026fa62 <unavailable> + 6754

    5    libc.so.6                          0x00002b478542b460 __libc_start_main +
    245

    6    tmp1t58kw2z                        0x0000564ec026f179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count > 0 {\n        if\
    \ array[0] + array[array.count - 1] % 2 == 0 {\n            sortedArray.sort(by:\
    \ >)\n        } else {\n            sortedArray.sort(by: <)\n        }\n    }\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphfllcpg_/tmphfllcpg_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d1b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d1880b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45d1880988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45d187f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphfllcpg_                        0x0000557fb073a934 <unavailable> + 6452

    5    libc.so.6                          0x00002b45d1d75460 __libc_start_main +
    245

    6    tmphfllcpg_                        0x0000557fb073a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ array = array\n    let sum = array[0] + array[array.count - 1]\n    if sum %\
    \ 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count > 1 {\n        if\
    \ (array[0] + array[array.count - 1]) % 2 == 0 {\n            sortedArray.sort(by:\
    \ >)\n        } else {\n            sortedArray.sort(by: <)\n        }\n    }\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_9iu9rfc/tmp_9iu9rfc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1456d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1453cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1453cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1453ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9iu9rfc                        0x0000561ddc786934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba1458c0460 __libc_start_main +
    245

    6    tmp_9iu9rfc                        0x0000561ddc786189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjh5mospf/tmpjh5mospf.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebc412fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebc3e26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebc3e26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebc3e257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh5mospf                        0x000055f2192a8934 <unavailable> + 6452

    5    libc.so.6                          0x00002aebc431b460 __libc_start_main +
    245

    6    tmpjh5mospf                        0x000055f2192a8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        let sum\
    \ = result[0] + result[result.count - 1]\n        if sum % 2 == 0 {\n        \
    \    result.sort(by: >)\n        } else {\n            result.sort(by: <)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n          \
    \  let temp = array[0]\n            array[0] = array[1]\n            array[1]\
    \ = temp\n        }\n        return array\n    }\n    let first = array[0]\n \
    \   let last = array[array.count - 1]\n    if (first + last) % 2 == 0 {\n    \
    \    array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphwkwqkbe/tmphwkwqkbe.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acee1084c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acee0d7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acee0d7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acee0d7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwkwqkbe                        0x000055d54a969ac2 <unavailable> + 6850

    5    libc.so.6                          0x00002acee1270460 __libc_start_main +
    245

    6    tmphwkwqkbe                        0x000055d54a9691d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n           \
    \ result.sort(by: >)\n        } else {\n            result.sort(by: <)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var array\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        array.sort(by:\
    \ >)\n    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpxxm064a6/tmpxxm064a6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24ed7fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24ed4f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24ed4f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24ed4f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxm064a6                        0x00005564d62b2934 <unavailable> + 6452

    5    libc.so.6                          0x00002b24ed9e7460 __libc_start_main +
    245

    6    tmpxxm064a6                        0x00005564d62b2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if array[i] % 2 == 1 && array[j] % 2 == 0 {\n\
    \            array.swapAt(i, j)\n            i += 1\n            j -= 1\n    \
    \    } else if array[i] % 2 == 0 {\n            i += 1\n        } else if array[j]\
    \ % 2 == 1 {\n            j -= 1\n        } else {\n            i += 1\n     \
    \       j -= 1\n        }\n    }\n    if array.count % 2 == 1 {\n        array[i...].sort()\n\
    \    } else {\n        array[i...].sort(by: >)\n    }\n    return array\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0109a8lr/tmp0109a8lr.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58eacfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58ea9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58ea9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58ea9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0109a8lr                        0x0000557bcc3abad6 <unavailable> + 6870

    5    libc.so.6                          0x00002b58eaee8460 __libc_start_main +
    245

    6    tmp0109a8lr                        0x0000557bcc3ab4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.first! + array.last!\n    return sum % 2 ==\
    \ 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0zc7zhf9/tmp0zc7zhf9.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f92a0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f92702561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9f92702286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9f9270213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9f92701bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0zc7zhf9                        0x000056127e700f7b <unavailable> + 8059

    6    tmp0zc7zhf9                        0x000056127e70059d <unavailable> + 5533

    7    libc.so.6                          0x00002b9f92bf7460 __libc_start_main +
    245

    8    tmp0zc7zhf9                        0x000056127e7002a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.first! + array.last!\n\
    \    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdrpk74yf/tmpdrpk74yf.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002accc9d15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc9a0c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accc9a0c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accc9a0c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accc9a0bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdrpk74yf                        0x0000561745353efd <unavailable> + 7933

    6    tmpdrpk74yf                        0x000056174535350d <unavailable> + 5389

    7    libc.so.6                          0x00002accc9f01460 __libc_start_main +
    245

    8    tmpdrpk74yf                        0x0000561745353219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        var left\
    \ = 0\n        var right = array.count - 1\n        let sum = array[left] + array[right]\n\
    \        if sum % 2 == 0 {\n            while left < right {\n               \
    \ result.swapAt(left, right)\n                left += 1\n                right\
    \ -= 1\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp59j9u988/tmp59j9u988.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a93a2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a93726b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a93726988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a937257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59j9u988                        0x0000559d7fe6d7c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b8a93c1b460 __libc_start_main +
    245

    6    tmp59j9u988                        0x0000559d7fe6d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n           \
    \ result.sort(by: >)\n        } else {\n            result.sort(by: <)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    if array.first! + array.last! % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1pck4juy/tmp1pck4juy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88d7b96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88d788db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88d788d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88d788c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1pck4juy                        0x00005594389aba14 <unavailable> + 6676

    5    libc.so.6                          0x00002b88d7d82460 __libc_start_main +
    245

    6    tmp1pck4juy                        0x00005594389ab269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjd8hvkk4/tmpjd8hvkk4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e7f1b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e7eeaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e7eeae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e7eead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjd8hvkk4                        0x0000556fac07a5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1e7f3a3460 __libc_start_main +
    245

    6    tmpjd8hvkk4                        0x0000556fac079fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        return array.sorted(by: >)\n    } else\
    \ {\n        return array.sorted(by: <)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by: sum\
    \ % 2 == 0 ? > : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp3x5168l_.swift:21:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmp3x5168l_.swift:21:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmp3x5168l_.swift:20:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n            array.sort(by: >)\n      \
    \  } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count < 2 {\n        return\
    \ result\n    }\n    if array[0] + array[array.count - 1] % 2 == 0 {\n       \
    \ result.sort(by: >)\n    } else {\n        result.sort(by: <)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphh3x02qd/tmphh3x02qd.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b815b63cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b815b333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b815b333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b815b3327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh3x02qd                        0x00005652ef987934 <unavailable> + 6452

    5    libc.so.6                          0x00002b815b828460 __libc_start_main +
    245

    6    tmphh3x02qd                        0x00005652ef987189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n      \
    \  return array.sorted(by: >)\n    }\n    return array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ result = array\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n    \
    \    result.sort(by: >)\n    } else {\n        result.sort(by: <)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_9iu9rfc/tmp_9iu9rfc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1456d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1453cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1453cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1453ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9iu9rfc                        0x0000561ddc786934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba1458c0460 __libc_start_main +
    245

    6    tmp_9iu9rfc                        0x0000561ddc786189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n      \
    \  return array.sorted(by: >)\n    }\n    return array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    return sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    let isOdd = sum % 2 == 1\n    if isOdd {\n        result.sort(by:\
    \ <)\n    } else {\n        result.sort(by: >)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sortedArray = array.sorted()\n    return sum\
    \ % 2 == 0 ? sortedArray.reversed() : sortedArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n      \
    \  return array.sorted(by: >)\n    }\n    return array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        let first\
    \ = array.removeFirst()\n        let last = array.removeLast()\n        if (first\
    \ + last) % 2 == 0 {\n            array.sort(by: >)\n        } else {\n      \
    \      array.sort(by: <)\n        }\n        array.insert(first, at: 0)\n    \
    \    array.append(last)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpk4etpy1y/tmpk4etpy1y.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04497dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04494d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04494d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04494d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4etpy1y                        0x0000557008e9b946 <unavailable> + 6470

    5    libc.so.6                          0x00002b04499c7460 __libc_start_main +
    245

    6    tmpk4etpy1y                        0x0000557008e9b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n        return\
    \ array.sorted(by: >)\n    } else {\n        return array.sorted()\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        let first\
    \ = array.removeFirst()\n        let last = array.removeLast()\n        if (first\
    \ + last) % 2 == 0 {\n            array.sort(by: >)\n        } else {\n      \
    \      array.sort(by: <)\n        }\n        array.insert(first, at: 0)\n    \
    \    array.append(last)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpk4etpy1y/tmpk4etpy1y.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04497dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04494d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04494d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04494d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4etpy1y                        0x0000557008e9b946 <unavailable> + 6470

    5    libc.so.6                          0x00002b04499c7460 __libc_start_main +
    245

    6    tmpk4etpy1y                        0x0000557008e9b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        let sum = first + last\n\
    \        if sum % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_9iu9rfc/tmp_9iu9rfc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1456d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1453cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1453cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1453ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9iu9rfc                        0x0000561ddc786934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba1458c0460 __libc_start_main +
    245

    6    tmp_9iu9rfc                        0x0000561ddc786189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count < 2 {\n        return\
    \ result\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n     \
    \   result.sort(by: >)\n    } else {\n        result.sort(by: <)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    var array = array\n    let sum = array[0]\
    \ + array[array.count - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n\
    \    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpquhmchc6.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpquhmchc6.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpquhmchc6.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpquhmchc6.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpquhmchc6.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpquhmchc6.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.first! + array.last!\n\
    \    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdrpk74yf/tmpdrpk74yf.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002accc9d15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc9a0c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accc9a0c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accc9a0c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accc9a0bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdrpk74yf                        0x0000561745353efd <unavailable> + 7933

    6    tmpdrpk74yf                        0x000056174535350d <unavailable> + 5389

    7    libc.so.6                          0x00002accc9f01460 __libc_start_main +
    245

    8    tmpdrpk74yf                        0x0000561745353219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjd8hvkk4/tmpjd8hvkk4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e7f1b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e7eeaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e7eeae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e7eead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjd8hvkk4                        0x0000556fac07a5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1e7f3a3460 __libc_start_main +
    245

    6    tmpjd8hvkk4                        0x0000556fac079fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sortedArray = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5zi4zqte.swift:19:55: error: unary operator cannot be separated\
    \ from its operand\n    let sortedArray = array.sorted(by: sum % 2 == 0 ? > :\
    \ <)\n                                                      ^~\n             \
    \                                          \n/tmp/tmp5zi4zqte.swift:19:57: error:\
    \ expected expression after '?' in ternary expression\n    let sortedArray = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n                                                    \
    \    ^\n/tmp/tmp5zi4zqte.swift:18:9: warning: initialization of immutable value\
    \ 'sum' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let sum = array[0] + array[array.count - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptrxnxk6a/tmptrxnxk6a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea6a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea6a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea6a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrxnxk6a                        0x000055865af81934 <unavailable> + 6452

    5    libc.so.6                          0x00002b4ea6f65460 __libc_start_main +
    245

    6    tmptrxnxk6a                        0x000055865af81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count > 1 {\n        let\
    \ sum = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n       \
    \     sortedArray.sort(by: >)\n        } else {\n            sortedArray.sort(by:\
    \ <)\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013905
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaydpee3j/tmpaydpee3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaydpee3j                        0x0000561c9b110934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3de06fb460 __libc_start_main +
    245

    6    tmpaydpee3j                        0x0000561c9b110189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013905
