language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] < arr[i - 1] {\n            result = i - 1\n            break\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpghjismmf/tmpghjismmf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a6874ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a68445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a68445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a684447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghjismmf                        0x0000559fd322c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1a6893a460 __libc_start_main +
    245

    6    tmpghjismmf                        0x0000559fd322c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 0..<arr.count-1 {\n        if arr[i] > arr[i+1]\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3q5mumqi/tmp3q5mumqi.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d85eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d82e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d82e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d82e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3q5mumqi                        0x0000555af6016552 <unavailable> + 5458

    5    libc.so.6                          0x00002b17d87da460 __libc_start_main +
    245

    6    tmp3q5mumqi                        0x0000555af60161a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < max {\n            index = i\n        } else {\n    \
    \        max = arr[i]\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b854bd7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b854ba72561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b854ba72286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b854ba7213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b854ba71bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b854b871e83 <unavailable> + 188035

    6    tmpy3f8wczz                        0x000056369252a932 <unavailable> + 6450

    7    tmpy3f8wczz                        0x000056369252a81c <unavailable> + 6172

    8    libc.so.6                          0x00002b854bf67460 __libc_start_main +
    245

    9    tmpy3f8wczz                        0x000056369252a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < max {\n            return i\n        }\n        if arr[i]\
    \ > max {\n            max = arr[i]\n            maxIndex = i\n        }\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3e2r4qla/tmp3e2r4qla.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e97eccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e97bc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e97bc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e97bc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3e2r4qla                        0x0000561066e327f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b3e980b8460 __libc_start_main +
    245

    6    tmp3e2r4qla                        0x0000561066e321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] > max_value {\n            max_index\
    \ = i\n            max_value = arr[i]\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzi1orimm/tmpzi1orimm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac826c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8268fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8268fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8268fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzi1orimm                        0x000055e20d988552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac826df1460 __libc_start_main +
    245

    6    tmpzi1orimm                        0x000055e20d9881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < arr[i - 1] {\n            index = i\n            break\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnyqg1i4r/tmpnyqg1i4r.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06040cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0603dc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0603dc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0603dc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnyqg1i4r                        0x000055f4e2bc47f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b06042ba460 __libc_start_main +
    245

    6    tmpnyqg1i4r                        0x000055f4e2bc41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for (index,\
    \ value) in arr.enumerated() {\n        if value > max {\n            max = value\n\
    \            maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_53k2_l6/tmp_53k2_l6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad45a4e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad45a1dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad45a1db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad45a1da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_53k2_l6                        0x0000560014add582 <unavailable> + 5506

    5    libc.so.6                          0x00002ad45a6d0460 __libc_start_main +
    245

    6    tmp_53k2_l6                        0x0000560014add1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var maxIndex\
    \ = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n     \
    \       maxIndex = i - 1\n            break\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp46gdzsqc/tmp46gdzsqc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb3524ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb34f41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb34f41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb34f407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp46gdzsqc                        0x000055d8ae842552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb35436460 __libc_start_main +
    245

    6    tmp46gdzsqc                        0x000055d8ae8421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] > arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkum5y97k/tmpkum5y97k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64c9592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64c9289b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64c9289988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64c92887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkum5y97k                        0x0000561bc6e6e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b64c977e460 __libc_start_main +
    245

    6    tmpkum5y97k                        0x0000561bc6e6e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            continue\n        }\n        if i >\
    \ max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvhx1pjpi/tmpvhx1pjpi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3195f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3195bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3195bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3195bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhx1pjpi                        0x000056153ec4c61f <unavailable> + 5663

    5    libc.so.6                          0x00002b31960ef460 __libc_start_main +
    245

    6    tmpvhx1pjpi                        0x000056153ec4c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] < arr[i + 1] {\n            if max < arr[i + 1] {\n\
    \                max = arr[i + 1]\n                maxIndex = i + 1\n        \
    \    }\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpoq80vcyk/tmpoq80vcyk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1606b31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1606828b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1606828988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16068277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoq80vcyk                        0x0000556c1b482552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1606d1d460 __libc_start_main +
    245

    6    tmpoq80vcyk                        0x0000556c1b4821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ maxIndex = 0\n    for i in 1..<arr.count {\n        if arr[i] > arr[maxIndex]\
    \ {\n            maxIndex = i\n        }\n    }\n    if arr[maxIndex] == arr[maxIndex\
    \ - 1] {\n        return -1\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpm0x_zii9/tmpm0x_zii9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20fe727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20fe41eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20fe41e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20fe41d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0x_zii9                        0x0000557c6c95b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b20fe913460 __libc_start_main +
    245

    6    tmpm0x_zii9                        0x0000557c6c95b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    for i in 0..<arr.count - 1 {\n\
    \        if arr[i] >= arr[i + 1] {\n            max_index = i\n        }\n   \
    \ }\n    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzubx9cp9/tmpzubx9cp9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b95c6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b95963b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b95963988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b959627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzubx9cp9                        0x000055b0e9e97552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9b95e58460 __libc_start_main +
    245

    6    tmpzubx9cp9                        0x000055b0e9e971a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] >= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzhaas1pp/tmpzhaas1pp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f46938c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f4662fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f4662f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f4662e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhaas1pp                        0x000055c2ccc04552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6f46b24460 __libc_start_main +
    245

    6    tmpzhaas1pp                        0x000055c2ccc041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] < maxValue {\n            maxIndex = i\n\
    \        } else {\n            maxValue = arr[i]\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b13d725ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13d6f51561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b13d6f51286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b13d6f5113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b13d6f50bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b13d6d50e83 <unavailable> + 188035

    6    tmp5_yoew30                        0x000055cd2e57f93a <unavailable> + 6458

    7    tmp5_yoew30                        0x000055cd2e57f81c <unavailable> + 6172

    8    libc.so.6                          0x00002b13d7446460 __libc_start_main +
    245

    9    tmp5_yoew30                        0x000055cd2e57f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7da5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7d752561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7d752286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7d75213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7d751bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3i_hfykn                        0x0000564da412c9c2 <unavailable> + 6594

    6    tmp3i_hfykn                        0x0000564da412c81c <unavailable> + 6172

    7    libc.so.6                          0x00002abd7dc47460 __libc_start_main +
    245

    8    tmp3i_hfykn                        0x0000564da412c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > max_value {\n            max_value = arr[i]\n\
    \            max_index = i\n        }\n    }\n    return max_index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdsmdejt7/tmpdsmdejt7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04242d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0423fceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0423fce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0423fcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsmdejt7                        0x0000559a4a757552 <unavailable> + 5458

    5    libc.so.6                          0x00002b04244c3460 __libc_start_main +
    245

    6    tmpdsmdejt7                        0x0000559a4a7571a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7da5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7d752561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7d752286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7d75213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7d751bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3i_hfykn                        0x0000564da412c9c2 <unavailable> + 6594

    6    tmp3i_hfykn                        0x0000564da412c81c <unavailable> + 6172

    7    libc.so.6                          0x00002abd7dc47460 __libc_start_main +
    245

    8    tmp3i_hfykn                        0x0000564da412c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] <= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0btx91e0/tmp0btx91e0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83db74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae83d86bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae83d86b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae83d86a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0btx91e0                        0x0000555e572f261f <unavailable> + 5663

    5    libc.so.6                          0x00002ae83dd60460 __libc_start_main +
    245

    6    tmp0btx91e0                        0x0000555e572f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7da5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7d752561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7d752286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7d75213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7d751bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3i_hfykn                        0x0000564da412c9c2 <unavailable> + 6594

    6    tmp3i_hfykn                        0x0000564da412c81c <unavailable> + 6172

    7    libc.so.6                          0x00002abd7dc47460 __libc_start_main +
    245

    8    tmp3i_hfykn                        0x0000564da412c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] < maxValue {\n            maxIndex = i\n\
    \        } else {\n            maxValue = arr[i]\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b13d725ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13d6f51561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b13d6f51286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b13d6f5113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b13d6f50bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b13d6d50e83 <unavailable> + 188035

    6    tmp5_yoew30                        0x000055cd2e57f93a <unavailable> + 6458

    7    tmp5_yoew30                        0x000055cd2e57f81c <unavailable> + 6172

    8    libc.so.6                          0x00002b13d7446460 __libc_start_main +
    245

    9    tmp5_yoew30                        0x000055cd2e57f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count-1 {\n        if\
    \ arr[i] >= arr[i+1] {\n            max = i\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsnhslqrx/tmpsnhslqrx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b187a1eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1879ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1879ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1879ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnhslqrx                        0x000055e3e25e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b187a3d6460 __libc_start_main +
    245

    6    tmpsnhslqrx                        0x000055e3e25e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpy9jiugih/tmpy9jiugih.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae796625c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae79631cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae79631c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae79631b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9jiugih                        0x0000558bcc5de552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae796811460 __libc_start_main +
    245

    6    tmpy9jiugih                        0x0000558bcc5de1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpy9jiugih/tmpy9jiugih.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae796625c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae79631cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae79631c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae79631b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9jiugih                        0x0000558bcc5de552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae796811460 __libc_start_main +
    245

    6    tmpy9jiugih                        0x0000558bcc5de1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > max_value {\n            max_value = arr[i]\n\
    \            max_index = i\n        }\n    }\n    return max_index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdsmdejt7/tmpdsmdejt7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04242d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0423fceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0423fce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0423fcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsmdejt7                        0x0000559a4a757552 <unavailable> + 5458

    5    libc.so.6                          0x00002b04244c3460 __libc_start_main +
    245

    6    tmpdsmdejt7                        0x0000559a4a7571a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] < maxValue {\n            maxIndex = i\n\
    \        } else {\n            maxValue = arr[i]\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b13d725ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13d6f51561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b13d6f51286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b13d6f5113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b13d6f50bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b13d6d50e83 <unavailable> + 188035

    6    tmp5_yoew30                        0x000055cd2e57f93a <unavailable> + 6458

    7    tmp5_yoew30                        0x000055cd2e57f81c <unavailable> + 6172

    8    libc.so.6                          0x00002b13d7446460 __libc_start_main +
    245

    9    tmp5_yoew30                        0x000055cd2e57f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count - 1 {\n       \
    \ if arr[i] < arr[i + 1] {\n            max = i + 1\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmph2eoauky/tmph2eoauky.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b254826cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2547f63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2547f63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2547f627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2eoauky                        0x000055dda5322552 <unavailable> + 5458

    5    libc.so.6                          0x00002b2548458460 __libc_start_main +
    245

    6    tmph2eoauky                        0x000055dda53221a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] < maxValue {\n            maxIndex = i\n\
    \        } else {\n            maxValue = arr[i]\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b13d725ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13d6f51561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b13d6f51286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b13d6f5113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b13d6f50bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b13d6d50e83 <unavailable> + 188035

    6    tmp5_yoew30                        0x000055cd2e57f93a <unavailable> + 6458

    7    tmp5_yoew30                        0x000055cd2e57f81c <unavailable> + 6172

    8    libc.so.6                          0x00002b13d7446460 __libc_start_main +
    245

    9    tmp5_yoew30                        0x000055cd2e57f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8dbn3068/tmp8dbn3068.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca52599c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca52290b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca52290988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca5228f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dbn3068                        0x0000557649cf1552 <unavailable> + 5458

    5    libc.so.6                          0x00002aca52785460 __libc_start_main +
    245

    6    tmp8dbn3068                        0x0000557649cf11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var index =\
    \ arr.count - 2\n    while index >= 0 {\n        if arr[index] <= arr[index +\
    \ 1] {\n            index -= 1\n        } else {\n            return index\n \
    \       }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphcufz2sd/tmphcufz2sd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd0c0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd0904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd0904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd09037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphcufz2sd                        0x00005589b1d6c3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002aadd0df9460 __libc_start_main +
    245

    6    tmphcufz2sd                        0x00005589b1d6c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] < max_value {\n            max_index\
    \ = i\n        } else {\n            max_value = arr[i]\n        }\n    }\n  \
    \  return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c7b9dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c7b6d3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c7b6d3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c7b6d313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c7b6d2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c7b4d2e83 <unavailable> + 188035

    6    tmpvp7v_0lx                        0x00005624d6a2593a <unavailable> + 6458

    7    tmpvp7v_0lx                        0x00005624d6a2581c <unavailable> + 6172

    8    libc.so.6                          0x00002b6c7bbc8460 __libc_start_main +
    245

    9    tmpvp7v_0lx                        0x00005624d6a251a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] < arr[i - 1] {\n            maxIndex = i\n        }\n    }\n   \
    \ return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aff92de2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff92ad9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aff92ad9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aff92ad913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aff92ad8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8xrrcx8y                        0x0000560cc86499c2 <unavailable> + 6594

    6    tmp8xrrcx8y                        0x0000560cc864981c <unavailable> + 6172

    7    libc.so.6                          0x00002aff92fce460 __libc_start_main +
    245

    8    tmp8xrrcx8y                        0x0000560cc86491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n   \
    \     if arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvbgy7251/tmpvbgy7251.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa195d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa192c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa192c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa192c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbgy7251                        0x0000560972d87552 <unavailable> + 5458

    5    libc.so.6                          0x00002afa197be460 __libc_start_main +
    245

    6    tmpvbgy7251                        0x0000560972d871a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = Int.min\n    for\
    \ i in 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue =\
    \ arr[i]\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmhek6bu7/tmpmhek6bu7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b37b59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b37850b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b37850988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b3784f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhek6bu7                        0x000056365183e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0b37d45460 __libc_start_main +
    245

    6    tmpmhek6bu7                        0x000056365183e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] <= arr[i - 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b232cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b2023561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5b2023286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5b202313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5b2022bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4_pkis4h                        0x0000564f9ad969c2 <unavailable> + 6594

    6    tmp4_pkis4h                        0x0000564f9ad9681c <unavailable> + 6172

    7    libc.so.6                          0x00002ae5b2518460 __libc_start_main +
    245

    8    tmp4_pkis4h                        0x0000564f9ad961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdit4fta4/tmpdit4fta4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74efb5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74ef851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74ef851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74ef8507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdit4fta4                        0x000055a915951312 <unavailable> + 4882

    5    libc.so.6                          0x00002b74efd46460 __libc_start_main +
    245

    6    tmpdit4fta4                        0x000055a915950f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for i in 0..<arr.count - 1 {\n  \
    \      if arr[i] <= arr[i + 1] {\n            largest = i\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_boktx5e/tmp_boktx5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac735e64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac735b5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac735b5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac735b5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_boktx5e                        0x0000560b89b2061f <unavailable> + 5663

    5    libc.so.6                          0x00002ac736050460 __libc_start_main +
    245

    6    tmp_boktx5e                        0x0000560b89b201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < arr[i - 1] {\n            index = i\n            break\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnyqg1i4r/tmpnyqg1i4r.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06040cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0603dc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0603dc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0603dc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnyqg1i4r                        0x000055f4e2bc47f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b06042ba460 __libc_start_main +
    245

    6    tmpnyqg1i4r                        0x000055f4e2bc41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] <= arr[i - 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b232cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b2023561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5b2023286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5b202313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5b2022bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4_pkis4h                        0x0000564f9ad969c2 <unavailable> + 6594

    6    tmp4_pkis4h                        0x0000564f9ad9681c <unavailable> + 6172

    7    libc.so.6                          0x00002ae5b2518460 __libc_start_main +
    245

    8    tmp4_pkis4h                        0x0000564f9ad961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var max_index = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            max_index\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            if i == 0 {\n                return -1\n            }\n     \
    \       if arr[i-1] < max {\n                return max_index\n            }\n\
    \        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqi5sbt4q/tmpqi5sbt4q.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2309823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b230951ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b230951a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23095197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi5sbt4q                        0x00005638ebcba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b2309a0f460 __libc_start_main +
    245

    6    tmpqi5sbt4q                        0x00005638ebcba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] <= arr[i - 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b232cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b2023561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5b2023286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5b202313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5b2022bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4_pkis4h                        0x0000564f9ad969c2 <unavailable> + 6594

    6    tmp4_pkis4h                        0x0000564f9ad9681c <unavailable> + 6172

    7    libc.so.6                          0x00002ae5b2518460 __libc_start_main +
    245

    8    tmp4_pkis4h                        0x0000564f9ad961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] <= arr[i - 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b232cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b2023561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5b2023286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5b202313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5b2022bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4_pkis4h                        0x0000564f9ad969c2 <unavailable> + 6594

    6    tmp4_pkis4h                        0x0000564f9ad9681c <unavailable> + 6172

    7    libc.so.6                          0x00002ae5b2518460 __libc_start_main +
    245

    8    tmp4_pkis4h                        0x0000564f9ad961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var index =\
    \ arr.count - 2\n    while index >= 0 {\n        if arr[index] <= arr[index +\
    \ 1] {\n            index -= 1\n        } else {\n            return index\n \
    \       }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphcufz2sd/tmphcufz2sd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd0c0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd0904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd0904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd09037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphcufz2sd                        0x00005589b1d6c3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002aadd0df9460 __libc_start_main +
    245

    6    tmphcufz2sd                        0x00005589b1d6c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    for i in 1..<arr.count {\n    \
    \    if arr[i] <= arr[i - 1] {\n            max_index = i\n        }\n    }\n\
    \    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad84a7a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad84a49c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad84a49c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad84a49c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad84a49bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3ntlqlao                        0x000055d9c64689c2 <unavailable> + 6594

    6    tmp3ntlqlao                        0x000055d9c646881c <unavailable> + 6172

    7    libc.so.6                          0x00002ad84a991460 __libc_start_main +
    245

    8    tmp3ntlqlao                        0x000055d9c64681a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] <= maxValue {\n            maxIndex =\
    \ i\n            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqm071b1f/tmpqm071b1f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2899c47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b289993eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b289993e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b289993d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqm071b1f                        0x0000564833026552 <unavailable> + 5458

    5    libc.so.6                          0x00002b2899e33460 __libc_start_main +
    245

    6    tmpqm071b1f                        0x00005648330261a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var maxIndex\
    \ = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n     \
    \       maxIndex = i - 1\n            break\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp46gdzsqc/tmp46gdzsqc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb3524ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb34f41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb34f41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb34f407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp46gdzsqc                        0x000055d8ae842552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb35436460 __libc_start_main +
    245

    6    tmp46gdzsqc                        0x000055d8ae8421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            if i == arr.count - 1 {\n                return -1\n        \
    \    }\n            if arr[i + 1] < max {\n                return i\n        \
    \    }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpubjmzcdr/tmpubjmzcdr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf078e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf075d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf075d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf075d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubjmzcdr                        0x0000560dc9bbf552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf07acc460 __libc_start_main +
    245

    6    tmpubjmzcdr                        0x0000560dc9bbf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < max {\n            index = i\n        } else {\n    \
    \        max = arr[i]\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b854bd7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b854ba72561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b854ba72286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b854ba7213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b854ba71bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b854b871e83 <unavailable> + 188035

    6    tmpy3f8wczz                        0x000056369252a932 <unavailable> + 6450

    7    tmpy3f8wczz                        0x000056369252a81c <unavailable> + 6172

    8    libc.so.6                          0x00002b854bf67460 __libc_start_main +
    245

    9    tmpy3f8wczz                        0x000056369252a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n    \
    \    if arr[i] >= arr[i + 1] {\n            index = i\n        }\n    }\n    return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps0cxtrj2/tmps0cxtrj2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf7946ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf79165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf79165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf791647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0cxtrj2                        0x000055844c69c552 <unavailable> + 5458

    5    libc.so.6                          0x00002adf7965a460 __libc_start_main +
    245

    6    tmps0cxtrj2                        0x000055844c69c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7da5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7d752561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7d752286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7d75213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7d751bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3i_hfykn                        0x0000564da412c9c2 <unavailable> + 6594

    6    tmp3i_hfykn                        0x0000564da412c81c <unavailable> + 6172

    7    libc.so.6                          0x00002abd7dc47460 __libc_start_main +
    245

    8    tmp3i_hfykn                        0x0000564da412c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = Int.min\n    for\
    \ i in 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue =\
    \ arr[i]\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmhek6bu7/tmpmhek6bu7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b37b59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b37850b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b37850988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b3784f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhek6bu7                        0x000056365183e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0b37d45460 __libc_start_main +
    245

    6    tmpmhek6bu7                        0x000056365183e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            if i == 0 {\n                return -1\n            }\n     \
    \       if arr[i-1] < max {\n                return maxIndex\n            }\n\
    \        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsqaqrwlg/tmpsqaqrwlg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac81b3e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac81b0dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac81b0db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac81b0da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsqaqrwlg                        0x000056165cd86552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac81b5d0460 __libc_start_main +
    245

    6    tmpsqaqrwlg                        0x000056165cd861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpy9jiugih/tmpy9jiugih.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae796625c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae79631cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae79631c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae79631b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9jiugih                        0x0000558bcc5de552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae796811460 __libc_start_main +
    245

    6    tmpy9jiugih                        0x0000558bcc5de1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            if i == 0 {\n                return -1\n            }\n     \
    \       if arr[i - 1] == max {\n                return -1\n            }\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6ff6ao0e/tmp6ff6ao0e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6580dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae657dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae657dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae657dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ff6ao0e                        0x0000556dc9c62552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae6582ca460 __libc_start_main +
    245

    6    tmp6ff6ao0e                        0x0000556dc9c621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count - 1 {\n        if arr[i] > maxValue && arr[i] < arr[i + 1] {\n\
    \            maxIndex = i\n            maxValue = arr[i]\n        }\n    }\n \
    \   return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5v6jta6u/tmp5v6jta6u.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38771bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3876eb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3876eb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3876eb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5v6jta6u                        0x000055d8fad1561f <unavailable> + 5663

    5    libc.so.6                          0x00002b38773aa460 __libc_start_main +
    245

    6    tmp5v6jta6u                        0x000055d8fad151a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n     \
    \   if arr[i] <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n  \
    \  return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7da5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7d752561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7d752286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7d75213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7d751bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3i_hfykn                        0x0000564da412c9c2 <unavailable> + 6594

    6    tmp3i_hfykn                        0x0000564da412c81c <unavailable> + 6172

    7    libc.so.6                          0x00002abd7dc47460 __libc_start_main +
    245

    8    tmp3i_hfykn                        0x0000564da412c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count-1 {\n        if\
    \ arr[i] >= arr[i+1] {\n            max = i\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsnhslqrx/tmpsnhslqrx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b187a1eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1879ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1879ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1879ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnhslqrx                        0x000055e3e25e4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b187a3d6460 __libc_start_main +
    245

    6    tmpsnhslqrx                        0x000055e3e25e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    for i in 0..<arr.count - 1 {\n\
    \        if arr[i] <= arr[i + 1] {\n            max_index = i + 1\n        }\n\
    \    }\n    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpl9cw6vl4/tmpl9cw6vl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b51580c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b51277b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b51277988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b512767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl9cw6vl4                        0x000056525d109552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8b5176c460 __libc_start_main +
    245

    6    tmpl9cw6vl4                        0x000056525d1091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] >= arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpif_64jmd/tmpif_64jmd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e91c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9195db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9195d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9195c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpif_64jmd                        0x000055ae68b46552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5e91e52460 __libc_start_main +
    245

    6    tmpif_64jmd                        0x000055ae68b461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for (index,\
    \ value) in arr.enumerated() {\n        if value > max {\n            max = value\n\
    \            maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_53k2_l6/tmp_53k2_l6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad45a4e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad45a1dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad45a1db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad45a1da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_53k2_l6                        0x0000560014add582 <unavailable> + 5506

    5    libc.so.6                          0x00002ad45a6d0460 __libc_start_main +
    245

    6    tmp_53k2_l6                        0x0000560014add1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = Int.min\n    for\
    \ i in 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue =\
    \ arr[i]\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmhek6bu7/tmpmhek6bu7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b37b59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b37850b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b37850988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b3784f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhek6bu7                        0x000056365183e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0b37d45460 __libc_start_main +
    245

    6    tmpmhek6bu7                        0x000056365183e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] < maxValue {\n            maxIndex = i\n\
    \        } else {\n            maxValue = arr[i]\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b13d725ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13d6f51561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b13d6f51286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b13d6f5113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b13d6f50bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b13d6d50e83 <unavailable> + 188035

    6    tmp5_yoew30                        0x000055cd2e57f93a <unavailable> + 6458

    7    tmp5_yoew30                        0x000055cd2e57f81c <unavailable> + 6172

    8    libc.so.6                          0x00002b13d7446460 __libc_start_main +
    245

    9    tmp5_yoew30                        0x000055cd2e57f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] > max_value {\n            max_index\
    \ = i\n            max_value = arr[i]\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzi1orimm/tmpzi1orimm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac826c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8268fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8268fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8268fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzi1orimm                        0x000055e20d988552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac826df1460 __libc_start_main +
    245

    6    tmpzi1orimm                        0x000055e20d9881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxIndex = i\n\
    \            maxValue = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi74aanc2/tmpi74aanc2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9584cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi74aanc2                        0x000055e3d1ca7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95851a7460 __libc_start_main +
    245

    6    tmpi74aanc2                        0x000055e3d1ca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprej94dad/tmprej94dad.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf32c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprej94dad                        0x0000556fa741f552 <unavailable> + 5458

    5    libc.so.6                          0x00002abf32e03460 __libc_start_main +
    245

    6    tmprej94dad                        0x0000556fa741f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = Int.min\n    for\
    \ i in 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue =\
    \ arr[i]\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmhek6bu7/tmpmhek6bu7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b37b59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b37850b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b37850988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b3784f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhek6bu7                        0x000056365183e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0b37d45460 __libc_start_main +
    245

    6    tmpmhek6bu7                        0x000056365183e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = -1\n    for (index,\
    \ value) in arr.enumerated() {\n        if value > max_value {\n            max_value\
    \ = value\n            max_index = index\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6v86or2g/tmp6v86or2g.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56eec70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56ee967b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56ee967988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56ee9667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6v86or2g                        0x000055fd4b3cc532 <unavailable> + 5426

    5    libc.so.6                          0x00002b56eee5c460 __libc_start_main +
    245

    6    tmp6v86or2g                        0x000055fd4b3cc189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpk833zjm0/tmpk833zjm0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcf2117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcf1e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcf1e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcf1e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk833zjm0                        0x000055b5a6836552 <unavailable> + 5458

    5    libc.so.6                          0x00002afcf2303460 __libc_start_main +
    245

    6    tmpk833zjm0                        0x000055b5a68361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var max_index = -1\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] < arr[i + 1] {\n            if max_index == -1 || arr[i\
    \ + 1] < arr[max_index] {\n                max = i + 1\n                max_index\
    \ = i + 1\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_xprxfs1/tmp_xprxfs1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569e420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569e117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569e117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569e1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xprxfs1                        0x000055ae97b7b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b569e60c460 __libc_start_main +
    245

    6    tmp_xprxfs1                        0x000055ae97b7b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwe8ffplp/tmpwe8ffplp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8215ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82158997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe8ffplp                        0x00005559c3075552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8215d8f460 __libc_start_main +
    245

    6    tmpwe8ffplp                        0x00005559c30751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n      \
    \  if arr[i] > arr[i + 1] {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk3xrq5op/tmpk3xrq5op.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3xrq5op                        0x000055b6a81ad552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8294179460 __libc_start_main +
    245

    6    tmpk3xrq5op                        0x000055b6a81ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count-1 {\n   \
    \     if arr[i] <= arr[i+1] {\n            maxIndex = i+1\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphc9k4t97/tmphc9k4t97.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a3cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a3c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a3c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a3c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc9k4t97                        0x0000563e05024552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0a3cdde460 __libc_start_main +
    245

    6    tmphc9k4t97                        0x0000563e050241a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8dbn3068/tmp8dbn3068.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca52599c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca52290b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca52290988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca5228f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dbn3068                        0x0000557649cf1552 <unavailable> + 5458

    5    libc.so.6                          0x00002aca52785460 __libc_start_main +
    245

    6    tmp8dbn3068                        0x0000557649cf11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // TODO: Write some code to solve this coding challenge\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptgecs5im/tmptgecs5im.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b232fc63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b232f95ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b232f95a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b232f9597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptgecs5im                        0x000055dbe1c38312 <unavailable> + 4882

    5    libc.so.6                          0x00002b232fe4f460 __libc_start_main +
    245

    6    tmptgecs5im                        0x000055dbe1c37f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp12hpug9a/tmp12hpug9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd64b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd648007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12hpug9a                        0x000055f52efe2552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd64cf6460 __libc_start_main +
    245

    6    tmp12hpug9a                        0x000055f52efe21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n \
    \       if arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2b9_bhgs/tmp2b9_bhgs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca4384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca407bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca407b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca407a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b9_bhgs                        0x000056412df75552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ca4570460 __libc_start_main +
    245

    6    tmp2b9_bhgs                        0x000056412df751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdu_kc3z5/tmpdu_kc3z5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a35b12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a35809b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a35809988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a358087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdu_kc3z5                        0x000055ff29872552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8a35cfe460 __libc_start_main +
    245

    6    tmpdu_kc3z5                        0x000055ff298721a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpnibd_dfd/tmpnibd_dfd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb4ee62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb4eb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb4eb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4eb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnibd_dfd                        0x000055674e4c4552 <unavailable> + 5458

    5    libc.so.6                          0x00002afb4f04e460 __libc_start_main +
    245

    6    tmpnibd_dfd                        0x000055674e4c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < arr[i - 1] {\n            index = i\n            break\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpnyqg1i4r/tmpnyqg1i4r.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06040cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0603dc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0603dc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0603dc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnyqg1i4r                        0x000055f4e2bc47f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b06042ba460 __libc_start_main +
    245

    6    tmpnyqg1i4r                        0x000055f4e2bc41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == max\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1trp5io_/tmp1trp5io_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b9303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b8ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b8ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b8ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1trp5io_                        0x0000561fe0fad552 <unavailable> + 5458

    5    libc.so.6                          0x00002af1b94ef460 __libc_start_main +
    245

    6    tmp1trp5io_                        0x0000561fe0fad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largestIndex = -1\n    for i in 0..<arr.count - 1 {\n\
    \        if arr[i] >= arr[i + 1] {\n            largestIndex = i\n        }\n\
    \    }\n    return largestIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpaf8x3328/tmpaf8x3328.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b001463dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0014334b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0014334988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00143337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaf8x3328                        0x00005628f65aa552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0014829460 __libc_start_main +
    245

    6    tmpaf8x3328                        0x00005628f65aa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < max {\n            return i - 1\n        }\n        if\
    \ arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n       \
    \ }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4lpgnq5r/tmp4lpgnq5r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1917681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1917378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1917378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19173777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lpgnq5r                        0x0000558f45d14552 <unavailable> + 5458

    5    libc.so.6                          0x00002b191786d460 __libc_start_main +
    245

    6    tmp4lpgnq5r                        0x0000558f45d141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_value = -1\n    for i in\
    \ 0..<arr.count {\n        if arr[i] > max_value {\n            max_value = arr[i]\n\
    \            max_index = i\n        }\n    }\n    return max_index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdsmdejt7/tmpdsmdejt7.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04242d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0423fceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0423fce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0423fcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsmdejt7                        0x0000559a4a757552 <unavailable> + 5458

    5    libc.so.6                          0x00002b04244c3460 __libc_start_main +
    245

    6    tmpdsmdejt7                        0x0000559a4a7571a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824339
