name: HumanEval_34_unique
language: swift
prompt: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3, 5,\
  \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\
  \ == [0, 2, 3, 5, 9, 123])"
completions: ['    return Array(Set(l)).sorted()', "    var result = [Int]()\n   \
    \ for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var set = Set<Int>()\n  \
    \  for e in l {\n        set.insert(e)\n    }\n    return Array(set).sorted()",
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", "    var result = [Int]()\n    for i in l\
    \ {\n        if !result.contains(i) {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()", "    var r = [Int]()\n    for i in l {\n\
    \        if !r.contains(i) {\n            r.append(i)\n        }\n    }\n    return\
    \ r.sorted()", '    return Array(Set(l)).sorted()', "    var result = [Int]()\n\
    \    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var\
    \ seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", "    var\
    \ result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result.sorted()", '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", "    var result = [Int]()\n    for i in l\
    \ {\n        if !result.contains(i) {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()", "    var result = [Int]()\n    for i in l\
    \ {\n        if !result.contains(i) {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()", "    var result = [Int]()\n    for i in l\
    \ {\n        if !result.contains(i) {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()", "    var seen: [Int: Bool] = [:]\n    var\
    \ result: [Int] = []\n    for i in l {\n        if seen[i] == nil {\n        \
    \    seen[i] = true\n            result.append(i)\n        }\n    }\n    return\
    \ result.sorted()", "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }", '    return Array(Set(l)).sorted()', '    return Array(Set(l))', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var result\
    \ = [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var s = Set<Int>()\n\
    \    for i in l {\n        s.insert(i)\n    }\n    return Array(s).sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var\
    \ u = [Int]()\n    for x in l {\n        if !u.contains(x) {\n            u.append(x)\n\
    \        }\n    }\n    return u.sorted()", "    var s = Set<Int>()\n    for i\
    \ in l {\n        s.insert(i)\n    }\n    return Array(s).sorted()", "    var\
    \ result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result.sorted()", "   \
    \ var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n    return\
    \ Array(s).sorted()", '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n       \
    \ if !result.contains(i) {\n            result.append(i)\n        }\n    }\n \
    \   return result.sorted()", '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var result\
    \ = [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", "    var result = [Int]()\n    for item in\
    \ l {\n        if !result.contains(item) {\n            result.append(item)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n       \
    \ if !result.contains(i) {\n            result.append(i)\n        }\n    }\n \
    \   return result.sorted()", '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var unique\
    \ = [Int]()\n    for i in l {\n        if !unique.contains(i) {\n            unique.append(i)\n\
    \        }\n    }\n    return unique.sorted()", "    var seen: [Int: Bool] = [:]\n\
    \    return l.filter { seen.updateValue(true, forKey: $0) == nil }", '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var result\
    \ = [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", "    var uniqueList = [Int]()\n    for item\
    \ in l {\n        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", "    var s = Set<Int>()\n    for i in l {\n\
    \        s.insert(i)\n    }\n    return Array(s).sorted()", '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var set = Set<Int>()\n\
    \    l.forEach { set.insert($0) }\n    return set.sorted()", "    var result =\
    \ [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var list = l\n    list.sort()\n\
    \    var result: [Int] = []\n    var previous = -1\n    for item in list {\n \
    \       if item != previous {\n            result.append(item)\n        }\n  \
    \      previous = item\n    }\n    return result", "    var seen = Set<Int>()\n\
    \    return l.filter {\n        if seen.contains($0) {\n            return false\n\
    \        } else {\n            seen.insert($0)\n            return true\n    \
    \    }\n    }", "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }", "    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var\
    \ res = [Int]()\n    for i in l {\n        if !res.contains(i) {\n           \
    \ res.append(i)\n        }\n    }\n    return res.sorted()", '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n       \
    \ if !result.contains(i) {\n            result.append(i)\n        }\n    }\n \
    \   return result.sorted()", "    var result = [Int]()\n    for i in l {\n   \
    \     if !result.contains(i) {\n            result.append(i)\n        }\n    }\n\
    \    return result.sorted()", "    var set = Set<Int>()\n    var result = [Int]()\n\
    \    for i in l {\n        if !set.contains(i) {\n            set.insert(i)\n\
    \            result.append(i)\n        }\n    }\n    return result", '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var result\
    \ = [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var set = Set<Int>()\n  \
    \  for i in l {\n        set.insert(i)\n    }\n    return Array(set).sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var\
    \ result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result.sorted()", '    return
    Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n       \
    \ if !result.contains(i) {\n            result.append(i)\n        }\n    }\n \
    \   return result.sorted()", '    return Array(Set(l)).sorted()', "    var result\
    \ = [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', "    var unique = [Int]()\n    for i in l {\n\
    \        if !unique.contains(i) {\n            unique.append(i)\n        }\n \
    \   }\n    return unique.sorted()", "    var result = [Int]()\n    for item in\
    \ l {\n        if !result.contains(item) {\n            result.append(item)\n\
    \        }\n    }\n    return result.sorted()", "    var uniqueList = [Int]()\n\
    \    for item in l {\n        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", "    var set = Set<Int>()\n\
    \    for i in l {\n        set.insert(i)\n    }\n    return Array(set).sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var\
    \ result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result.sorted()", "   \
    \ var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()", '    return
    Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n       \
    \ if !result.contains(i) {\n            result.append(i)\n        }\n    }\n \
    \   return result.sorted()", '    return Array(Set(l)).sorted()', "    var result\
    \ = [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var seen = Set<Int>()\n \
    \   return l.filter { seen.insert($0).inserted }", "    var result = [Int]()\n\
    \    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var list = l\n    list.sort()\n\
    \    var last: Int?\n    var i = 0\n    while i < list.count {\n        if list[i]\
    \ == last {\n            list.removeAtIndex(i)\n        } else {\n           \
    \ last = list[i]\n            i += 1\n        }\n    }\n    return list", "  \
    \  var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', "    var s = Set<Int>()\n    for i in l {\n\
    \        s.insert(i)\n    }\n    return Array(s).sorted()", '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var\
    \ seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var seen =\
    \ Set<Int>()\n    return l.filter { seen.insert($0).inserted }", "    var result\
    \ = [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var unique = [Int]()\n  \
    \  for item in l {\n        if !unique.contains(item) {\n            unique.append(item)\n\
    \        }\n    }\n    return unique.sorted()", "    var seen = Set<Int>()\n \
    \   var result = [Int]()\n    for i in l {\n        if !seen.contains(i) {\n \
    \           seen.insert(i)\n            result.append(i)\n        }\n    }\n \
    \   return result", "    var u = [Int]()\n    for e in l {\n        if !u.contains(e)\
    \ {\n            u.append(e)\n        }\n    }\n    return u.sorted()", '    return
    Array(Set(l)).sorted()', "    var uniqueList = [Int]()\n    for item in l {\n\
    \        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", '    return Array(Set(l)).sorted()',
  "    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey:\
    \ $0) == nil }", "    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', "    var uniqueList = [Int]()\n    for item\
    \ in l {\n        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", "    var result = [Int]()\n\
    \    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n       \
    \ if !result.contains(i) {\n            result.append(i)\n        }\n    }\n \
    \   return result.sorted()", '    return Array(Set(l)).sorted()', "    var result\
    \ = [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var s = Set<Int>()\n    for\
    \ i in l {\n        s.insert(i)\n    }\n    return Array(s).sorted()", "    var\
    \ result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result.sorted()", "   \
    \ var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()']
stop_tokens:
- "\n}"
