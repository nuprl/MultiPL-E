name: HumanEval_34_unique
language: swift
prompt: "\n/// Return sorted unique elements in a list\n/// >>> unique(l: [5, 3, 5,\
  \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\
  \ == [0, 2, 3, 5, 9, 123])"
completions: ['    return Array(Set(l)).sorted()', "    var result = [Int]()\n   \
    \ for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var set = Set<Int>()\n  \
    \  for e in l {\n        set.insert(e)\n    }\n    return Array(set).sorted()",
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", "    var result = [Int]()\n    for i in l\
    \ {\n        if !result.contains(i) {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()", "    var r = [Int]()\n    for i in l {\n\
    \        if !r.contains(i) {\n            r.append(i)\n        }\n    }\n    return\
    \ r.sorted()", '    return Array(Set(l)).sorted()', "    var result = [Int]()\n\
    \    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var\
    \ seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", "    var\
    \ result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result.sorted()", '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()',
  '    return Array(Set(l)).sorted()']
stop_tokens:
- "\n}"
