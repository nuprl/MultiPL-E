name: HumanEval_27_flip_case
language: swift
prompt: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
  \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
  \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
completions: ["    var flipped = \"\"\n    for char in string {\n        if char.isUppercase\
    \ {\n            flipped.append(char.lowercased())\n        } else {\n       \
    \     flipped.append(char.uppercased())\n        }\n    }\n    return flipped",
  '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }',
  '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }',
  '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }',
  '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }',
  "    var flipped = \"\"\n    for char in string {\n        if char.isUppercase {\n\
    \            flipped.append(char.lowercased())\n        } else {\n           \
    \ flipped.append(char.uppercased())\n        }\n    }\n    return flipped", " \
    \   var flipped = \"\"\n    for char in string {\n        if char.isUppercase\
    \ {\n            flipped.append(char.lowercased())\n        } else {\n       \
    \     flipped.append(char.uppercased())\n        }\n    }\n    return flipped",
  "    var flipped = \"\"\n    for char in string {\n        if char.isUppercase {\n\
    \            flipped.append(char.lowercased())\n        } else {\n           \
    \ flipped.append(char.uppercased())\n        }\n    }\n    return flipped", '    return
    string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }', '    return
    string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }', '    return
    string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }', '    return
    string.map { $0.isLowercase ? $0.uppercased() : $0.lowercased() }', "    var result\
    \ = \"\"\n    for char in string {\n        if char.isUppercase {\n          \
    \  result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n\
    \        }\n    }\n    return result", '    return string.map { $0.isUppercase
    ? $0.lowercased() : $0.uppercased() }', '    return string.map { $0.isUppercase
    ? $0.lowercased() : $0.uppercased() }', "    var result = \"\"\n    for char in\
    \ string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result", '    return string.map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() }', "    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string", "    var result = \"\"\n    for char\
    \ in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result", "    return string.map {\n        if $0.isUppercase\
    \ {\n            return $0.lowercased()\n        } else {\n            return\
    \ $0.uppercased()\n        }\n    }"]
stop_tokens:
- "\n}"
