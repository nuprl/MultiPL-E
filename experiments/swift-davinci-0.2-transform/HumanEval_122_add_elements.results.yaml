language: swift
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num < 100\
    \ {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824620
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            result\
    \ += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num < 100\
    \ {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824620
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num < 10\
    \ {\n            sum += num\n        } else if num < 100 {\n            sum +=\
    \ num % 10 + num / 10\n        } else {\n            sum += num % 10 + num / 10\
    \ % 10 + num / 100\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpo0uatnv_/tmpo0uatnv_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ae866bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ae8362b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ae8362988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ae83617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0uatnv_                        0x00005630f6dfd5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6ae8857460 __libc_start_main +
    245

    6    tmpo0uatnv_                        0x00005630f6dfd149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824620
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var i = 0\n    while i < k {\n        if arr[i] < 100 {\n     \
    \       sum += arr[i]\n        }\n        i += 1\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            result\
    \ += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            result\
    \ += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] >= 10 && arr[i] < 100 {\n \
    \           sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmp0pu6l9s_/tmp0pu6l9s_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ac4664c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ac435bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ac435b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ac435a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0pu6l9s_                        0x00005600d811d51b <unavailable> + 5403

    5    libc.so.6                          0x00002b7ac4850460 __libc_start_main +
    245

    6    tmp0pu6l9s_                        0x00005600d811d149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824620
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] > 99 {\n            continue\n\
    \        }\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824620
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824563
