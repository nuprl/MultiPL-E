name: HumanEval_124_valid_date
language: swift
prompt: "\n/// You have to write a function which validates a given date string and\n\
  /// returns True if the date is valid otherwise False.\n/// The date is valid if\
  \ all of the following rules are satisfied:\n/// 1. The date string is not empty.\n\
  /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  /// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date\
  \ should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n\
  /// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date:\
  \ \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n\
  /// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\n\
  assert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\"\
  ) == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date:\
  \ \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\n\
  assert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\"\
  ) == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date:\
  \ \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\n\
  assert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\"\
  ) == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date:\
  \ \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)"
completions: ["    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation: \"GMT+0:00\"\
    )\n    let date = dateFormatter.date(from: date)\n    if date != nil {\n     \
    \   return true\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation:\
    \ \"GMT+0:00\")\n    let date = dateFormatter.date(from: date)\n    if date !=\
    \ nil {\n        return true\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale\
    \ = Locale(identifier: \"en_US_POSIX\")\n    guard let _ = dateFormatter.date(from:\
    \ date) else {\n        return false\n    }\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone\
    \ = TimeZone(abbreviation: \"GMT+0:00\")\n    guard let _ = dateFormatter.date(from:\
    \ date) else {\n        return false\n    }\n    return true", "    let date_regex\
    \ = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\n    let date_test\
    \ = NSPredicate(format: \"SELF MATCHES %@\", date_regex)\n    if date_test.evaluate(with:\
    \ date) {\n        let date_components = date.components(separatedBy: \"-\")\n\
    \        let month = Int(date_components[0])!\n        let day = Int(date_components[1])!\n\
    \        let year = Int(date_components[2])!\n        if month > 12 || month <\
    \ 1 {\n            return false\n        }\n        if month == 2 {\n        \
    \    if day > 29 || day < 1 {\n                return false\n            }\n \
    \       } else if month % 2 == 0 {\n            if day > 30 || day < 1 {\n   \
    \             return false\n            }\n        } else {\n            if day\
    \ > 31 || day < 1 {\n                return false\n            }\n        }\n\
    \        return true\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation:\
    \ \"GMT+0:00\")\n    if let _ = dateFormatter.date(from: date) {\n        return\
    \ true\n    } else {\n        return false\n    }", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier:\
    \ \"en_US_POSIX\")\n    if let _ = dateFormatter.date(from: date) {\n        return\
    \ true\n    }\n    return false", "    let dateFormatter = DateFormatter()\n \
    \   dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation:\
    \ \"GMT+0:00\")\n    let date = dateFormatter.date(from: date)\n    if date !=\
    \ nil {\n        return true\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone\
    \ = TimeZone(abbreviation: \"GMT+0:00\")\n    let date = dateFormatter.date(from:\
    \ date)\n    if date == nil {\n        return false\n    }\n    return true",
  "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    guard let\
    \ _ = dateFormatter.date(from: date) else {\n        return false\n    }\n   \
    \ return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation: \"GMT+0:00\"\
    )\n    if let _ = dateFormatter.date(from: date) {\n        return true\n    }\
    \ else {\n        return false\n    }", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation:\
    \ \"GMT+0:00\")\n    let date = dateFormatter.date(from: date)\n    if date !=\
    \ nil {\n        return true\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale\
    \ = Locale(identifier: \"en_US_POSIX\")\n    guard let _ = dateFormatter.date(from:\
    \ date) else {\n        return false\n    }\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone\
    \ = TimeZone(abbreviation: \"GMT+0:00\")\n    let date = dateFormatter.date(from:\
    \ date)\n    if date != nil {\n        return true\n    }\n    return false",
  "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    guard let\
    \ _ = dateFormatter.date(from: date) else {\n        return false\n    }\n   \
    \ return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation: \"GMT+0:00\"\
    )\n    let date = dateFormatter.date(from: date)\n    if date != nil {\n     \
    \   return true\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation:\
    \ \"GMT+0:00\")\n    let date = dateFormatter.date(from: date)\n    return date\
    \ != nil", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n    if let _ = dateFormatter.date(from: date) {\n        return true\n    }\n\
    \    return false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation: \"GMT+0:00\"\
    )\n    let date = dateFormatter.date(from: date)\n    if date != nil {\n     \
    \   return true\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation:\
    \ \"GMT+0:00\")\n    if let _ = dateFormatter.date(from: date) {\n        return\
    \ true\n    } else {\n        return false\n    }"]
stop_tokens:
- "\n}"
