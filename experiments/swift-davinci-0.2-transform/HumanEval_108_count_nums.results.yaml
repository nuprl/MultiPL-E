language: swift
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        var sum = 0\n        var n = $0\n        while n != 0 {\n       \
    \     sum += abs(n % 10)\n            n /= 10\n        }\n        return sum >\
    \ 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp7wrxd6h4/tmp7wrxd6h4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8649c14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b864990bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b864990b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b864990a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wrxd6h4                        0x000055fef0a32640 <unavailable> + 5696

    5    libc.so.6                          0x00002b8649e00460 __libc_start_main +
    245

    6    tmp7wrxd6h4                        0x000055fef0a32209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.reduce(0) { $0 + abs($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpb7405r0_/tmpb7405r0_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2bcd22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2bca19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2bca19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2bca187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7405r0_                        0x000055a9f21925d0 <unavailable> + 5584

    5    libc.so.6                          0x00002ac2bcf0e460 __libc_start_main +
    245

    6    tmpb7405r0_                        0x000055a9f2192199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        var n = num\n        while\
    \ n != 0 {\n            sum += n % 10\n            n /= 10\n        }\n      \
    \  if sum > 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpt6kc8phz/tmpt6kc8phz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25c4aafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25c47a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25c47a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25c47a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6kc8phz                        0x000055a92959495a <unavailable> + 6490

    5    libc.so.6                          0x00002b25c4c9b460 __libc_start_main +
    245

    6    tmpt6kc8phz                        0x000055a929594169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num < -9 {\n     \
    \           count += 1\n            }\n        } else {\n            if num >\
    \ 9 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp0f3w6la7/tmp0f3w6la7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe9eedac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe9ebd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe9ebd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe9ebd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f3w6la7                        0x0000556cf71f05f5 <unavailable> + 5621

    5    libc.so.6                          0x00002afe9f0c6460 __libc_start_main +
    245

    6    tmp0f3w6la7                        0x0000556cf71f00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.sum_of_digits() > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_r2ejpiz.swift:13:28: error: value of type 'Int' has no member\
    \ 'sum_of_digits'\n    return arr.filter({ $0.sum_of_digits() > 0 }).count\n \
    \                       ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i < 0 {\n            let str = String(i)\n   \
    \         let first = Int(String(str[str.index(str.startIndex, offsetBy: 1)]))!\n\
    \            if first > 0 {\n                count += 1\n            }\n     \
    \   } else {\n            let str = String(i)\n            let first = Int(String(str[str.startIndex]))!\n\
    \            if first > 0 {\n                count += 1\n            }\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpymd1jyxv/tmpymd1jyxv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34fe1bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34fdeb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34fdeb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34fdeb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymd1jyxv                        0x0000562dc6f78880 <unavailable> + 6272

    5    libc.so.6                          0x00002b34fe3a6460 __libc_start_main +
    245

    6    tmpymd1jyxv                        0x0000562dc6f78449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { (n) -> Bool in\n        return n.digits.reduce(0, +) > 0\n    }.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpivqgswjn.swift:14:18: error: value of type 'Int' has no member\
    \ 'digits'\n        return n.digits.reduce(0, +) > 0\n               ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num % 10 < 0 {\n \
    \               count += 1\n            }\n        } else {\n            if num\
    \ % 10 > 0 {\n                count += 1\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpn24_8t63/tmpn24_8t63.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ba5472c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ba5169b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ba5169988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ba51687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24_8t63                        0x0000560ed0a905a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b5ba565e460 __libc_start_main +
    245

    6    tmpn24_8t63                        0x0000560ed0a90169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { (num) -> Bool in\n        return sum_digits(num: num) > 0\n    }.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_sg5zioq.swift:14:16: error: cannot find 'sum_digits' in scope\n\
    \        return sum_digits(num: num) > 0\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num % 10 < 0 {\n \
    \               count += 1\n            }\n        } else {\n            if num\
    \ % 10 > 0 {\n                count += 1\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpn24_8t63/tmpn24_8t63.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ba5472c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ba5169b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ba5169988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ba51687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24_8t63                        0x0000560ed0a905a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b5ba565e460 __libc_start_main +
    245

    6    tmpn24_8t63                        0x0000560ed0a90169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        var num = num\n        if\
    \ num < 0 {\n            num = -num\n        }\n        while num > 0 {\n    \
    \        sum += num % 10\n            num /= 10\n        }\n        if sum > 0\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpw5ifjy25/tmpw5ifjy25.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae787ee0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae787bd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae787bd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae787bd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5ifjy25                        0x0000559a8e53b5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ae7880cc460 __libc_start_main +
    245

    6    tmpw5ifjy25                        0x0000559a8e53b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbianbf_u.swift:13:47: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0 != 0 }.filter { $0.digits.reduce(0, +)\
    \ > 0 }.count\n                                           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.sum() > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6b2u8jiy.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.sum() > 0 }.count\n            \
    \            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits().reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpik6nerei.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits().reduce(0, +) > 0 }.count\n   \
    \                     ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num % 10 < 0 {\n \
    \               count += 1\n            }\n        } else {\n            if num\
    \ % 10 > 0 {\n                count += 1\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpn24_8t63/tmpn24_8t63.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ba5472c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ba5169b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ba5169988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ba51687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24_8t63                        0x0000560ed0a905a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b5ba565e460 __libc_start_main +
    245

    6    tmpn24_8t63                        0x0000560ed0a90169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.reduce(0) { $0 + $1.digits.reduce(0, +) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8csvbx86.swift:13:55: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0 != 0 }.reduce(0) { $0 + $1.digits.reduce(0,\
    \ +) }\n                                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012608
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\n\
    \        var sum = 0\n        var num = $0\n        while num != 0 {\n       \
    \     sum += num % 10\n            num /= 10\n        }\n        return sum >\
    \ 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmps4aus7vz/tmps4aus7vz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a4797ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a47675b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a47675988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a476747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4aus7vz                        0x000055a09b89591a <unavailable> + 6426

    5    libc.so.6                          0x00002b0a47b6a460 __libc_start_main +
    245

    6    tmps4aus7vz                        0x000055a09b895129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i < 0 {\n            if i % 10 < 0 {\n       \
    \         count += 1\n            }\n        } else {\n            if i % 10 >\
    \ 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmps97zhf4w/tmps97zhf4w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f6d02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f69f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f69f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f69f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps97zhf4w                        0x0000563d6f9fe5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b56f6eee460 __libc_start_main +
    245

    6    tmps97zhf4w                        0x0000563d6f9fe169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { (num) -> Bool in\n        return num != 0 && num.digits.reduce(0, +) > 0\n\
    \    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjy_5w656.swift:14:32: error: value of type 'Int' has no member\
    \ 'digits'\n        return num != 0 && num.digits.reduce(0, +) > 0\n         \
    \                  ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.sum_digits()\
    \ > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpd469qf1q.swift:13:27: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter({$0.sum_digits() > 0}).count\n         \
    \              ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.reduce(0) { $0 + abs($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpb7405r0_/tmpb7405r0_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2bcd22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2bca19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2bca19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2bca187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7405r0_                        0x000055a9f21925d0 <unavailable> + 5584

    5    libc.so.6                          0x00002ac2bcf0e460 __libc_start_main +
    245

    6    tmpb7405r0_                        0x000055a9f2192199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0 < 0 ? $0 % 10 != 0 : $0 % 10 != -1 }).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpsxrjbhio/tmpsxrjbhio.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56ba2b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56b9facb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56b9fac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56b9fab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxrjbhio                        0x00005568f8134560 <unavailable> + 5472

    5    libc.so.6                          0x00002b56ba4a1460 __libc_start_main +
    245

    6    tmpsxrjbhio                        0x00005568f8134129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.sum_digits() > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpklxvox37.swift:13:28: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter { $0.sum_digits() > 0 }.count\n        \
    \                ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.sum_of_digits > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0_lczzm1.swift:13:28: error: value of type 'Int' has no member\
    \ 'sum_of_digits'\n    return arr.filter { $0.sum_of_digits > 0 }.count\n    \
    \                    ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).reduce(0, { $0 + abs($1) }).description.characters.map({ Int(String($0))!\
    \ }).reduce(0, { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp30ow_l90.swift:13:76: error: 'characters' is unavailable: Please\
    \ use String directly\n    return arr.filter({ $0 != 0 }).reduce(0, { $0 + abs($1)\
    \ }).description.characters.map({ Int(String($0))! }).reduce(0, { $0 + $1 })\n\
    \                                                                           ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0 < 0 ? $0.digits.reduce(0, +) < 0 : $0.digits.reduce(0,\
    \ +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_219m1_3.swift:13:57: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0 < 0 ? $0.digits.reduce(0,\
    \ +) < 0 : $0.digits.reduce(0, +) > 0 }).count\n                             \
    \                        ~~ ^~~~~~\n/tmp/tmp_219m1_3.swift:13:86: error: value\
    \ of type 'Int' has no member 'digits'\n    return arr.filter({ $0 != 0 }).filter({\
    \ $0 < 0 ? $0.digits.reduce(0, +) < 0 : $0.digits.reduce(0, +) > 0 }).count\n\
    \                                                                            \
    \      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num % 10 != 0 {\n\
    \                count += 1\n            }\n        } else {\n            if num\
    \ % 10 != 0 {\n                count += 1\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp0q1jry97/tmp0q1jry97.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f40237c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f3ff2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f3ff2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f3ff2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0q1jry97                        0x000055ab2da6d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b7f40423460 __libc_start_main +
    245

    6    tmp0q1jry97                        0x000055ab2da6d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.reduce(0) { $0 + $1.digits.reduce(0, +) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8csvbx86.swift:13:55: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0 != 0 }.reduce(0) { $0 + $1.digits.reduce(0,\
    \ +) }\n                                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012608
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp393ehjaj/tmp393ehjaj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed080bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed07db5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed07db5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed07db47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp393ehjaj                        0x00005620cc22f87a <unavailable> + 6266

    5    libc.so.6                          0x00002aed082aa460 __libc_start_main +
    245

    6    tmp393ehjaj                        0x00005620cc22f089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 && $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjgn4skfm.swift:13:39: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 && $0.digits.reduce(0, +) > 0 }).count\n\
    \                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbianbf_u.swift:13:47: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0 != 0 }.filter { $0.digits.reduce(0, +)\
    \ > 0 }.count\n                                           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.reduce(0) { $0 + abs($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpb7405r0_/tmpb7405r0_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2bcd22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2bca19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2bca19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2bca187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7405r0_                        0x000055a9f21925d0 <unavailable> + 5584

    5    libc.so.6                          0x00002ac2bcf0e460 __libc_start_main +
    245

    6    tmpb7405r0_                        0x000055a9f2192199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ (num) -> Bool in\n        return num.digits.reduce(0, +) > 0\n    }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp38_nrck5.swift:14:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, +) > 0\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i < 0 {\n            if i % 10 != 0 {\n      \
    \          count += 1\n            }\n        } else {\n            if i % 10\
    \ != 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpxi602std/tmpxi602std.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74afbfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74af8f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74af8f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74af8f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxi602std                        0x000055587478a5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b74afde8460 __libc_start_main +
    245

    6    tmpxi602std                        0x000055587478a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.filter { abs($0) % 10 != 0 }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpuv42vcq_/tmpuv42vcq_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09053f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09050efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09050ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09050ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuv42vcq_                        0x00005617d3240640 <unavailable> + 5696

    5    libc.so.6                          0x00002b09055e4460 __libc_start_main +
    245

    6    tmpuv42vcq_                        0x00005617d3240209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.reduce(0) { $0 + abs($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpb7405r0_/tmpb7405r0_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2bcd22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2bca19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2bca19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2bca187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7405r0_                        0x000055a9f21925d0 <unavailable> + 5584

    5    libc.so.6                          0x00002ac2bcf0e460 __libc_start_main +
    245

    6    tmpb7405r0_                        0x000055a9f2192199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        var n = num\n        if n\
    \ < 0 {\n            n = -n\n        }\n        while n > 0 {\n            sum\
    \ += n % 10\n            n /= 10\n        }\n        if sum > 0 {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp6juu0jis/tmp6juu0jis.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2001577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b200126eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b200126e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b200126d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6juu0jis                        0x0000556d92e545a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b2001763460 __libc_start_main +
    245

    6    tmp6juu0jis                        0x0000556d92e54169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if num.digits.reduce(0,\
    \ +) > 0 {\n                count += 1\n            }\n        } else {\n    \
    \        if num.digits.reduce(0, +) > 0 {\n                count += 1\n      \
    \      }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpggo98wo0.swift:16:20: error: value of type 'Int' has no member\
    \ 'digits'\n            if num.digits.reduce(0, +) > 0 {\n               ~~~ ^~~~~~\n\
    /tmp/tmpggo98wo0.swift:20:20: error: value of type 'Int' has no member 'digits'\n\
    \            if num.digits.reduce(0, +) > 0 {\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqi575reo/tmpqi575reo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e0a8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0781b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0781988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e07807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi575reo                        0x000056098419c510 <unavailable> + 5392

    5    libc.so.6                          0x00002b78e0c76460 __libc_start_main +
    245

    6    tmpqi575reo                        0x000056098419c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0.digits.reduce(0,\
    \ +) > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fmhjyc.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { abs($0) > 9 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpoiud0pmp/tmpoiud0pmp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed77213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed76f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed76f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed76f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoiud0pmp                        0x000055c2293d1695 <unavailable> + 5781

    5    libc.so.6                          0x00002aed773ff460 __libc_start_main +
    245

    6    tmpoiud0pmp                        0x000055c2293d1179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0.digits.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpng06ns4v.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.reduce(0) { $0 + abs($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpb7405r0_/tmpb7405r0_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2bcd22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2bca19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2bca19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2bca187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7405r0_                        0x000055a9f21925d0 <unavailable> + 5584

    5    libc.so.6                          0x00002ac2bcf0e460 __libc_start_main +
    245

    6    tmpb7405r0_                        0x000055a9f2192199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqi575reo/tmpqi575reo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e0a8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0781b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0781988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e07807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi575reo                        0x000056098419c510 <unavailable> + 5392

    5    libc.so.6                          0x00002b78e0c76460 __libc_start_main +
    245

    6    tmpqi575reo                        0x000056098419c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqi575reo/tmpqi575reo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e0a8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e0781b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e0781988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e07807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi575reo                        0x000056098419c510 <unavailable> + 5392

    5    libc.so.6                          0x00002b78e0c76460 __libc_start_main +
    245

    6    tmpqi575reo                        0x000056098419c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0z8i3j94.swift:13:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, +)\
    \ > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i < 0 {\n            if i % 10 < 0 {\n       \
    \         count += 1\n            }\n        } else {\n            if i % 10 >\
    \ 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmps97zhf4w/tmps97zhf4w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f6d02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f69f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f69f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f69f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps97zhf4w                        0x0000563d6f9fe5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b56f6eee460 __libc_start_main +
    245

    6    tmps97zhf4w                        0x0000563d6f9fe169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbianbf_u.swift:13:47: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0 != 0 }.filter { $0.digits.reduce(0, +)\
    \ > 0 }.count\n                                           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ (num) -> Bool in\n        return num.digits.reduce(0, +) > 0\n    }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp38_nrck5.swift:14:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, +) > 0\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            if sum_digits(num: -num)\
    \ > 0 {\n                count += 1\n            }\n        } else {\n       \
    \     if sum_digits(num: num) > 0 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpw8imi2r7.swift:16:16: error: cannot find 'sum_digits' in scope\n\
    \            if sum_digits(num: -num) > 0 {\n               ^~~~~~~~~~\n/tmp/tmpw8imi2r7.swift:20:16:\
    \ error: cannot find 'sum_digits' in scope\n            if sum_digits(num: num)\
    \ > 0 {\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ (num) -> Bool in\n        return num.digits.reduce(0, +) > 0\n    }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp38_nrck5.swift:14:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, +) > 0\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
