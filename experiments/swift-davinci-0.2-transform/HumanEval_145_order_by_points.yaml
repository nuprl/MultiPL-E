name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\n/// >>> order_by_points(nums: [1, 11, -1, -11, -12])\n\
  /// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums: [] as [Int])\n/// [] as\
  \ [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ["    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted(by: {\n        let sum1\
    \ = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n      \
    \  return sum1 < sum2\n    })", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let sumA = a.digits.reduce(0, +)\n        let sumB = b.digits.reduce(0,\
    \ +)\n        return sumA < sumB\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted(by:\
    \ {\n        let sum1 = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0,\
    \ +)\n        return sum1 == sum2 ? $0 < $1 : sum1 < sum2\n    })", "    return\
    \ nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum == rhsSum\
    \ ? lhs < rhs : lhsSum < rhsSum\n    }", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum =\
    \ lhs.digits.reduce(0, +)\n        let rhsSum = rhs.digits.reduce(0, +)\n    \
    \    return lhsSum < rhsSum\n    }", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = String(a).map { Int(String($0))! }.reduce(0, +)\n   \
    \     let bSum = String(b).map { Int(String($0))! }.reduce(0, +)\n        return\
    \ aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    let sorted = nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum\
    \ = lhs.digits.reduce(0, +)\n        let rhsSum = rhs.digits.reduce(0, +)\n  \
    \      return lhsSum == rhsSum ? lhs < rhs : lhsSum < rhsSum\n    }\n    return\
    \ sorted", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    var result = [Int]()\n    var dict = [Int: Int]()\n    var sum =\
    \ 0\n    for i in 0..<nums.count {\n        sum = 0\n        for char in String(nums[i]).characters\
    \ {\n            sum += Int(String(char))!\n        }\n        dict[sum] = nums[i]\n\
    \    }\n    let sortedKeys = Array(dict.keys).sort()\n    for key in sortedKeys\
    \ {\n        result.append(dict[key]!)\n    }\n    return result", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (first, second) -> Bool in\n        let firstSum = first.digits.reduce(0,\
    \ +)\n        let secondSum = second.digits.reduce(0, +)\n        return firstSum\
    \ < secondSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let sumA = a.digits.reduce(0, +)\n        let sumB\
    \ = b.digits.reduce(0, +)\n        return sumA < sumB\n    }", "    var nums =\
    \ nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = String(a).map {\
    \ Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return aSum < bSum\n    }\n    return nums", "    return\
    \ nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0,\
    \ +)\n        let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   })", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).map\
    \ { Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = String(a).map { Int(String($0))! }.reduce(0,\
    \ +)\n        let bSum = String(b).map { Int(String($0))! }.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    return nums.sorted {\n        let sum1\
    \ = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n      \
    \  return sum1 == sum2 ? $0 < $1 : sum1 < sum2\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted(by:\
    \ {\n        let a = abs($0)\n        let b = abs($1)\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    })", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    var nums = nums\n    nums.sort\
    \ { (a, b) -> Bool in\n        let aSum = String(a).reduce(0) { $0 + Int(String($1))!\
    \ }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n      \
    \  return aSum < bSum\n    }\n    return nums", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = String(a).reduce(0) { $0 + Int(String($1))!\
    \ }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n      \
    \  return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var result\
    \ = [Int]()\n    var dict = [Int: [Int]]()\n    for num in nums {\n        let\
    \ sum = sum_of_digits(num: num)\n        if dict[sum] == nil {\n            dict[sum]\
    \ = [num]\n        } else {\n            dict[sum]?.append(num)\n        }\n \
    \   }\n    let sortedKeys = dict.keys.sorted()\n    for key in sortedKeys {\n\
    \        result.append(contentsOf: dict[key]!)\n    }\n    return result", " \
    \   return nums.sorted(by: {\n        let sum1 = sum_of_digits(num: $0)\n    \
    \    let sum2 = sum_of_digits(num: $1)\n        if sum1 == sum2 {\n          \
    \  return nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n        }\n   \
    \     return sum1 < sum2\n    })", "    return nums.sorted(by: { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    })", "    return nums.sorted(by: {\n   \
    \     let sum1 = String($0).map { Int(String($0))! }.reduce(0, +)\n        let\
    \ sum2 = String($1).map { Int(String($0))! }.reduce(0, +)\n        return sum1\
    \ < sum2\n    })", "    return nums.sorted { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted { (lhs,\
    \ rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0, +)\n        let rhsSum\
    \ = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n    }", "    return\
    \ nums.sorted { (num1, num2) -> Bool in\n        let num1Sum = num1.digits.reduce(0,\
    \ +)\n        let num2Sum = num2.digits.reduce(0, +)\n        return num1Sum <\
    \ num2Sum\n    }", "    return nums.sorted(by: {\n        let sum1 = $0.digits.reduce(0,\
    \ +)\n        let sum2 = $1.digits.reduce(0, +)\n        return sum1 < sum2\n\
    \    })", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let sumA = String(a).reduce(0) { $0 + Int(String($1))! }\n\
    \        let sumB = String(b).reduce(0) { $0 + Int(String($1))! }\n        return\
    \ sumA < sumB\n    }", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ a_sum = a.digits.reduce(0, +)\n        let b_sum = b.digits.reduce(0, +)\n \
    \       return a_sum < b_sum || (a_sum == b_sum && a < b)\n    }", "    return\
    \ nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum || (aSum\
    \ == bSum && a < b)\n    })", "    return nums.sorted { (a, b) -> Bool in\n  \
    \      let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (lhs, rhs)\
    \ -> Bool in\n        let lhsSum = lhs.digits.reduce(0, +)\n        let rhsSum\
    \ = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digitsSum()\n        let bSum = b.digitsSum()\n   \
    \     return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (lhs, rhs) -> Bool in\n\
    \        let lhsSum = lhs.digits.reduce(0, +)\n        let rhsSum = rhs.digits.reduce(0,\
    \ +)\n        return lhsSum < rhsSum\n    }", "    return nums.sorted { (lhs,\
    \ rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0, +)\n        let rhsSum\
    \ = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n    }", "    var\
    \ result = nums\n    result.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n    return result", "    var result: [Int] = []\n\
    \    var dict: [Int: Int] = [:]\n    for (index, num) in nums.enumerated() {\n\
    \        dict[num] = index\n    }\n    let sortedDict = dict.sorted { (key1, key2)\
    \ -> Bool in\n        let sum1 = key1.key.digits.reduce(0, +)\n        let sum2\
    \ = key2.key.digits.reduce(0, +)\n        if sum1 == sum2 {\n            return\
    \ key1.value < key2.value\n        }\n        return sum1 < sum2\n    }\n    for\
    \ (key, _) in sortedDict {\n        result.append(key)\n    }\n    return result",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = String(a).reduce(0) { (result, char) -> Int in\n\
    \            return result + Int(String(char))!\n        }\n        let bSum =\
    \ String(b).reduce(0) { (result, char) -> Int in\n            return result +\
    \ Int(String(char))!\n        }\n        return aSum < bSum\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        return sum_of_digits(num: a) < sum_of_digits(num: b)\n    }",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted(by: {\n        let sum1 = $0.digits.reduce(0,\
    \ +)\n        let sum2 = $1.digits.reduce(0, +)\n        return sum1 == sum2 ?\
    \ $0 < $1 : sum1 < sum2\n    })", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (lhs, rhs)\
    \ -> Bool in\n        let lhsSum = lhs.digits.reduce(0, +)\n        let rhsSum\
    \ = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n    }",
  "    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in nums {\n\
    \        var sum = 0\n        var num = num\n        while num != 0 {\n      \
    \      sum += num % 10\n            num /= 10\n        }\n        dict[num] =\
    \ sum\n    }\n    let sortedDict = dict.sorted { $0.value < $1.value }\n    for\
    \ (key, _) in sortedDict {\n        result.append(key)\n    }\n    return result",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted(by: {\n        let sum1\
    \ = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n      \
    \  return sum1 < sum2\n    })", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (num1, num2)\
    \ -> Bool in\n        let num1Sum = sum_of_digits(num: num1)\n        let num2Sum\
    \ = sum_of_digits(num: num2)\n        if num1Sum == num2Sum {\n            return\
    \ nums.firstIndex(of: num1)! < nums.firstIndex(of: num2)!\n        }\n       \
    \ return num1Sum < num2Sum\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = String(a).reduce(0) { $0 + Int(String($1))! }\n        let\
    \ bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n        return aSum <\
    \ bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum\n    }", "    return nums.sorted { (lhs, rhs) -> Bool in\n     \
    \   let lhsSum = lhs.digits.reduce(0, +)\n        let rhsSum = rhs.digits.reduce(0,\
    \ +)\n        return lhsSum == rhsSum ? lhs < rhs : lhsSum < rhsSum\n    }", " \
    \   return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    let sorted = nums.sorted { (a, b) -> Bool in\n        let aDigits\
    \ = a.digits\n        let bDigits = b.digits\n        let aSum = aDigits.reduce(0,\
    \ +)\n        let bSum = bDigits.reduce(0, +)\n        if aSum == bSum {\n   \
    \         return a < b\n        }\n        return aSum < bSum\n    }\n    return\
    \ sorted", "    return nums.sorted(by: {\n        let sum1 = sum_of_digits(num:\
    \ $0)\n        let sum2 = sum_of_digits(num: $1)\n        if sum1 == sum2 {\n\
    \            return nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n    \
    \    }\n        return sum1 < sum2\n    })", "    return nums.sorted { (a, b)\
    \ -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        return sum_of_digits(num: a) < sum_of_digits(num: b)\n    }",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (first, second) -> Bool in\n        let firstSum\
    \ = first.digits.reduce(0, +)\n        let secondSum = second.digits.reduce(0,\
    \ +)\n        return firstSum < secondSum\n    }", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted(by: {\n        let sum1 = $0.digits.reduce(0,\
    \ +)\n        let sum2 = $1.digits.reduce(0, +)\n        return sum1 < sum2\n\
    \    })", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum =\
    \ lhs.digits.reduce(0, +)\n        let rhsSum = rhs.digits.reduce(0, +)\n    \
    \    return lhsSum == rhsSum ? lhs < rhs : lhsSum < rhsSum\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n    }",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted {\n        let\
    \ sum1 = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n \
    \       if sum1 == sum2 {\n            return nums.firstIndex(of: $0)! < nums.firstIndex(of:\
    \ $1)!\n        }\n        return sum1 < sum2\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    var result = nums\n    result.sort { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum < bSum\n    }\n    return result", "    return nums.sorted {\
    \ (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted(by: {\n        let sum1\
    \ = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n      \
    \  return sum1 < sum2\n    })", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted {\n        let\
    \ sum1 = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n \
    \       if sum1 == sum2 {\n            return nums.firstIndex(of: $0)! < nums.firstIndex(of:\
    \ $1)!\n        }\n        return sum1 < sum2\n    }", "    var result = nums\n\
    \    result.sort { (a, b) -> Bool in\n        let aSum = sum_of_digits(num: a)\n\
    \        let bSum = sum_of_digits(num: b)\n        if aSum == bSum {\n       \
    \     return a < b\n        }\n        return aSum < bSum\n    }\n    return result",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted(by: {\n        let a = abs($0)\n        let b\
    \ = abs($1)\n        let sumA = a.digits.reduce(0, +)\n        let sumB = b.digits.reduce(0,\
    \ +)\n        return sumA == sumB ? $0 < $1 : sumA < sumB\n    })", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var nums\
    \ = nums\n    for i in 0..<nums.count {\n        for j in i..<nums.count {\n \
    \           if sum_of_digits(nums[i]) > sum_of_digits(nums[j]) {\n           \
    \     nums.swapAt(i, j)\n            }\n        }\n    }\n    return nums", " \
    \   return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted(by: {\n        let sum1 = $0.digits.reduce(0,\
    \ +)\n        let sum2 = $1.digits.reduce(0, +)\n        return sum1 < sum2\n\
    \    })", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).map\
    \ { Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digitsSum()\n\
    \        let bSum = b.digitsSum()\n        return aSum == bSum ? a < b : aSum\
    \ < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum\
    \ = String(a).map { Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map\
    \ { Int(String($0))! }.reduce(0, +)\n        return aSum < bSum\n    }", "   \
    \ return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted(by: { (a, b)\
    \ -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    })", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted(by: {\n    \
    \    let sum1 = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0,\
    \ +)\n        return sum1 < sum2\n    })", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted(by: {\n        let sum1 = sum_of_digits(num:\
    \ $0)\n        let sum2 = sum_of_digits(num: $1)\n        if sum1 == sum2 {\n\
    \            return nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n    \
    \    }\n        return sum1 < sum2\n    })", "    var result = [Int]()\n    var\
    \ dict = [Int: [Int]]()\n    for num in nums {\n        let sum = sum_of_digits(num:\
    \ num)\n        if dict[sum] == nil {\n            dict[sum] = [num]\n       \
    \ } else {\n            dict[sum]?.append(num)\n        }\n    }\n    let keys\
    \ = dict.keys.sorted()\n    for key in keys {\n        result.append(contentsOf:\
    \ dict[key]!)\n    }\n    return result", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }"]
stop_tokens:
- "\n}"
