name: HumanEval_18_how_many_times
language: swift
prompt: "\n/// Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
  \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
  \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc how_many_times(string:\
  \ String, substring: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(how_many_times(string: \"\", substring:\
  \ \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") ==\
  \ 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
  \ \"john doe\", substring: \"john\") == 1)"
completions: ["    var count = 0\n    var startIndex = string.startIndex\n    while\
    \ let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count", "    let stringLength = string.count\n    let substringLength = substring.count\n\
    \    var count = 0\n    var i = 0\n    while i < stringLength {\n        let startIndex\
    \ = string.index(string.startIndex, offsetBy: i)\n        let endIndex = string.index(string.startIndex,\
    \ offsetBy: i + substringLength)\n        let range = startIndex..<endIndex\n\
    \        if string[range] == substring {\n            count += 1\n           \
    \ i += substringLength\n        } else {\n            i += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var start\
    \ = string.startIndex\n    while let range = string.range(of: substring, range:\
    \ start..<string.endIndex) {\n        count += 1\n        start = range.upperBound\n\
    \    }\n    return count", "    var count = 0\n    var start = string.startIndex\n\
    \    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count", "    var count = 0\n    var start = string.startIndex\n\
    \    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count", "    let stringLength = string.count\n\
    \    let substringLength = substring.count\n    var count = 0\n    var index =\
    \ 0\n    while index < stringLength {\n        let startIndex = string.index(string.startIndex,\
    \ offsetBy: index)\n        let endIndex = string.index(string.startIndex, offsetBy:\
    \ index + substringLength)\n        if string[startIndex..<endIndex] == substring\
    \ {\n            count += 1\n            index += substringLength\n        } else\
    \ {\n            index += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count", "    var count = 0\n    var start\
    \ = string.startIndex\n    while let range = string.range(of: substring, range:\
    \ start..<string.endIndex) {\n        count += 1\n        start = range.upperBound\n\
    \    }\n    return count", "    if string.isEmpty || substring.isEmpty {\n   \
    \     return 0\n    }\n    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, options: [], range: startIndex..<string.endIndex,\
    \ locale: nil) {\n        count += 1\n        startIndex = range.upperBound\n\
    \    }\n    return count", "    var count = 0\n    var start = string.startIndex\n\
    \    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count", "    var count = 0\n    var start\
    \ = string.startIndex\n    while let range = string.range(of: substring, range:\
    \ start..<string.endIndex) {\n        count += 1\n        start = range.upperBound\n\
    \    }\n    return count", "    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, options: [], range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count", "    var count = 0\n    var startIndex = string.startIndex\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: startIndex..<string.endIndex,\
    \ locale: nil) {\n        count += 1\n        startIndex = range.upperBound\n\
    \    }\n    return count", "    var count = 0\n    var start = string.startIndex\n\
    \    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count",
  "    guard !string.isEmpty && !substring.isEmpty else { return 0 }\n    guard string.count\
    \ >= substring.count else { return 0 }\n    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        let range = string.range(of: substring,\
    \ range: index..<string.endIndex)\n        if let range = range {\n          \
    \  count += 1\n            index = range.upperBound\n        } else {\n      \
    \      break\n        }\n    }\n    return count", "    var count = 0\n    var\
    \ start = string.startIndex\n    while start < string.endIndex {\n        if let\
    \ range = string.range(of: substring, range: start..<string.endIndex) {\n    \
    \        count += 1\n            start = range.upperBound\n        } else {\n\
    \            break\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
